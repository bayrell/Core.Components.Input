<class version="1.0"
	name="Runtime.Web.CRUD.CrudPage" extends="Runtime.Web.Component" 
	module="Runtime.Web.CRUD." model="Runtime.Web.CRUD.CrudPageModel"
>

<use name="Runtime.Core.Message" />
<use name="Runtime.Core.RemoteCallAnswer" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.RenderDriver" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.Button.Button" component="true" />
<use name="Runtime.Web.CRUD.CrudFilter" component="true" />
<use name="Runtime.Web.CRUD.CrudPageModel" />
<use name="Runtime.Web.Dialog.Dialog" component="true" />
<use name="Runtime.Web.Dialog.DialogEvent" />
<use name="Runtime.Web.Dialog.DialogModel" />
<use name="Runtime.Web.Form.Form" component="true" />
<use name="Runtime.Web.Form.FormEvent" />
<use name="Runtime.Web.Form.FormModel" />
<use name="Runtime.Web.Input.Input" component="true" />
<use name="Runtime.Web.Input.Label" component="true" />
<use name="Runtime.Web.Input.Select" component="true" />
<use name="Runtime.Web.Input.SelectText" component="true" />
<use name="Runtime.Web.Table.Pagination" component="true" />
<use name="Runtime.Web.Table.Table" component="true" />
<use name="Runtime.Web.Table.TableModel" />

<style>
</style>


<template name="render">
	
	%var Dict messages = params["messages"];
	%var Dict crud_settings = params["crud_settings"];
	%var Collection<string> form_fields = params["form_fields"];
	%var Collection<string> filter_fields = params["filter_fields"];
	%var Collection<string> table_fields = params["table_fields"];
	
	<div class='crud'>
		
		<div class='buttons'>
			<Button @event:MouseClickEvent="onShowAddClick" type="primary">{ messages["add"] }</Button>
		</div>
		
		%if (rtl::exists(filter_fields))
		{
			<div class='filter'>
				<CrudFilter @name="filter" struct={ crud_settings } fields={ filter_fields } />
			</div>
		}
		
		<div class='table'>
			<Table @name="table" struct={ crud_settings } fields={ table_fields } />
			<Pagination
				page={ model.table.page + 1 }
				pages={ model.table.pages }
				delta={ model.table.delta }
			/>
		</div>
		
		%var Dict dialog_form_settings = params["dialog_form"] |> default Dict {};
		<div class='dialogs'>
			<Dialog @name="dialog_add" style={ DialogModel::STYLE_CONTENT } show_buttons={ false } 
				...dialog_form_settings
			>
				<Form @name="form_add" action="add" struct={ crud_settings } fields={ form_fields }
					@event:FormEvent="onFormEvent"
				/>
			</Dialog>
			<Dialog @name="dialog_edit" style={ DialogModel::STYLE_CONTENT } show_buttons={ false } 
				...dialog_form_settings
			>
				<Form @name="form_edit" action="edit" struct={ crud_settings } fields={ form_fields }
					@event:FormEvent="onFormEvent"
				/>
			</Dialog>
			<Dialog @name="dialog_delete" style={ DialogModel::STYLE_CONFIRM } auto_hide={ false }
				@event:DialogEvent="onDialogEvent"
			/>
		</div>
	</div>
	
</template>


<template name="fieldNumber">
	%var TableModel table_model = params["table-model"];
	%var int index = params["row-index"];
	%if (table_model)
	{
		{ table_model.page * table_model.limit + index + 1 }
	}
</template>


<template name="buttonEdit">
	%var TableModel table_model = params["table-model"];
	%var Dict item = params["row-data"];
	%var int index = params["row-index"];
	<Button type='small' data-index={ index } data-id={ item["id"] }
		@event:MouseClickEvent="onRowEditClick" @key="edit"
	>
		{ _("Runtime.Web.CRUD", "Edit") }
	</Button>
</template>


<template name="buttonDelete">
	%var TableModel table_model = params["table-model"];
	%var Dict item = params["row-data"];
	%var int index = params["row-index"];
	<Button type='small' data-index={ index } data-id={ item["id"] }
		@event:MouseClickEvent="onRowDeleteClick" @key="delete"
	>
		{ _("Runtime.Web.CRUD", "Delete") }
	</Button>
</template>


<script type="frontend">


/**
 * Returns object name
 */
string getCrudObjectName() => this.params.get("object_name", "");



/**
 * On show add dialog
 */
async void onShowAddClick(Message<MouseClickEvent> msg)
{
	this.dialog_add.update("show");
	this.form_add.update("clear");
}



/**
 * On row edit
 */
async void onRowEditClick(Message<MouseClickEvent> msg)
{
	int id = msg.sender.params["data-id"];
	Dict item = this.table.call("getItemById", id);
	this.dialog_edit.update("show");
	this.form_edit.update("clear");
	this.form_edit.update("setItem", item);
}



/**
 * On row delete
 */
async void onRowDeleteClick(Message<MouseClickEvent> msg)
{
	int id = msg.sender.params["data-id"];
	Dict item = this.table.call("getItemById", id);
	
	string message = "";
	fn f = this.params["messages", "delete"];
	if (rtl::exists(f))
	{
		if (rtl::isFn(f))
		{
			message = f(item);
		}
		else message = f;
	}
	else
	{
		message = _("Runtime.Web.CRUD", "Do you realy want to delete '%name%' ?", { "name": item["name"] } );
	}
	
	this.dialog_delete.update
	(
		"show",
		{
			"text": message,
			"tag":
			{
				"item": item,
			},
		}
	);
	
}



/**
 * On dialog event
 */
async void onDialogEvent(Message<DialogEvent> msg)
{
	DialogEvent e = msg.data;
	if (msg.sender == this.dialog_delete)
	{
		if (e.button_result == "cancel")
		{
			this.dialog_delete.update("hide");
		}
		else
		{
			await this.onItemDelete(e.tag["item"]);
		}
	}
}



/**
 * On form event
 */
async void onFormEvent(Message<FormEvent> msg)
{
	FormEvent e = msg.data;
	if (msg.sender == this.form_add)
	{
		if (e.event == FormEvent::ACTION_CANCEL)
		{
			this.dialog_add.update("hide");
		}
		else if (e.event == FormEvent::ACTION_CREATE)
		{
			await this.onItemAdd();
		}
	}
	
	if (msg.sender == this.form_edit)
	{
		if (e.event == FormEvent::ACTION_CANCEL)
		{
			this.dialog_edit.update("hide");
		}
		else if (e.event == FormEvent::ACTION_UPDATE)
		{
			await this.onItemUpdate();
		}
	}
}



/**
 * Add item
 */
async void onItemAdd()
{
	Dict item = this.form_add.model("item");
	this.form_add.update("setWaitMessage");
	
	/* Send api */
	RemoteCallAnswer answer = await RenderDriver::remoteBusCall
	{
		"object_name": this.getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "add",
		"data":
		{
			"item": item,
		},
	};
	
	if (answer.isSuccess())
	{
		this.table.update("prependItem", answer.response["new_item"]);
		this.dialog_add.update("hide");
	}
	else
	{
		this.form_add.update("setAnswer", answer);
	}
	
}



/**
 * Update item
 */
async void onItemUpdate()
{
	Dict item = this.form_edit.model("item");
	this.form_edit.update("setWaitMessage");
	
	/* Send api */
	RemoteCallAnswer answer = await RenderDriver::remoteBusCall
	{
		"object_name": this.getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "update",
		"data":
		{
			"pk":
			{
				"id": item["id"],
			},
			"item": item,
		},
	};
	
	if (answer.isSuccess())
	{
		this.table.update("setItem", item["id"], answer.response["new_item"]);
		this.dialog_edit.update("hide");
	}
	else
	{
		this.form_edit.update("setAnswer", answer);
	}
	
}



/**
 * Delete item
 */
async void onItemDelete(Dict item)
{
	this.dialog_delete.update("setWaitMessage");
	
	/* Send api */
	RemoteCallAnswer answer = await RenderDriver::remoteBusCall
	{
		"object_name": this.getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "delete",
		"data":
		{
			"pk":
			{
				"id": item["id"],
			},
		},
	};
	
	if (answer.isSuccess())
	{
		this.table.update("removeItemById", item["id"]);
		this.dialog_delete.update("hide");
	}
	else
	{
		this.dialog_delete.update("setAnswer", answer);
	}
}



</script>

</class>