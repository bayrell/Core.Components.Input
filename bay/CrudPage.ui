<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.CRUD.CrudPage" extends="Runtime.Web.App.Page" 
	module="Runtime.Web.CRUD" model="Runtime.Web.CRUD.CrudPageModel"
>

<use name="Runtime.BaseStruct" />
<use name="Runtime.Web.Component" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.App.LayoutModel" />
<use name="Runtime.Web.App.Route" />
<use name="Runtime.Web.App.Widget" />
<use name="Runtime.Web.CRUD.CrudWidgetEvent" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.CRUD.TableWidgetModel" />
<use name="Runtime.Web.Events.BaseEvent" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.Input.Button" component="true" />


<script>

/**
 * Returns object name
 */
pure string getCrudObjectName() => "App.Test";


/**
 * Returns options
 */
pure Collection getOptions(LayoutModel layout, CrudPageModel model, Dict params, string name = "")
{
	return parent::getOptions(layout, model, params, name);
}


/**
 * Returns crud struct
 */
pure Collection<FieldInfo> getStruct(LayoutModel layout, CrudPageModel model, Dict params) => [];


/**
 * Custom class name
 */
pure string customSettings(LayoutModel layout, Dict crud_settings) => crud_settings;


/**
 * Custom field render
 */
pure html renderField(LayoutModel layout, Dict crud_settings) => null;


/**
 * Returns filter fields
 */
pure Collection<string> getFilterFields(LayoutModel layout, CrudPageModel model, Dict params) => [];


/**
 * Returns form fields
 */
pure Collection<string> getFormFields(LayoutModel layout, CrudPageModel model, Dict params) => [];


/**
 * Returns table fields
 */
pure Collection<string> getTableFields(LayoutModel layout, CrudPageModel model, Dict params) => [];


/**
 * Returns view fields
 */
pure Collection<string> getViewFields(BaseStruct layout, CrudPageModel model, Dict params) => [];


/**
 * Returns messages
 */
pure Dict<string> getMessages() => {};


/**
 * Extend component model
 */
pure CrudPageModel extendComponentModel(BaseStruct layout, CrudPageModel model, Dict params)
{
	if (model.struct == null) model <= struct <= static::getStruct(layout, model, params);
	if (model.filter_fields == null) model <= filter_fields <= static::getFilterFields(layout, model, params);
	if (model.form_fields == null) model <= form_fields <= static::getFormFields(layout, model, params);
	if (model.table_fields == null) model <= table_fields <= static::getTableFields(layout, model, params);
	if (model.view_fields == null) model <= view_fields <= static::getViewFields(layout, model, params);
	return model;
}

</script>


<template name="renderDate" args="LayoutModel layout, Dict crud_settings">
	%var var value = crud_settings["value"];
	{ value != null ? value.getDate( layout.tz ) : "" }
</template>


<template name="renderDateTime" args="LayoutModel layout, Dict crud_settings">
	%var var value = crud_settings["value"];
	{ value != null ? value.getDBTime( layout.tz ) : "" }
</template>


<template name="renderNumber" args="LayoutModel layout, Dict crud_settings">
	%var TableWidgetModel table_widget_model = crud_settings["crud_table_model"];
	%var int index = crud_settings["crud_index"];
	%if (table_widget_model)
	{
		{ table_widget_model.page * table_widget_model.limit + index + 1 }
	}
</template>


<template name="renderButtons" args="LayoutModel layout, Dict crud_settings">
	{ static::renderButton(layout, crud_settings, "edit") }
	{ static::renderButton(layout, crud_settings, "delete") }
</template>


<template name="renderButton" args="LayoutModel layout, Dict crud_settings, string button_type, Dict options = null">
	
	%var CrudPageModel page_model = crud_settings["crud_page_model"];
	%var Dict item = crud_settings["crud_item"];
	%var int index = crud_settings["crud_index"];
	%var string widget_key = crud_settings["crud_params", "widget_key"];
	%var Dict pk = page_model.getPrimaryKey(item);
	
	%if (button_type == "edit")
	{
		<Button type='small' data-index={ index } data-pk={ page_model.getPrimaryKey(item) }
			data-widget={ widget_key } data-widget-dest="dialog_edit" data-widget-action="open_dialog"
			@event:MouseClickEvent="onButtonEvent" @key="edit"
		>
			{ _("Runtime.Web.CRUD", "Edit") }
		</Button>
	}
	%else if (button_type == "delete")
	{
		<Button type='small danger' data-index={ index } data-pk={ page_model.getPrimaryKey(item) }
			data-widget={ widget_key } data-widget-dest="dialog_delete" data-widget-action="open_dialog"
			@event:MouseClickEvent="onButtonEvent" @key="delete"
		>
			{ _("Runtime.Web.CRUD", "Delete") }
		</Button>
	}
</template>


<script>


/**
 * On button event
 */
async void onButtonEvent(Message<BaseEvent> msg)
{
	Dict pk = msg.sender.params["data-pk"];
	string widget_key = msg.sender.params["data-widget"] |> default string "";
	string widget_dest = msg.sender.params["data-widget-dest"] |> default string "";
	string widget_action = msg.sender.params["data-widget-action"] |> default string "";
	
	/* Get item */
	TableWidgetModel table_widget_model = this.model(["widgets", widget_key]);
	Dict item = table_widget_model::getFirstItem(table_widget_model, pk);
	
	CrudWidgetEvent event = new CrudWidgetEvent
	{
		"from": widget_key,
		"dest": widget_dest,
		"action": widget_action,
		"current_widget": widget_key,
		"item": item,
	};
	Message msg = new Message(event);
	msg.sender = this;
	
	await this.onWidgetEvent(msg);
}


/**
 * On widget event
 */
async void onWidgetEvent(Message<BaseEvent> msg)
{
	CrudPageModel page_model = this.model();
	for (int i=0; i<this.childs.count(); i++)
	{
		Component c = this.childs[i];
		if (c instanceof Widget)
		{
			await c.handleEvent(msg);
		}
	}
}

</script>

</class>