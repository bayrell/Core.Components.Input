<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.CRUD.CrudPage" extends="Runtime.Web.App.Page" 
	module="Runtime.Web.CRUD" model="Runtime.Web.Page.PageModel"
>

<use name="Runtime.Web.Component" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.App.Route" />
<use name="Runtime.Web.App.Widget" />
<use name="Runtime.Web.App.WidgetEvent" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.CRUD.SearchWidgetModel" />
<use name="Runtime.Web.Events.BaseEvent" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.Input.Button" component="true" />


<template name="renderDate" args="LayoutModel layout, Dict crud_settings">
	%var string crud_kind = crud_settings["crud_kind"] |> default string "";
	%var string class_name = crud_settings["crud_class_name"] |> default string "";
	%var var value = crud_settings["value"];
	{ value != null ? value.getDate( layout.tz ) : "" }
</template>


<template name="renderDateTime" args="LayoutModel layout, Dict crud_settings">
	%var string crud_kind = crud_settings["crud_kind"] |> default string "";
	%var string class_name = crud_settings["crud_class_name"] |> default string "";
	%var var value = crud_settings["value"];
	{ value != null ? value.getDBTime( layout.tz ) : "" }
</template>


<template name="renderNumber" args="LayoutModel layout, Dict crud_settings">
	%var SearchWidgetModel search_widget_model = crud_settings["crud_search_model"];
	%var int index = crud_settings["crud_index"];
	%if (search_widget_model)
	{
		{ search_widget_model.page * search_widget_model.limit + index + 1 }
	}
</template>


<template name="renderButtons" args="LayoutModel layout, Dict crud_settings">
	{ static::renderButton(layout, crud_settings, "edit") }
	{ static::renderButton(layout, crud_settings, "delete") }
</template>


<template name="renderButton" args="LayoutModel layout, Dict crud_settings, string button_type, Dict options = null">
	
	%var SearchWidgetModel search_widget_model = crud_settings["crud_search_model"];
	%var Collection<FieldInfo> struct = crud_settings["crud_params", "struct"];
	%var Dict item = crud_settings["crud_item"];
	%var int index = crud_settings["crud_index"];
	%var Dict pk = search_widget_model.getPrimaryKey(item);
	
	%if (button_type == "edit")
	{
		<Button type='small' data-index={ index } data-pk={ search_widget_model.getPrimaryKey(item) }
			data-widget-dest="dialog_edit" data-widget-action="open_dialog"
			@event:MouseClickEvent="onButtonEvent" @key="edit"
		>
			{ _("Runtime.Web.CRUD", "Edit") }
		</Button>
	}
	%else if (button_type == "delete")
	{
		<Button type='small danger' data-index={ index } data-pk={ search_widget_model.getPrimaryKey(item) }
			data-widget-dest="dialog_delete" data-widget-action="open_dialog"
			@event:MouseClickEvent="onButtonEvent" @key="delete"
		>
			{ _("Runtime.Web.CRUD", "Delete") }
		</Button>
	}
</template>


<script>


/**
 * On button event
 */
async void onButtonEvent(Message<BaseEvent> msg)
{
	PageModel model = this.model();
	SearchWidgetModel search_widget_model = model.widgets["search"];	
	Dict pk = msg.sender.params["data-pk"];
	Dict item = search_widget_model.getFirstItem(pk)
	
	string widget_dest = msg.sender.params["data-widget-dest"] |> default string "";
	string widget_action = msg.sender.params["data-widget-action"] |> default string "";
	WidgetEvent event = new WidgetEvent
	{
		"dest": widget_dest,
		"action": widget_action,
		"tag":
		{
			"item": item,
		},
	};
	Message msg = new Message(event);
	msg.sender = this;
	await this.onWidgetEvent(msg);
}


/**
 * On widget event
 */
async void onWidgetEvent(Message<BaseEvent> msg)
{
	PageModel page_model = this.model();
	for (int i=0; i<this.childs.count(); i++)
	{
		Component c = this.childs[i];
		if (c instanceof Widget)
		{
			await c.widgetEvent(msg);
		}
	}
}

</script>

</class>