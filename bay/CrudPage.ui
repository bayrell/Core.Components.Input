<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.CRUD.CrudPage" extends="Runtime.Web.Component" 
	module="Runtime.Web.CRUD" model="Runtime.Web.CRUD.CrudPageModel"
>

<use name="Runtime.lib" />
<use name="Runtime.DateTime" />
<use name="Runtime.Exceptions.RuntimeException" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.App.LayoutModel" />
<use name="Runtime.Web.App.RemoteCallAnswer" />
<use name="Runtime.Web.App.RenderContainer" />
<use name="Runtime.Web.App.Request" />
<use name="Runtime.Web.App.Route" />
<use name="Runtime.Web.App.RouteList" />
<use name="Runtime.Web.App.RouteMiddleware" />
<use name="Runtime.Web.App.WebApp" />
<use name="Runtime.Web.CRUD.CrudFilter" component="true" />
<use name="Runtime.Web.CRUD.CrudPageModel" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.CRUD.Form" component="true" />
<use name="Runtime.Web.CRUD.FormEvent" />
<use name="Runtime.Web.CRUD.FormModel" />
<use name="Runtime.Web.CRUD.Pagination" component="true" />
<use name="Runtime.Web.CRUD.Table" component="true" />
<use name="Runtime.Web.CRUD.TableModel" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.Dialog.Dialog" component="true" />
<use name="Runtime.Web.Dialog.DialogEvent" />
<use name="Runtime.Web.Dialog.DialogModel" />
<use name="Runtime.Web.Input.Button" component="true" />
<use name="Runtime.Web.Input.Input" component="true" />
<use name="Runtime.Web.Input.Label" component="true" />
<use name="Runtime.Web.Input.Select" component="true" />
<use name="Runtime.Web.Input.SelectText" component="true" />


<script>


/**
 * Returns object name
 */
pure string getCrudObjectName() => "";



/**
 * Returns options
 */
pure Collection getOptions(RenderContainer container, string name = "") => null;



/**
 * Returns crud struct
 */
pure Collection<FieldInfo> getStruct(RenderContainer container) => [];



/**
 * Returns filter fields
 */
pure Collection<string> getFilterFields(RenderContainer container) => [];



/**
 * Returns form fields
 */
pure Collection<string> getFormFields(RenderContainer container) => [];



/**
 * Returns table fields
 */
pure Collection<string> getTableFields(RenderContainer container) => [];



/**
 * Returns view fields
 */
pure Collection<string> getViewFields(RenderContainer container) => [];



/**
 * Returns messages
 */
pure Dict<string> getMessages() => {};



/**
 * Dialog settings
 */
pure Dict getDialogSettings() => {};



/**
 * Form settings
 */
pure Dict getFormSettings() => {};



/**
 * Crud Search
 */
static async RenderContainer crudSearch(RenderContainer container)
{
	/* Get page model */
	CrudPageModel page_model = container.layout.model[container.layout.page_class]
		|> default CrudPageModel new CrudPageModel
	;
	page_model <= action <= "search";
	
	/* Get crud object name */
	string object_name = static::getCrudObjectName();
	
	/* Get search params */
	Dict search_params = static::getCrudSearchParams(container.request);
	
	/* Remote call */
	RemoteCallAnswer answer = await container.externalBusCall
	{
		"object_name": object_name,
		"interface_name": "core.crud",
		"method_name": "search",
		"data": search_params,
	};
	
	/* Answer */
	if (answer.isSuccess())
	{
		page_model <= table <= rows <= answer.response["items"];
		page_model <= table <= page <= answer.response["page"];
		page_model <= table <= pages <= answer.response["pages"];
		page_model <= table <= limit <= answer.response["limit"];
		page_model <= options <= answer.response["options"];
	}
	
	/* Exception */
	else
	{
		page_model <= error_code <= answer.code;
		page_model <= error_message <= answer.error_message;
		page_model <= error_name <= answer.error_name;
		page_model <= error_code <= rtl::ERROR_OK;
	}
	
	/* Set filter items */
	Dict filter = container.request.query["filter"] |> default Dict null;
	if (filter)
	{
		page_model <= filter <= item <= filter;
	}
	
	/* Set page model */
	container = container.setPage(container.layout.page_class, page_model);
	
	/* Extend RenderContainer */
	container = await static::extendRenderContainer(container, answer);
	
	return container;
}



/**
 * Crud View
 */
static async RenderContainer crudView(RenderContainer container)
{
	/* Get page model */
	CrudPageModel page_model = container.layout.model[container.layout.page_class]
		|> default CrudPageModel new CrudPageModel
	;
	page_model <= action <= "view";
	
	/* Get crud object name */
	string object_name = static::getCrudObjectName();
	Dict pk = null;
	
	/* Remote call */
	RemoteCallAnswer answer = await container.externalBusCall
	{
		"object_name": object_name,
		"interface_name": "core.crud",
		"method_name": "getItem",
		"data":
		{
			"pk": pk,
		}
	};
	
	/* Answer */
	if (answer.isSuccess())
	{
		page_model <= item <= answer.response["item"];
		page_model <= options <= answer.response["options"];
		page_model <= error_code <= rtl::ERROR_OK;
	}
	
	/* Exception */
	else
	{
		page_model <= error_code <= answer.error_code;
		page_model <= error_message <= answer.error_message;
		page_model <= error_name <= answer.error_name;
	}
	
	/* Set page model */
	container = container.setPage(container.layout.page_class, page_model);
	
	/* Extend RenderContainer */
	container = await static::extendRenderContainer(container, answer);
	
	return container;
}



/**
 * Extend crud container
 */
static async RenderContainer extendRenderContainer(RenderContainer container, RemoteCallAnswer answer)
{
	CrudPageModel page_model = container.layout.model[container.layout.page_class]
		|> default CrudPageModel new CrudPageModel
	;
	
	/* Change page model */
	page_model <= struct <= static::getStruct(container);
	page_model <= filter_fields <= static::getFilterFields(container);
	page_model <= form_fields <= static::getFormFields(container);
	page_model <= table_fields <= static::getTableFields(container);
	page_model <= view_fields <= static::getViewFields(container);
	
	/* Set page model */
	container = container.setPage(container.layout.page_class, page_model);
	
	return container;
}



/**
 * Crud search
 */
pure RemoteCallAnswer getCrudSearchParams(Request request)
{
	Map data = new Map();
	
	if (rtl::exists(request.query))
	{
		Vector search_filter = new Vector();
		Dict filter = request.query["filter"] |> default Dict null;
		if (filter)
		{
			Collection keys = filter.keys();
			for (int i=0; i<keys.count(); i++)
			{
				string key_name = keys[i];
				search_filter.pushValue([key_name, "=", filter[key_name]]);
			}
			data.setValue("filter", search_filter.toCollection());
		}
		
		string page = request.query.get("page", 1) - 1;
		if (page < 0) page = 0;
		data.setValue("page", page);
		data.setValue("limit", 20);
	}
	
	return data.toDict();
}



</script>


<style>
.view{}
.view_row td{
	padding-bottom: 5px;
}
.view_row_label{
	vertical-align: top;
	text-align: right;
	padding-right: 5px;
}
.view_row_content{
	padding-left: 5px;
}
.view .buttons{
	text-align: center;
	padding-top: 10px;
}
.view .buttons .button, .view .buttons %(Button)button{
	margin-left: 2px;
	margin-right: 2px;
}
</style>


<template name="render">
	<div class='crud' class={ "crud--" ~ model.action }>
		%if (model.action == CrudPageModel::ACTION_SEARCH)
		{
			%render static::renderSearch(layout, model, params);
		}
		%else if (model.action == CrudPageModel::ACTION_VIEW)
		{
			%render static::renderView(layout, model, params);
		}
	</div>
	<div class='crud_dialog'>{ static::renderDialog(layout, model, params) }</div>
</template>


<template name="renderSearch" args="LayoutModel layout, CrudPageModel model, Dict params">
	%var Collection<FieldInfo> struct = model.struct;
	%var Collection<string> form_fields = model.form_fields;
	%var Collection<string> filter_fields = model.filter_fields;
	%var Collection<string> table_fields = model.table_fields;
	
	<div class='search' @key='search'>
		{ static::renderTopButtons(layout, model, params) }
		
		%if (rtl::exists(filter_fields))
		{
			<div class='filter'>
				<CrudFilter @name="filter" struct={ struct } fields={ filter_fields } extends_name="filter"
					crud={ static::getCurrentClassName() }
					@event:FormEvent="onFormEvent"
				/>
			</div>
		}
		
		<div class='table_wrap'>
			<Table @name="table" struct={ struct } fields={ table_fields }
				crud={ static::getCurrentClassName() }
			/>
			<Pagination
				page={ model.table.page + 1 }
				pages={ model.table.pages }
				delta={ model.table.delta }
				crud={ static::getCurrentClassName() }
			/>
		</div>
	</div>
</template>

<template name="renderTopButtons" args="LayoutModel layout, CrudPageModel model, Dict params">
	%var Dict messages = static::getMessages();
	<div class='top_buttons'>
		<Button @event:MouseClickEvent="onShowAddClick" type="primary">{ messages["add"] }</Button>
	</div>
</template>

<template name="renderDialog" args="LayoutModel layout, CrudPageModel model, Dict params">
	
	%var Collection<FieldInfo> struct = model.struct;
	%var Collection<string> form_fields = model.form_fields;
	%var Dict form_settings = static::getFormSettings();
	%var Collection<string> form_add_fields = form_fields.filter
	(
		curry FieldInfo::filterForm(struct, "create", ?)
	);
	%var Collection<string> form_edit_fields = form_fields.filter
	(
		curry FieldInfo::filterForm(struct, "update", ?)
	);
	%var string form_class_name = form_settings["class_name"] |> default string classof Form;
	%var Dict dialog_form_settings = static::getDialogSettings();
	
	<div class='dialogs'>
		<Dialog @name="dialog_add" style={ DialogModel::STYLE_CONTENT } show_buttons={ false }
			@watch="form_add" ...dialog_form_settings
		>
			<{form_class_name} @name="form_add" action="add" struct={ struct } fields={ form_add_fields }
				crud={ static::getCurrentClassName() }
				@event:FormEvent="onFormEvent" ...form_settings
			/>
		</Dialog>
		<Dialog @name="dialog_edit" style={ DialogModel::STYLE_CONTENT } show_buttons={ false }
			@watch="form_edit" ...dialog_form_settings
		>
			<{form_class_name} @name="form_edit" action="edit" struct={ struct } fields={ form_edit_fields }
				crud={ static::getCurrentClassName() }
				@event:FormEvent="onFormEvent" ...form_settings
			/>
		</Dialog>
		<Dialog @name="dialog_delete" style={ DialogModel::STYLE_CONFIRM } auto_hide={ false }
			@event:DialogEvent="onDialogEvent"
			buttons=[
				{
					"type": "danger",
					"data-action": "ok",
					"value": "OK",
				},
				{
					"type": "default",
					"data-action": "cancel",
					"value": "Cancel",
				},
			]
		/>
	</div>
	
</template>


<template name="renderDate" args="LayoutModel layout, Dict crud_settings">
	%var string crud_kind = crud_settings["crud_kind"] |> default string "";
	%var string class_name = crud_settings["crud_class_name"] |> default string "";
	%var var value = crud_settings["value"];
	{ value != null ? value.getDate( layout.tz ) : "" }
</template>


<template name="renderDateTime" args="LayoutModel layout, Dict crud_settings">
	%var string crud_kind = crud_settings["crud_kind"] |> default string "";
	%var string class_name = crud_settings["crud_class_name"] |> default string "";
	%var var value = crud_settings["value"];
	{ value != null ? value.getDBTime( layout.tz ) : "" }
</template>


<template name="renderNumber" args="LayoutModel layout, Dict crud_settings">
	%var TableModel table_model = crud_settings["crud_table_model"];
	%var int index = crud_settings["crud_index"];
	%if (table_model)
	{
		{ table_model.page * table_model.limit + index + 1 }
	}
</template>


<template name="renderButtons" args="LayoutModel layout, Dict crud_settings">
	{ static::renderButton(layout, crud_settings, "edit") }
	{ static::renderButton(layout, crud_settings, "delete") }
</template>


<template name="renderButton" args="LayoutModel layout, Dict crud_settings, string button_type, Dict options = null">
	%var Collection<FieldInfo> struct = crud_settings["crud_params", "struct"];
	%var TableModel table_model = crud_settings["crud_table_model"];
	%var Dict item = crud_settings["crud_item"];
	%var int index = crud_settings["crud_index"];
	%if (button_type == "edit")
	{
		<Button type='small' data-index={ index } data-pk={ static::getPrimaryKey(struct, item) }
			@event:MouseClickEvent="onRowEditClick" @key="edit"
		>
			{ _("Runtime.Web.CRUD", "Edit") }
		</Button>
	}
	%else if (button_type == "view")
	{
		%var Dict target = {};
		%var string url = layout.route_prefix ~ options["url"];
		%var Dict pk = static::getPrimaryKey(struct, item);
		%var url = Route::replace(url, pk);
		%var string label = not rtl::isEmpty(options["label"]) ? options["label"] : _("Runtime.Web.CRUD", "View");
		%if (not rtl::isEmpty(options["target"])) { %var target = { "target": options["target"] }; }
		<a href={ url } class='nolink' @key="view" ...target>
			<Button type='small'>
				{ label }
			</Button>
		</a>
	}
	%else if (button_type == "delete")
	{
		%var TableModel table_model = crud_settings["crud_table_model"];
		%var Dict item = crud_settings["crud_item"];
		%var int index = crud_settings["crud_index"];
		<Button type='small danger' data-index={ index } data-pk={ static::getPrimaryKey(struct, item) }
			@event:MouseClickEvent="onRowDeleteClick" @key="delete"
		>
			{ _("Runtime.Web.CRUD", "Delete") }
		</Button>
	}
</template>


<script>

/**
 * Returns primary key by item
 */
pure Dict getPrimaryKey(Collection<FieldInfo> struct, Dict item)
{
	Map pk = new Map();
	struct = struct.filter( lib::equalAttr("primary", true) );
	for (int i=0; i < struct.count(); i++)
	{
		FieldInfo field = struct[i];
		var value = item[field.api_name];
		pk.setValue(field.api_name, value);
	}
	return pk.toDict();
}



/**
 * On show add dialog
 */
async void onShowAddClick(Message<MouseClickEvent> msg)
{
	this.dialog_add.update("show");
	this.form_add.update("clear");
	this.form_add.update("setKind", "table");
}



/**
 * On row edit
 */
async void onViewEditClick(Message<MouseClickEvent> msg)
{
	this.dialog_edit.update("show");
	this.form_edit.update("clear");
	this.form_edit.update("setItem", this.model("item"));
	this.form_edit.update("setKind", "view");
}



/**
 * On row delete
 */
async void onViewDeleteClick(Message<MouseClickEvent> msg)
{
	Dict item = this.model("item");
	
	string message = "";
	Dict<string> messages = static::getMessages();
	fn f = messages["delete"];
	if (rtl::exists(f))
	{
		if (rtl::isFn(f))
		{
			message = f(item);
		}
		else message = f;
	}
	else
	{
		message = _("Runtime.Web.CRUD", "Do you realy want to delete '%name%' ?", { "name": item["name"] } );
	}
	
	this.dialog_delete.update
	(
		"show",
		{
			"text": message,
			"tag":
			{
				"item": item,
				"kind": "view",
			},
		}
	);
}



/**
 * On row edit
 */
async void onRowEditClick(Message<MouseClickEvent> msg)
{
	Dict pk = msg.sender.params["data-pk"];
	Dict item = this.call("getFirstItem", pk);
	if (item)
	{
		this.dialog_edit.update("show");
		this.form_edit.update("clear");
		this.form_edit.update("setItem", item);
		this.form_edit.update("setKind", "table");
	}
}



/**
 * On row delete
 */
async void onRowDeleteClick(Message<MouseClickEvent> msg)
{
	Dict pk = msg.sender.params["data-pk"];
	Dict item = this.call("getFirstItem", pk);
	
	string message = "";
	Dict<string> messages = static::getMessages();
	fn f = messages["delete"];
	if (rtl::exists(f))
	{
		if (rtl::isFn(f))
		{
			message = f(item);
		}
		else message = f;
	}
	else
	{
		message = _("Runtime.Web.CRUD", "Do you realy want to delete '%name%' ?", { "name": item["name"] } );
	}
	
	this.dialog_delete.update
	(
		"show",
		{
			"text": message,
			"tag":
			{
				"item": item,
				"kind": "table",
			},
		}
	);
	
}



/**
 * On dialog event
 */
async void onDialogEvent(Message<DialogEvent> msg)
{
	DialogEvent e = msg.data;
	if (msg.sender == this.dialog_delete)
	{
		if (e.button_result == "cancel")
		{
			this.dialog_delete.update("hide");
		}
		else
		{
			await this.onItemDelete(e.tag["item"], e.tag["kind"]);
		}
	}
	
	await this.signal(e);
}



/**
 * On form event
 */
async void onFormEvent(Message<FormEvent> msg)
{
	FormEvent e = msg.data;
	
	if (e.event == FormEvent::ACTION_SEARCH)
	{
		LayoutModel layout = this.driver.layout;
		CrudPageModel model = this.model();
		Dict params = this.params;
		Collection fields = model.filter_fields;
		string uri = layout.route_prefix ~ layout.uri;
		
		/* Clear filter fields */
		for (int i=0; i<fields.count(); i++)
		{
			string key = fields[i];
			uri = rs::url_get_add(uri, "filter["~key~"]", "");
		}
		
		/* Add filter fields */
		Dict item = e.item;
		if (item != null)
		{
			Collection keys = item.keys();
			for (int i=0; i<keys.count(); i++)
			{
				string key = keys[i];
				string value = item[key];
				uri = rs::url_get_add(uri, "filter["~key~"]", value);
			}
		}
		
		/* Clear page */
		uri = rs::url_get_add(uri, "page", "");
		
		await this.openUrl(uri);
	}
	
	else if (msg.sender == this.form_add)
	{
		if (e.event == FormEvent::ACTION_CANCEL)
		{
			this.dialog_add.update("hide");
		}
		else if (e.event == FormEvent::ACTION_CREATE)
		{
			await this.onItemCreate();
		}
	}
	
	else if (msg.sender == this.form_edit)
	{
		if (e.event == FormEvent::ACTION_CANCEL)
		{
			this.dialog_edit.update("hide");
		}
		else if (e.event == FormEvent::ACTION_UPDATE)
		{
			await this.onItemUpdate();
		}
	}
	
	await this.signal(e);
}



/**
 * Create item
 */
async void onItemCreate()
{
	string kind = this.form_add.model("kind");
	Dict item = this.form_add.model("item");
	this.form_add.update("setWaitMessage");
	
	/* Send api */
	RemoteCallAnswer answer = await WebApp::externalBusCall
	{
		"object_name": static::getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "create",
		"data":
		{
			"item": item,
		},
	};
	
	if (answer.isSuccess())
	{
		if (kind == "table") this.update("prependItem", answer.response["new_item"]);
		this.dialog_add.update("hide");
		await this.onItemCreated(answer);
	}
	else
	{
		this.form_add.update("setAnswer", answer);
	}
	
}



/**
 * Updated item
 */
async void onItemCreated(RemoteCallAnswer answer)
{
}



/**
 * Update item
 */
async void onItemUpdate()
{
	string kind = this.form_edit.model("kind");
	Dict old_item = this.form_edit.model("old_item");
	Dict item = this.form_edit.model("item");
	Collection<FieldInfo> struct = this.model("struct");
	Dict pk = static::getPrimaryKey(struct, old_item);
	this.form_edit.update("setWaitMessage");
	
	/* Send api */
	RemoteCallAnswer answer = await WebApp::externalBusCall
	{
		"object_name": static::getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "update",
		"data":
		{
			"pk": pk,
			"item": item,
		},
	};
	
	if (answer.isSuccess())
	{
		if (kind == "table") this.update("setItem", pk, answer.response["new_item"]);
		else if (kind == "view") this.update("setAttr", "item", answer.response["new_item"]);
		this.dialog_edit.update("hide");
		await this.onItemUpdated(answer);
	}
	else
	{
		this.form_edit.update("setAnswer", answer);
	}
	
}



/**
 * Updated item
 */
async void onItemUpdated(RemoteCallAnswer answer)
{
}



/**
 * Delete item
 */
async void onItemDelete(Dict item, string kind)
{
	this.dialog_delete.update("setWaitMessage");
	Collection<FieldInfo> struct = this.model("struct");
	Dict pk = static::getPrimaryKey(struct, item);
	
	/* Send api */
	RemoteCallAnswer answer = await WebApp::externalBusCall
	{
		"object_name": static::getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "delete",
		"data":
		{
			"pk": pk,
		},
	};
	
	if (answer.isSuccess())
	{
		if (kind == "table") this.update("removeItem", pk);
		else if (kind == "view") this.update("setAttr", "item", null);
		this.dialog_delete.update("hide");
		await this.onItemDeleted(answer);
	}
	else
	{
		this.dialog_delete.update("setAnswer", answer);
	}
}



/**
 * Deleted item
 */
async void onItemDeleted(RemoteCallAnswer answer)
{
}


</script>

</class>