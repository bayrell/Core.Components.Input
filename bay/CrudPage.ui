<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.CRUD.CrudPage" extends="Runtime.Web.Component" 
	module="Runtime.Web.CRUD" model="Runtime.Web.CRUD.CrudPageModel"
>

<use name="Runtime.lib" />
<use name="Runtime.DateTime" />
<use name="Runtime.Core.Message" />
<use name="Runtime.Core.RemoteCallAnswer" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.RenderDriver" />
<use name="Runtime.Web.Route" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.CRUD.CrudFilter" component="true" />
<use name="Runtime.Web.CRUD.CrudPageModel" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.CRUD.Form" component="true" />
<use name="Runtime.Web.CRUD.FormEvent" />
<use name="Runtime.Web.CRUD.FormModel" />
<use name="Runtime.Web.CRUD.Pagination" component="true" />
<use name="Runtime.Web.CRUD.Table" component="true" />
<use name="Runtime.Web.CRUD.TableModel" />
<use name="Runtime.Web.Dialog.Dialog" component="true" />
<use name="Runtime.Web.Dialog.DialogEvent" />
<use name="Runtime.Web.Dialog.DialogModel" />
<use name="Runtime.Web.Input.Button" component="true" />
<use name="Runtime.Web.Input.Input" component="true" />
<use name="Runtime.Web.Input.Label" component="true" />
<use name="Runtime.Web.Input.Select" component="true" />
<use name="Runtime.Web.Input.SelectText" component="true" />


<script>


/**
 * Returns object name
 */
pure string getCrudObjectName() => "";


/**
 * Returns options
 */
pure Collection getOptions(LayoutModel layout, CrudPageModel model, Dict params, string name = "") => null;


/**
 * Returns crud struct
 */
pure Collection<FieldInfo> getStruct(LayoutModel layout, CrudPageModel model, Dict params) => [];


/**
 * Returns filter fields
 */
pure Collection<string> getFilterFields(LayoutModel layout, CrudPageModel model, Dict params) => [];


/**
 * Returns form fields
 */
pure Collection<string> getFormFields(LayoutModel layout, CrudPageModel model, Dict params) => [];


/**
 * Returns table fields
 */
pure Collection<string> getTableFields(LayoutModel layout, CrudPageModel model, Dict params) => [];


/**
 * Returns view fields
 */
pure Collection<string> getViewFields(LayoutModel layout, CrudPageModel model, Dict params) => [];


/**
 * Returns messages
 */
pure Dict<string> getMessages(LayoutModel layout, CrudPageModel model, Dict params) => {};


/**
 * Dialog settings
 */
pure Dict getDialogSettings(LayoutModel layout, CrudPageModel model, Dict params) => {};


/**
 * Form settings
 */
pure Dict getFormSettings(LayoutModel layout, CrudPageModel model, Dict params) => {};


</script>


<style>
.view{}
.view_row td{
	padding-bottom: 5px;
}
.view_row_label{
	vertical-align: top;
	text-align: right;
	padding-right: 5px;
}
.view_row_content{
	padding-left: 5px;
}
.view .buttons{
	text-align: center;
	padding-top: 10px;
}
.view .buttons .button, .view .buttons %(Button)button{
	margin-left: 2px;
	margin-right: 2px;
}
</style>


<template name="render">
	<div class='crud' class={ "crud--" ~ model.action }>
		%if (model.action == CrudPageModel::ACTION_SEARCH)
		{
			%render static::renderSearch(layout, model, params);
		}
		%else if (model.action == CrudPageModel::ACTION_VIEW)
		{
			%render static::renderView(layout, model, params);
		}
	</div>
	<div class='crud_dialog'>{ static::renderDialog(layout, model, params) }</div>
</template>


<template name="renderSearch" args="LayoutModel layout, CrudPageModel model, Dict params">
	%var Collection<FieldInfo> struct = static::getStruct(layout, model, params);
	%var Collection<string> form_fields = static::getFormFields(layout, model, params);
	%var Collection<string> filter_fields = static::getFilterFields(layout, model, params);
	%var Collection<string> table_fields = static::getTableFields(layout, model, params);
	%var Dict messages = static::getMessages(layout, model, params);
	
	<div class='search' @key='search'>
		<div class='buttons'>
			<Button @event:MouseClickEvent="onShowAddClick" type="primary">{ messages["add"] }</Button>
		</div>
		
		%if (rtl::exists(filter_fields))
		{
			<div class='filter'>
				<CrudFilter @name="filter" struct={ struct } fields={ filter_fields } extends_name="filter"
					@event:FormEvent="onFormEvent"
				/>
			</div>
		}
		
		<div class='table_wrap'>
			<Table @name="table" struct={ struct } fields={ table_fields } />
			<Pagination
				page={ model.table.page + 1 }
				pages={ model.table.pages }
				delta={ model.table.delta }
			/>
		</div>
	</div>
</template>


<template name="renderView" args="LayoutModel layout, CrudPageModel model, Dict params">
	%var Collection<FieldInfo> struct = static::getStruct(layout, model, params);
	%var Collection<string> view_fields = static::getViewFields(layout, model, params);
	
	<div class='view' @key='view'>
		<table class='table'>
			%for (int i=0; i<view_fields.count(); i++)
			{
				%var string field_name = view_fields[i];
				%var FieldInfo field = FieldInfo::getFieldInfo(struct, field_name);
				%if (field != null)
				{
					<tr class='view_row' class={ "view_row--" ~ field_name }
						data-name={ field_name } @key={ "view_row-" ~ field_name }
					>
						<td class='view_row_label'>
							{ field["info", "view", "label"] ? field["info", "view", "label"] : field["label"] }:
						</td>
						<td class='view_row_content'>
							{ static::renderViewContent(layout, model, params, field) }
						</td>
					</tr>
				}
			}
			
			<tr @key='buttons'><td colspan='2'>
				<div class='buttons'>
					<Button type='' @event:MouseClickEvent="onViewEditClick" @key="edit"
					>
						{ _("Runtime.Web.CRUD", "Edit") }
					</Button>
					<Button type='danger' @event:MouseClickEvent="onViewDeleteClick" @key="delete"
					>
						{ _("Runtime.Web.CRUD", "Delete") }
					</Button>
				</div>
			</td></tr>
			
		</table>
	</div>
	
</template>



<template name="renderViewContent" args="LayoutModel layout, TableModel model, Dict params, FieldInfo field">
	%if (field != null)
	{
		%var Collection<FieldInfo> struct = static::getStruct(layout, model, params);
		%var string field_name = field.api_name;
		
		<!-- Get class name -->
		%var string class_name = field["class_name"] |> default string "";
		%var string class_name_view = field["info", "view", "class_name"] |> default string "";
		%if (not rtl::isEmpty(class_name_view)){ %var class_name = class_name_view; }
		
		<!-- Class settings -->
		%var Dict class_settings = field["class_settings"] |> default Dict {};
		%var Dict class_settings_view = field["info", "view", "class_settings"] |> default Dict null;
		%if (not rtl::isEmpty(class_settings_view))
		{
			%var class_settings = class_settings.concat( class_settings_view );
		}
		%var class_settings = class_settings
			.setIm("name", field_name)
			.setIm("crud_struct", struct)
			.setIm("crud_class_name", class_name)
			.setIm("crud_kind", "view")
			.setIm("crud_field_name", field_name)
			.setIm("crud_field_info", field)
			.setIm("crud_item", model.item)
		;
		
		<!-- Get value -->
		%var var value = model["item", field_name];
		
		<!-- Calculate new value -->
		%var fn calc = field["calc"];
		%var fn calc_view = field["info", "view", "calc"];
		%if (calc_view != null){ %var calc = calc_view; }
		%if (rtl::exists(calc)){ %var value = calc(layout, value, class_settings); }
		%var class_settings = class_settings.setIm("value", value);
		
		<!-- Render value -->
		%var fn render = field["render"];
		%var fn render_view = field["info", "view", "render"];
		%if (not rtl::isEmpty(render_view)){ %var render = render_view; }
		
		%var fn can_render = field["can_render"];
		%var fn can_render_view = field["info", "view", "can_render"];
		%if (not rtl::isEmpty(can_render_view)){ %var can_render = can_render_view; }
		
		%if
		(
			rtl::exists(render) and
			(
				not rtl::exists(can_render) or
				( rtl::exists(can_render) and can_render(layout, model, class_settings) )
			)
		)
		{
			{ render(layout, value, class_settings) }
		}
		%else
		{
			%if (not rtl::isEmpty(class_name))
			{
				<{class_name} @key={ field_name } ...class_settings />
			}
		}
	}
</template>



<template name="renderDialog" args="LayoutModel layout, CrudPageModel model, Dict params">
	
	%var Collection<FieldInfo> struct = static::getStruct(layout, model, params);
	%var Collection<string> form_fields = static::getFormFields(layout, model, params);
	%var Dict form_settings = static::getFormSettings(layout, model, params);
	%var Collection<string> form_add_fields = form_fields.filter
	(
		curry FieldInfo::filterForm(struct, "create", ?)
	);
	%var Collection<string> form_edit_fields = form_fields.filter
	(
		curry FieldInfo::filterForm(struct, "update", ?)
	);
	%var string form_class_name = form_settings["class_name"] |> default string classof Form;
	%var Dict dialog_form_settings = static::getDialogSettings(layout, model, params);
	
	<div class='dialogs'>
		<Dialog @name="dialog_add" style={ DialogModel::STYLE_CONTENT } show_buttons={ false }
			...dialog_form_settings
		>
			<{form_class_name} @name="form_add" action="add" struct={ struct } fields={ form_add_fields }
				@event:FormEvent="onFormEvent" ...form_settings
			/>
		</Dialog>
		<Dialog @name="dialog_edit" style={ DialogModel::STYLE_CONTENT } show_buttons={ false }
			...dialog_form_settings
		>
			<{form_class_name} @name="form_edit" action="edit" struct={ struct } fields={ form_edit_fields }
				@event:FormEvent="onFormEvent" ...form_settings
			/>
		</Dialog>
		<Dialog @name="dialog_delete" style={ DialogModel::STYLE_CONFIRM } auto_hide={ false }
			@event:DialogEvent="onDialogEvent"
			buttons=[
				{
					"type": "danger",
					"data-action": "ok",
					"value": "OK",
				},
				{
					"type": "default",
					"data-action": "cancel",
					"value": "Cancel",
				},
			]
		/>
	</div>
	
</template>


<template name="renderDate" args="LayoutModel layout, DateTime value, Dict settings">
	%var string crud_kind = settings["crud_kind"] |> default string "";
	%var string class_name = settings["crud_class_name"] |> default string "";
	{ value != null ? value.getDate( layout.tz ) : "" }
</template>


<template name="renderDateTime" args="LayoutModel layout, DateTime value, Dict settings">
	%var string crud_kind = settings["crud_kind"] |> default string "";
	%var string class_name = settings["crud_class_name"] |> default string "";
	{ value != null ? value.getDBTime( layout.tz ) : "" }
</template>


<template name="renderNumber" args="LayoutModel layout, var value, Dict settings">
	%var TableModel table_model = settings["crud_table_model"];
	%var int index = settings["crud_index"];
	%if (table_model)
	{
		{ table_model.page * table_model.limit + index + 1 }
	}
</template>


<template name="renderButtons" args="LayoutModel layout, var value, Dict settings">
	{ static::renderButton(layout, settings, "edit") }
	{ static::renderButton(layout, settings, "delete") }
</template>


<template name="renderButton" args="LayoutModel layout, Dict settings, string button_type, Dict options = null">
	%var Collection<FieldInfo> struct = settings["crud_struct"];
	%var TableModel table_model = settings["crud_table_model"];
	%var Dict item = settings["crud_item"];
	%var int index = settings["crud_index"];
	%if (button_type == "edit")
	{
		<Button type='small' data-index={ index } data-pk={ static::getPrimaryKey(struct, item) }
			@event:MouseClickEvent="onRowEditClick" @key="edit"
		>
			{ _("Runtime.Web.CRUD", "Edit") }
		</Button>
	}
	%else if (button_type == "view")
	{
		%var Dict target = {};
		%var string url = layout.route_prefix ~ options["url"];
		%var Dict pk = static::getPrimaryKey(struct, item);
		%var url = Route::replace(url, pk);
		%var string label = not rtl::isEmpty(options["label"]) ? options["label"] : _("Runtime.Web.CRUD", "View");
		%if (not rtl::isEmpty(options["target"])) { %var target = { "target": options["target"] }; }
		<a href={ url } class='nolink' @key="view" ...target>
			<Button type='small'>
				{ label }
			</Button>
		</a>
	}
	%else if (button_type == "delete")
	{
		%var TableModel table_model = settings["crud_table_model"];
		%var Dict item = settings["crud_item"];
		%var int index = settings["crud_index"];
		<Button type='small danger' data-index={ index } data-pk={ static::getPrimaryKey(struct, item) }
			@event:MouseClickEvent="onRowDeleteClick" @key="delete"
		>
			{ _("Runtime.Web.CRUD", "Delete") }
		</Button>
	}
</template>


<script>


/**
 * Returns primary key by item
 */
pure Dict getPrimaryKey(Collection<FieldInfo> struct, Dict item)
{
	Map pk = new Map();
	struct = struct.filter( lib::equalAttr("primary", true) );
	for (int i=0; i < struct.count(); i++)
	{
		FieldInfo field = struct[i];
		var value = item[field.api_name];
		pk.set(field.api_name, value);
	}
	return pk.toDict();
}



/**
 * On show add dialog
 */
async void onShowAddClick(Message<MouseClickEvent> msg)
{
	this.dialog_add.update("show");
	this.form_add.update("clear");
	this.form_add.update("setKind", "table");
}



/**
 * On row edit
 */
async void onViewEditClick(Message<MouseClickEvent> msg)
{
	this.dialog_edit.update("show");
	this.form_edit.update("clear");
	this.form_edit.update("setItem", this.model("item"));
	this.form_edit.update("setKind", "view");
}



/**
 * On row delete
 */
async void onViewDeleteClick(Message<MouseClickEvent> msg)
{
	Dict item = this.model("item");
	
	string message = "";
	Dict<string> messages = static::getMessages(this.constructor.layout, this.model(), this.params);
	fn f = messages["delete"];
	if (rtl::exists(f))
	{
		if (rtl::isFn(f))
		{
			message = f(item);
		}
		else message = f;
	}
	else
	{
		message = _("Runtime.Web.CRUD", "Do you realy want to delete '%name%' ?", { "name": item["name"] } );
	}
	
	this.dialog_delete.update
	(
		"show",
		{
			"text": message,
			"tag":
			{
				"item": item,
				"kind": "view",
			},
		}
	);
}



/**
 * On row edit
 */
async void onRowEditClick(Message<MouseClickEvent> msg)
{
	Dict pk = msg.sender.params["data-pk"];
	Dict item = this.call("getFirstItem", pk);
	if (item)
	{
		this.dialog_edit.update("show");
		this.form_edit.update("clear");
		this.form_edit.update("setItem", item);
		this.form_edit.update("setKind", "table");
	}
}



/**
 * On row delete
 */
async void onRowDeleteClick(Message<MouseClickEvent> msg)
{
	Dict pk = msg.sender.params["data-pk"];
	Dict item = this.call("getFirstItem", pk);
	
	string message = "";
	Dict<string> messages = static::getMessages(this.constructor.layout, this.model(), this.params);
	fn f = messages["delete"];
	if (rtl::exists(f))
	{
		if (rtl::isFn(f))
		{
			message = f(item);
		}
		else message = f;
	}
	else
	{
		message = _("Runtime.Web.CRUD", "Do you realy want to delete '%name%' ?", { "name": item["name"] } );
	}
	
	this.dialog_delete.update
	(
		"show",
		{
			"text": message,
			"tag":
			{
				"item": item,
				"kind": "table",
			},
		}
	);
	
}



/**
 * On dialog event
 */
async void onDialogEvent(Message<DialogEvent> msg)
{
	DialogEvent e = msg.data;
	if (msg.sender == this.dialog_delete)
	{
		if (e.button_result == "cancel")
		{
			this.dialog_delete.update("hide");
		}
		else
		{
			await this.onItemDelete(e.tag["item"], e.tag["kind"]);
		}
	}
	
	await this.signal(e);
}



/**
 * On form event
 */
async void onFormEvent(Message<FormEvent> msg)
{
	FormEvent e = msg.data;
	
	if (e.event == FormEvent::ACTION_SEARCH)
	{
		LayoutModel layout = this.controller.layout;
		CrudPageModel model = this.model();
		Dict params = this.params;
		Collection fields = static::getFilterFields(layout, model, params);
		string uri = layout.route_prefix ~ layout.uri;
		
		/* Clear filter fields */
		for (int i=0; i<fields.count(); i++)
		{
			string key = fields[i];
			uri = rs::url_get_add(uri, "filter["~key~"]", "");
		}
		
		/* Add filter fields */
		Dict item = e.item;
		if (item != null)
		{
			Collection keys = item.keys();
			for (int i=0; i<keys.count(); i++)
			{
				string key = keys[i];
				string value = item[key];
				uri = rs::url_get_add(uri, "filter["~key~"]", value);
			}
		}
		
		/* Clear page */
		uri = rs::url_get_add(uri, "page", "");
		
		log(uri);
		
		await this.pageOpen(uri);
	}
	
	else if (msg.sender == this.form_add)
	{
		if (e.event == FormEvent::ACTION_CANCEL)
		{
			this.dialog_add.update("hide");
		}
		else if (e.event == FormEvent::ACTION_CREATE)
		{
			await this.onItemCreate();
		}
	}
	
	else if (msg.sender == this.form_edit)
	{
		if (e.event == FormEvent::ACTION_CANCEL)
		{
			this.dialog_edit.update("hide");
		}
		else if (e.event == FormEvent::ACTION_UPDATE)
		{
			await this.onItemUpdate();
		}
	}
	
	await this.signal(e);
}



/**
 * Create item
 */
async void onItemCreate()
{
	string kind = this.form_add.model("kind");
	Dict item = this.form_add.model("item");
	this.form_add.update("setWaitMessage");
	
	/* Send api */
	RemoteCallAnswer answer = await RenderDriver::externalBusCall
	{
		"object_name": static::getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "create",
		"data":
		{
			"item": item,
		},
	};
	
	if (answer.isSuccess())
	{
		if (kind == "table") this.update("prependItem", answer.response["new_item"]);
		this.dialog_add.update("hide");
		await this.onItemCreated(answer);
	}
	else
	{
		this.form_add.update("setAnswer", answer);
	}
	
}



/**
 * Updated item
 */
async void onItemCreated(RemoteCallAnswer answer)
{
}



/**
 * Update item
 */
async void onItemUpdate()
{
	string kind = this.form_edit.model("kind");
	Dict old_item = this.form_edit.model("old_item");
	Dict item = this.form_edit.model("item");
	Dict pk = static::getPrimaryKey(static::getStruct(this.constructor.layout, this.model(), this.params), old_item);
	this.form_edit.update("setWaitMessage");
	
	/* Send api */
	RemoteCallAnswer answer = await RenderDriver::externalBusCall
	{
		"object_name": static::getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "update",
		"data":
		{
			"pk": pk,
			"item": item,
		},
	};
	
	if (answer.isSuccess())
	{
		if (kind == "table") this.update("setItem", pk, answer.response["new_item"]);
		else if (kind == "view") this.update("setAttr", "item", answer.response["new_item"]);
		this.dialog_edit.update("hide");
		await this.onItemUpdated(answer);
	}
	else
	{
		this.form_edit.update("setAnswer", answer);
	}
	
}



/**
 * Updated item
 */
async void onItemUpdated(RemoteCallAnswer answer)
{
}



/**
 * Delete item
 */
async void onItemDelete(Dict item, string kind)
{
	this.dialog_delete.update("setWaitMessage");
	Dict pk = static::getPrimaryKey(static::getStruct(this.constructor.layout, this.model(), this.params), item);
	
	/* Send api */
	RemoteCallAnswer answer = await RenderDriver::externalBusCall
	{
		"object_name": static::getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "delete",
		"data":
		{
			"pk": pk,
		},
	};
	
	if (answer.isSuccess())
	{
		if (kind == "table") this.update("removeItem", pk);
		else if (kind == "view") this.update("setAttr", "item", null);
		this.dialog_delete.update("hide");
		await this.onItemDeleted(answer);
	}
	else
	{
		this.dialog_delete.update("setAnswer", answer);
	}
}



/**
 * Deleted item
 */
async void onItemDeleted(RemoteCallAnswer answer)
{
}


</script>

</class>