/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud;

use Runtime.re;
use Runtime.BaseStruct;
use Runtime.Exceptions.ApiException;
use Runtime.Web.ApiResult;
use Runtime.Web.Bus;
use Runtime.Web.RenderContainer;
use Runtime.Web.Crud.FieldInfo;
use Runtime.Web.Crud.ValidationResult;
use Runtime.Web.Crud.Rules.PurifyRule;
use Runtime.Web.Crud.Rules.ValidationRule;


struct StructBuilder extends BaseStruct
{
	string model_name = "";
	Dict<FieldInfo> info = {};
	Collection<string> form_fields = [];
	Collection<string> table_fields = [];
	Collection<string> filter_fields = [];
	Collection<string> rules = [];
	string kind = "";
	bool resolved = false;
	
	
	/**
	 * Returns field value
	 */
	var getFieldValue(string field_name, Dict item, int index = 0)
	{
		var value = "";
		FieldInfo info = this.info[field_name];
		if (!info) return value;
		
		fn calculate = info.calculate;
		if (calculate) value = calculate(item, index);
		else value = item[field_name];
		
		return value;
	}
	
	
	/**
	 * Build struct
	 */
	pure memorize StructBuilder build(
		string model_name,
		string kind = "",
		fn build_fn = null
	)
	{
		StructBuilder builder = new StructBuilder{
			"model_name": model_name,
			"kind": kind,
		};
		
		fn buildStruct = rtl::method(model_name, "buildStruct");
		builder = buildStruct(builder);
		
		if (build_fn) builder = build_fn(builder);
		
		return builder.resolve();
	}
	
	
	/**
	 * Add struct
	 */
	StructBuilder addStruct(Dict<FieldInfo> new_info)
	{
		StructBuilder builder = this;
		builder <= info <= builder.info.concat(new_info);
		return builder;
	}
	
	
	/**
	 * Add form fields
	 */
	StructBuilder addFormFields(Collection<string> new_fields)
	{
		StructBuilder builder = this;
		builder <= form_fields <= builder.form_fields.concat(new_fields);
		return builder;
	}
	
	
	/**
	 * Prepend form fields
	 */
	StructBuilder prependFormFields(Collection<string> new_fields)
	{
		StructBuilder builder = this;
		builder <= form_fields <= builder.form_fields.prependCollectionIm(new_fields);
		return builder;
	}
	
	
	/**
	 * Add table fields
	 */
	StructBuilder addTableFields(Collection<string> new_fields)
	{
		StructBuilder builder = this;
		builder <= table_fields <= builder.table_fields.concat(new_fields);
		return builder;
	}
	
	
	/**
	 * Prepend table fields
	 */
	StructBuilder prependTableFields(Collection<string> new_fields)
	{
		StructBuilder builder = this;
		builder <= table_fields <= builder.table_fields.prependCollectionIm(new_fields);
		return builder;
	}
	
	
	/**
	 * Insert table fields
	 */
	StructBuilder insertTableFields(string field_name_before, Collection<string> new_fields)
	{
		StructBuilder builder = this;
		int index = builder.table_fields.indexOf(field_name_before);
		
		Collection new_table_fields = []
		if (index >= 0)
		{
			new_table_fields = new_table_fields.concat( builder.table_fields.slice(0, index) );
		}
		new_table_fields = new_table_fields.concat( new_fields );
		new_table_fields = new_table_fields.concat( builder.table_fields.slice(index) );
		
		builder <= table_fields <= new_table_fields;
		return builder;
	}
	
	
	/**
	 * Add filter fields
	 */
	StructBuilder addFilterFields(Collection<string> new_fields)
	{
		StructBuilder builder = this;
		builder <= filter_fields <= builder.filter_fields.concat(new_fields);
		return builder;
	}
	
	
	/**
	 * Add validation rules
	 */
	StructBuilder addRules(Collection<BaseStruct> new_rules)
	{
		StructBuilder builder = this;
		builder <= rules <= builder.rules.concat(new_rules);
		return builder;
	}
	
	
	/**
	 * Resolve hooks
	 */
	StructBuilder resolve()
	{
		if (this.resolved) return this;
		StructBuilder builder = this;
		builder <= resolved <= true;
		return builder;
	}
	
	
	/**
	 * Purify data
	 */
	BaseStruct purify(Dict item)
	{
		Map new_item = new Map();
		for (int i=0; i<this.form_fields.count(); i++)
		{
			string field_name = this.form_fields[i];
			var value = item[field_name];
			
			FieldInfo info = this.info[field_name];
			if (not info) continue;
			if (info.value_type == "") continue;
			if (info.virtual) continue;
			
			/* Check show field */
			fn is_show = info.is_show;
			if (is_show != null)
			{
				if (not is_show(item)) continue;
			}
			
			/* If is string */
			if (info.value_type == "string")
			{
				if (rtl::isInt(value) or rtl::isBool(value)) value = rtl::toString(value);
				if (not rtl::isString(value))
				{
					new_item <= { field_name } <= null;
					value = null;
				}
				else if (info.do_trim)
				{
					new_item <= { field_name } <= rs::trim(value);
				}
				if (not info.nullable and value === null)
				{
					new_item <= { field_name } <= "";
					value = "";
				}
			}
			
			/* If is integer */
			if (info.value_type == "int")
			{
				if (not re::match("$[0-9]+^", value))
				{
					new_item <= { field_name } <= (int)value;
				}
				else
				{
					new_item <= { field_name } <= (info.nullable ? null : 0);
				}
			}
		}
		
		/* Check rules */
		for (int i=0; i<this.rules.count(); i++)
		{
			PurifyRule rule = this.rules[i];
			if (rule instanceof PurifyRule)
			{
				new_item = rule.purify(new_item);
			}
		}
		
		if (this.model_name)
		{
			new_item = rtl::newInstance(this.model_name, [new_item]);
		}
		
		return new_item;
	}
	
	
	/**
	 * Validate dict
	 */
	ValidationResult validate(Dict item)
	{
		ValidationResult res = new ValidationResult();
		
		/* Check form_fields */
		for (int i=0; i<this.form_fields.count(); i++)
		{
			string field_name = this.form_fields[i];
			var value = item[field_name];
			
			FieldInfo info = this.info[field_name];
			if (not info) continue;
			if (info.virtual) continue;
			
			fn is_show = info.is_show;
			if (is_show != null)
			{
				if (not is_show(item)) continue;
			}
			
			/* Check value types */
			if (info.value_type != "" and value !== null)
			{
				if (info.value_type == "string" and not rtl::isString(value))
				{
					res = res.appendErrorMessage([
						@.format("must be string", {"field_name": field_name}),
						field_name
					]);
				}
				if (info.value_type == "int" and not rtl::isInt(value))
				{
					res = res.appendErrorMessage([
						@.format("must be integer", {"field_name": field_name}),
						field_name
					]);
				}
			}
			
			/* Check required */
			if (info.required and (value === null or value === ""))
			{
				res = res.appendErrorMessage([
					@.format("%field_name% is required", {"field_name": field_name}),
					field_name
				]);
			}
		}
		
		/* Check rules */
		for (int i=0; i<this.rules.count(); i++)
		{
			ValidationRule rule = this.rules[i];
			if (rule instanceof ValidationRule)
			{
				if (not rule.validate(item))
				{
					list message = rule.getErrorMessage(item);
					res = res.appendErrorMessage(message);
				}
			}
		}
		
		return res;
	}
	
	
	/**
	 * Validate api
	 */
	ApiResult validateApi(ApiResult api_result, Dict item)
	{
		ValidationResult validation_result = this.validate( item );
		if (validation_result.isSuccess()) return api_result;
		
		api_result = api_result
			|> .fail(
				new ApiException("Ошибка. Проверьте корректность данных"),
				{
					"validation_result": validation_result.toDict(),
				}
			)
		;
		
		return api_result;
	}
	
	
	/**
	 * Returns data
	 */
	Dict data(BaseStruct item)
	{
		Map new_item = new Map();
		for (int i=0; i<this.form_fields.count(); i++)
		{
			string field_name = this.form_fields[i];
			var value = item[field_name];
			
			FieldInfo info = this.info[field_name];
			if (not info) continue;
			if (info.value_type == "") continue;
			if (info.virtual) continue;
			
			/* Check show field */
			fn is_show = info.is_show;
			if (is_show != null)
			{
				if (not is_show(item)) continue;
			}
			
			new_item.setValue(field_name, value);
		}
		
		return new_item.toDict();
	}
}