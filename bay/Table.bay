<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Web.Crud.Table">

<use name="Runtime.BaseStruct" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.Events.BaseEvent" />
<use name="Runtime.Web.Crud.FieldInfo" />
<use name="Runtime.Web.Crud.StructBuilder" />


<style>
.web_table{
	padding: 0; margin: 0;
	border-spacing: 0;
	border: 1px solid #ccc;
}
.web_table th{
	background-color: white;
}
.web_table td, .web_table th{
	text-align: center;
	vertical-align: center;
	border-bottom: 1px solid #ccc;
	padding: 10px;
}
.web_table tr:last-child td{
	border-bottom: 0px;
}
.web_table tr:nth-child(even){
	background-color: #f0f0f0;
}
.web_table tr:nth-child(odd){
	background-color: white;
}
</style>


<template name="renderRow" args="int index">
	%set StructBuilder builder = render_params["builder"];
	%set Collection items = model["items"];
	%set BaseStruct item = items[index];
	%if (builder)
	{
		<tr>
			%for (int i=0; i<builder.table_fields.count(); i++)
			{
				%set string field_name = builder.table_fields[i];
				%set FieldInfo field_info = builder.info[field_name];
				
				%if (field_info)
				{
					%set Dict component_settings = field_info.component_settings;
					%set string component_name = field_info.table_component_name;
					
					%set string value = model["items", index, field_name];
					%set fn calculate = field_info.calculate;
					%if (calculate)
					{
						%set value = calculate(model["items", index], index);
					}
					
					<td>
						%if (component_name)
						{
							<{component_name}
								name={{ field_name }}
								value={{ value }}
								options={{ field_info.options }}
								default_value={{ field_info.default_value }}
								crud_field_info={{ field_info }}
								crud_index={{ index }}
								crud_model={{ model }}
								@events={{ field_info.events }}
								@event:BaseEvent="onEvent"
								...component_settings
							/>
						}
					</td>
				}
			}
		</tr>
	}
</template>


<template name="renderHeader">
	%set StructBuilder builder = render_params["builder"];
	%if (builder)
	{
		<tr>
			%for (int i=0; i<builder.table_fields.count(); i++)
			{
				%set string field_name = builder.table_fields[i];
				%set FieldInfo field_info = builder.info[field_name];
				%if (field_info)
				{
					<th>{{ field_info.label }}</th>
				}
			}
		</tr>
	}
</template>


<template>
	%set Collection items = model["items"];
	<table class="web_table">
		%render static::renderHeader();
		%if (items)
		{
			%for (int i=0; i<items.count(); i++)
			{
				%render static::renderRow(i);
			}
		}
	</table>
</template>


<script>

/**
 * Row event
 */
void onEvent(Message<BaseEvent> msg)
{
	
}

</script>


</class>