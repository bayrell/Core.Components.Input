<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.CRUD.View" extends="Runtime.Web.Component" 
	module="Runtime.Web.CRUD" model="Runtime.Web.CRUD.ViewModel"
>

<use name="Runtime.Web.CRUD.FieldInfo" />

<template name="renderView" args="LayoutModel layout, CrudPageModel model, Dict params">
	%var Collection<FieldInfo> struct = static::getStruct(layout, model, params);
	%var Collection<string> view_fields = static::getViewFields(layout, model, params);
	
	<div class='view' @key='view'>
		<table class='table'>
			%for (int i=0; i<view_fields.count(); i++)
			{
				%var string field_name = view_fields[i];
				%var FieldInfo field = FieldInfo::getFieldInfo(struct, field_name);
				%if (field != null)
				{
					<tr class='view_row' class={ "view_row--" ~ field_name }
						data-name={ field_name } @key={ "view_row-" ~ field_name }
					>
						<td class='view_row_label'>
							{ field["info", "view", "label"] ? field["info", "view", "label"] : field["label"] }:
						</td>
						<td class='view_row_content'>
							{ static::renderViewContent(layout, model, params, field) }
						</td>
					</tr>
				}
			}
			
			<tr @key='buttons'><td colspan='2'>
				<div class='buttons'>
					<Button type='' @event:MouseClickEvent="onViewEditClick" @key="edit"
					>
						{ _("Runtime.Web.CRUD", "Edit") }
					</Button>
					<Button type='danger' @event:MouseClickEvent="onViewDeleteClick" @key="delete"
					>
						{ _("Runtime.Web.CRUD", "Delete") }
					</Button>
				</div>
			</td></tr>
			
		</table>
	</div>
	
</template>



<template name="renderViewContent" args="LayoutModel layout, TableModel model, Dict params, FieldInfo field">
	%if (field != null)
	{
		%var Collection<FieldInfo> struct = static::getStruct(layout, model, params);
		%var string field_name = field.api_name;
		
		<!-- Get class name -->
		%var string class_name = field["class_name"] |> default string "";
		%var string class_name_view = field["info", "view", "class_name"] |> default string "";
		%if (not rtl::isEmpty(class_name_view)){ %var class_name = class_name_view; }
		
		<!-- Class settings -->
		%var Dict class_settings = field["class_settings"] |> default Dict {};
		%var Dict class_settings_view = field["info", "view", "class_settings"] |> default Dict null;
		%if (not rtl::isEmpty(class_settings_view))
		{
			%var class_settings = class_settings.concat( class_settings_view );
		}
		%var class_settings = class_settings
			.setIm("name", field_name)
			.setIm("crud_struct", struct)
			.setIm("crud_class_name", class_name)
			.setIm("crud_kind", "view")
			.setIm("crud_field_name", field_name)
			.setIm("crud_field_info", field)
			.setIm("crud_item", model.item)
		;
		
		<!-- Get value -->
		%var var value = model["item", field_name];
		
		<!-- Calculate new value -->
		%var fn calc = field["calc"];
		%var fn calc_view = field["info", "view", "calc"];
		%if (calc_view != null){ %var calc = calc_view; }
		%if (rtl::exists(calc)){ %var value = calc(layout, value, class_settings); }
		%var class_settings = class_settings.setIm("value", value);
		
		<!-- Render value -->
		%var fn render = field["render"];
		%var fn render_view = field["info", "view", "render"];
		%if (not rtl::isEmpty(render_view)){ %var render = render_view; }
		
		%var fn can_render = field["can_render"];
		%var fn can_render_view = field["info", "view", "can_render"];
		%if (not rtl::isEmpty(can_render_view)){ %var can_render = can_render_view; }
		
		%if
		(
			rtl::exists(render) and
			(
				not rtl::exists(can_render) or
				( rtl::exists(can_render) and can_render(layout, model, class_settings) )
			)
		)
		{
			{ render(layout, value, class_settings) }
		}
		%else
		{
			%if (not rtl::isEmpty(class_name))
			{
				<{class_name} @key={ field_name } ...class_settings />
			}
		}
	}
</template>


</class>