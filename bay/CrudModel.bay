/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.CoreStruct;
use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Exceptions.RuntimeException;
use Runtime.RuntimeUtils;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.CRUD.FieldInfo;
use Runtime.Web.CRUD.FormModel;
use Runtime.Web.Dialog.DialogModel;


struct CrudModel extends CoreStruct
{
	static const string ACTION_SEARCH = "search";
	static const string ACTION_CREATE = "create";
	static const string ACTION_UPDATE = "update";
	static const string ACTION_DELETE = "delete";
	
	string action = "";
	Dict<FieldInfo> fields = null;
	
	/* Search */
	Collection<var> items = null;
	int page = 0;
	int start = 0;
	int total = 0;
	int limit = 0;
	int max_limit = 0;
	int active = -1;
	
	/* Fields */
	Collection<string> table_fields = null;
	Collection<Collection<string>> table_order = null;
	Collection<string> form_fields = null;
	
	/* Forms */
	FormModel form_add = null;
	FormModel form_edit = null;
	
	/* Dialogs */
	DialogModel dialog_add = new DialogModel();
	DialogModel dialog_answer = new DialogModel();
	
	
	
	/**
	 * Returns field info
	 */
	pure fn<CrudModel, FieldInfo> getField(string field_name) =>
		FieldInfo (CrudModel crud) use (field_name) => crud["fields"][field_name]
	;
	
	
	
	/**
	 * Returns field info
	 */
	pure FieldInfo getFieldInfo(string field_name) => static::buildFields() -> attr field_name;
	
	
	
	/**
	 * Returns item by index
	 */
	pure fn<Dict, CrudModel> getItemByIndex(int index) =>
		Dict (CrudModel model) use (index) =>
			rtl::attr(model, ["items", index], null)
	;
	
	
	
	/**
	 * Returns active item
	 */
	pure fn<Dict, CrudModel> getItemById(int id) =>
		Dict (CrudModel model) use (id) =>
			model.items.findItem( bool (Dict item) use (id) => item["id"] == id )
	;
	
	
	
	/**
	 * Returns value of item
	 */
	pure fn<Dict, var> getItemValue(FieldInfo info) =>
		var (Dict item) use (info) =>
			info.model != null ? rtl::attr(item, info.model) : item[info.api_name]
	;
	
	
	
	/**
	 * Set item value
	 */
	pure fn<Dict, var> setItemValue(FieldInfo info, var value) =>
		Dict (Dict item) use (info, value) =>
			info.model != null ?
				rtl::setAttr(item, info.model, value) :
				rtl::setAttr(item, [info.api_name], value)
	;
	
	
	
	/**
	 * Create model
	 */
	pure CrudModel create() =>
		static::newInstance
		{
			"fields": static::buildFields(),
			"table_fields": static::getDefaultTableFields(),
			"table_order": static::getDefaultTableOrder(),
			"form_fields": static::getDefaultFormFields(),
		}
	;
	
	
	
	/**
	 * Returns table fields
	 */
	pure Collection<string> getDefaultTableFields() => 
	[
	];
	
	
	
	/**
	 * Returns table field value
	 */
	pure Collection<Collection<string>> getDefaultTableOrder() =>
	[ 
		["id", "desc"]
	];
	
	
	
	/**
	 * Returns form fields
	 */
	pure Collection<string> getDefaultFormFields() => 
	[
	];
	
	
	
	/**
	 * Returns label name
	 */
	pure string getLabelName(CrudModel crud, string field_name) => "";
	
	
	
	/**
	 * Returns table value
	 */
	pure html getTableValue(LayoutModel layout, CrudModel crud, var item, string field_name) => "";
	
	
	
	/**
	 * Returns form value
	 */
	pure var getFormValue(CrudModel crud, var item, string field_name) => item[field_name];
	
	
	
	/**
	 * Returns item name
	 */
	pure string getItemName(Dict item) => item["name"];
	
	
	
	/**
	 * Setup fields
	 */
	pure Dict<string, FieldInfo> buildFields() => new Dict();
	
	
	
	/**
	 * Add field to struct
	 */
	pure fn<Dict, Dict> addField(FieldInfo item) =>
		Dict<string, FieldInfo> (Dict<string, FieldInfo> fields) use (item)
		{
			if (item == null) return fields;
			if (item.api_name == "") return fields;
			if (fields == null) fields = new Dict();
			if (fields.has(item.api_name)) return fields;
			
			fields <= fields.setIm(item.api_name, item);
			
			return fields;
		}
	;
	
	
	
	/**
	 * Edit field in struct
	 */
	pure fn<Dict, Dict> editField(FieldInfo item) =>
		Dict<string, FieldInfo> (Dict<string, FieldInfo> fields) use (item)
		{
			if (item == null) return fields;
			if (item.api_name == "") return fields;
			
			fields = fields.setIm(item.api_name, item);
			
			return fields;
		}
	;
	
	
	
	/**
	 * Remove field from struct
	 */
	pure fn<Dict, Dict> removeField(string api_name) =>
		Dict<string, FieldInfo> (Dict<string, FieldInfo> fields) use (api_name)
		{
			if (api_name == "") return fields;
			
			fields = fields.removeIm(api_name);
			
			return fields;
		}
	;
	
	
}
