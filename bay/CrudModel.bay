/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud;

use Runtime.BaseStruct;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.Bus;
use Runtime.Web.RenderContainer;
use Runtime.Web.Crud.FormModel;


struct CrudModel<T> extends BaseStruct
{
	int page = 0;
    int pages = 0;
    Collection<T> items = null;
    Dict dictionary = {};
	Dict item_data = null;
	Dict search_data = null;
	FormModel item_form = null;
	FormModel save_form = null;
	FormModel delete_form = null;
	int error_code = 0;
	string error_message = "";
	string search = "";
	string action = "";
	
	
	/**
	 * Returns api name
	 */
	static string getApiName()
	{
		return "";
	}
	
	
	/**
	 * Returns primary key of model
	 */
	pure Dict pk(Dict item) => {};
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action) => "";
	
	
	/**
	 * Get api url
	 */
	static string getApiUrl(string action, Dict data)
	{
		string api_name = static::getApiName();
		if (action == "crud_search") return api_name ~ ".crud_search";
		if (action == "crud_item") return api_name ~ ".crud_item";
		if (action == "crud_save") return api_name ~ ".crud_save";
		if (action == "crud_delete") return api_name ~ ".crud_delete";
		return "";
	}
	
	
	/**
	 * Set CRUD action
	 */
	CrudModel setAction(string action = "") => this.clone({
		"action": action,
	});
	
	
	/**
	 * Set page
	 */
	CrudModel setPage(int page = 0) => this.clone({
		"page": page,
	});
	
	
	/**
	 * Event
	 */
	async static void event(ModelProxy model, string action, Dict data)
	{
		return data;
	}
	
	
	/**
	 * Set api result
	 */
	CrudModel setApiResult(string action, ApiResult res)
	{
		if (res == null) return this;
		
		CrudModel model = this;
		if (res.isSuccess())
		{
			if (action == "crudSearch")
			{
				model = model.copy({
					"items": res["data"]["items"],
					"pages": res["data"]["pages"],
					"page": res["data"]["page"],
				});
			}
			
			else if (action == "crudItem")
			{
				model <= item <= res["data", "item"];
			}
		}
		
		model <= error_message <= res.getErrorMessage();
		model <= error_code <= res.getErrorCode();
		
		return model;
	}
	
	
	/**
	 * Returns search data
	 */
	Dict getSearchData() => {
		"page": this.page,
	};
	
	
	/**
	 * Search items
	 */
	async static ApiResult crudSearch(ModelProxy model, Dict data = null)
	{
		model.setAttr("search_data", data);
		
		/* Extends search data */
		Dict post_data = model.data().getSearchData();
		if (data != null) post_data = data.concat(data);
		
		/* Process event */
		Dict data = await static::event(model, "crudSearchBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		string url = static::getApiUrl("crud_search", post_data);
		ApiResult res = await Bus::callApi(url, post_data);
		
		/* Set api result */
		model.commit("setApiResult", "crudSearch", res);
		
		/* Process event */
		await static::event(model, "crudSearchAfter", {
			"post_data": post_data,
			"res": res
		});
		
		return res;
	}
	
	
	/**
	 * Returns item model
	 */
	Dict getItemModel()
	{
		if (this.action == "edit") return this.save_form;
		else if (this.action == "delete") return this.delete_form;
		else if (this.action == "item") return this.item_form;
		return null;
	}
	
	
	/**
	 * Returns item data
	 */
	Dict getItemData()
	{
		FormModel model = this.getItemModel();
		if (model == null) return null;
		
		return {
			"pk": {
				"id": model.item_id,
			}
		};
	}
	
	
	/**
	 * Returns find item model
	 */
	static ModelProxy getItemModelProxy(ModelProxy model)
	{
		string action = model.data().action;
		if (action == "edit") return model.proxy("save_form");
		else if (action == "delete") return model.proxy("delete_form");
		else if (action == "item") return model.proxy("item_form");
		return null;
	}
	
	
	/**
	 * Find item
	 */
	async static ApiResult crudItem(ModelProxy model, Dict data = null)
	{
		model.setAttr("item_data", data);
		
		/* Get post data */
		CrudModel crud_model = model.data();
		Dict post_data = crud_model.getItemData();
		if (data != null) post_data = data.concat(data);
		
		/* Process event */
		Dict data = await static::event(model, "crudItemBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		string url = static::getApiUrl("crud_item", post_data);
		ApiResult res = await Bus::callApi(url, post_data);
		
		/* Set api result */
		ModelProxy model_item = static::getItemModelProxy(model);
		if (model_item)
		{
			model_item.commit("setApiResult", "crudItem", res);
		}
		
		/* Process after */
		await static::event(model, "crudItemAfter", {
			"post_data": post_data, "res": res
		});
		
		return res;
	}
	
	
	/**
	 * Save form
	 */
	async static ApiResult crudSave(ModelProxy model)
	{
		/* Get post data */
		CrudModel crud_model = model.data();
		Dict post_data = crud_model.getItemData();
		post_data <= item <= crud_model.save_form.item.toDict();
		
		/* Process before */
		Dict d = await static::event(model, "before", "crudSaveBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		string url = static::getApiUrl("crud_save", post_data);
		ApiResult res = await Bus::callApi(url, post_data);
		
		/* Set api result */
		model.proxy(["save_form"]).commit("setApiResult", "crudSave", res);
		
		/* Process after */
		await static::event(model, "crudSaveAfter", {
			"post_data": post_data,
			"res": res,
		});
		
		return res;
	}
	
	
	/**
	 * Delete
	 */
	async static ApiResult crudDelete(ModelProxy model)
	{
		/* Get post data */
		CrudModel crud_model = model.data();
		Dict post_data = crud_model.getItemData();
		
		/* Process before */
		Dict d = await static::event(model, "crudDeleteBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		string url = static::getApiUrl("crud_delete", post_data);
		ApiResult res = await Bus::callApi(url, post_data);
		
		/* Set api result */
		model.proxy(["delete_form"]).commit("setApiResult", "crudDelete", res);
		
		/* Process after */
		await static::event(model, "crudDeleteAfter", {
			"post_data": post_data,
			"res": res,
		});
		
		return res;
	}
	
}
