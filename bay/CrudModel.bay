/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud;

use Runtime.BaseStruct;
use Runtime.Web.ApiResult;
use Runtime.Web.Bus;
use Runtime.Web.ModelProxy;
use Runtime.Web.RenderContainer;
use Runtime.Web.Crud.FormModel;


struct CrudModel<T> extends BaseStruct
{
	int page = 0;
    int pages = 0;
    Collection<T> items = null;
    Dict dictionary = null;
	FormModel save_form = null;
	FormModel delete_form = null;
	int error_code = 0;
	string error_message = "";
	string search = "";
	string action = "";
	
	
	/**
	 * Returns api name
	 */
	static string getApiName()
	{
		return "";
	}
	
	
	/**
	 * Returns primary key of model
	 */
	pure Dict pk(Dict item) => {};
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action) => "";
	
	
	/**
	 * Get api url
	 */
	static string getApiUrl(string action, Dict data)
	{
		string api_name = static::getApiName();
		if (action == "crud_search") return api_name ~ ".crud_search";
		if (action == "crud_item") return api_name ~ ".crud_item";
		if (action == "crud_save") return api_name ~ ".crud_save";
		if (action == "crud_delete") return api_name ~ ".crud_delete";
		return "";
	}
	
	
	/**
	 * Set CRUD action
	 */
	CrudModel setAction(string action = "") => this.clone({
		"action": action,
	});
	
	
	/**
	 * Before action
	 */
	async static void before(ModelProxy model, string action, Dict data)
	{
	}
	
	
	/**
	 * After action
	 */
	async static void after(ModelProxy model, string action, Dict data)
	{
	}
	
	
	/**
	 * Process api data
	 */
	static Dict processApiData(string action, Dict search_data)
	{
		return search_data;
	}
	
	
	/**
	 * Set api result
	 */
	CrudModel setApiResult(string action, ApiResult res)
	{
		if (res == null) return this;
		
		CrudModel model = this;
		if (res.isSuccess())
		{
			if (action == "searchItems")
			{
				model = model.copy({
					"items": res["data"]["items"],
					"pages": res["data"]["pages"],
					"page": res["data"]["page"],
				});
			}
			
			else if (action == "findItem")
			{
				model <= item <= res["data", "item"];
			}
		}
		
		model <= error_message <= res.getErrorMessage();
		model <= error_code <= res.getErrorCode();
		
		return model;
	}
	
	
	/**
	 * Returns search data
	 */
	Dict getSearchData() => {
		"page": this.page,
	};
	
	
	/**
	 * Search items
	 */
	async static void searchItems(ModelProxy model)
	{
		/* Process before */
		await static::before(model, "searchItems", {});
		
		/* Send api */
		Dict search_data = model.data().getSearchData();
		ApiResult res = await static::searchApi( search_data );
		
		/* Set api result */
		model.commit("setApiResult", "searchItems", res);
		
		/* Process after */
		await static::after(model, "searchItems", { "res": res });
	}
	
	
	/**
	 * Search api
	 */
	static async ApiResult searchApi(Dict search_data)
	{
		string url = static::getApiUrl("crud_search", {"search_data": search_data});
		
		search_data = static::processApiData("searchApi", search_data);
		ApiResult res = await Bus::callApi(url, search_data);
		
		return res;
	}
	
	
	/**
	 * Returns find item data
	 */
	Dict getFindItemData()
	{
		if (this.action == "edit")
		{
			return {
				"pk": {
					"id": this.save_form.item_id,
				}
			};
		}
		if (this.action == "delete")
		{
			return {
				"pk": {
					"id": this.delete_form.item_id,
				}
			};
		}
		return null;
	}
	
	
	/**
	 * Returns find item model
	 */
	static ModelProxy getFindItemModel(ModelProxy model)
	{
		string action = model.data().action;
		if (action == "edit")
		{
			return model.proxy("save_form");
		}
		else if (action == "delete")
		{
			return model.proxy("delete_form");
		}
		return null;
	}
	
	
	/**
	 * Find item
	 */
	async static void findItem(ModelProxy model)
	{
		/* Process before */
		await static::before(model, "before", "findItem", {});
		
		/* Send api */
		Dict find_item_data = model.data().getFindItemData();
		ApiResult res = await static::findItemApi( find_item_data );
		
		/* Set api result */
		ModelProxy model2 = static::getFindItemModel(model);
		if (model2)
		{
			model2.commit("setApiResult", "findItem", res);
		}
		
		/* Process after */
		await static::after(model, "after", "findItem", { "res": res });
	}
	
	
	/**
	 * Get by id Api
	 */
	static async ApiResult findItemApi(Dict search_data)
	{
		search_data = static::processApiData("findItemApi", search_data);
		string url = static::getApiUrl("crud_item", {"search_data": search_data});
		
		ApiResult res = await Bus::callApi(url, search_data);
		
		return res;
	}
	
	
	/**
	 * Save form
	 */
	async static void doSave(ModelProxy model)
	{
		/* Process before */
		await static::before(model, "before", "doSave", {});
		
		/* Send api */
		CrudModel data = model.data();
		Dict find_item_data = data.getFindItemData();
		ApiResult res = await static::saveApi(
			find_item_data,
			data.save_form.item.toDict()
		);
		
		/* Set api result */
		model.proxy(["save_form"]).commit("setApiResult", "doSave", res);
		
		/* Process after */
		await static::after(model, "after", "doSave", { "res": res });
	}
	
	
	/**
	 * Save Api
	 */
	static async ApiResult saveApi(Dict post_data, Dict item)
	{
		post_data <= item <= item;
		post_data = static::processApiData("saveApi", post_data);
		string url = static::getApiUrl("crud_save", post_data);
		
		ApiResult res = await Bus::callApi(url, post_data);
		
		return res;
	}
	
	
	/**
	 * Delete
	 */
	async static void doDelete(ModelProxy model)
	{
		/* Process before */
		await static::before(model, "before", "doDelete", {});
		
		/* Send api */
		CrudModel data = model.data();
		Dict find_item_data = data.getFindItemData();
		ApiResult res = await static::deleteApi(
			find_item_data
		);
		
		/* Set api result */
		model.proxy(["delete_form"]).commit("setApiResult", "doDelete", res);
		
		/* Process after */
		await static::after(model, "after", "doDelete", { "res": res });
	}
	
	
	/**
	 * Delete Api
	 */
	static async ApiResult deleteApi(Dict post_data, Dict item)
	{
		post_data <= item <= item;
		post_data = static::processApiData("deleteApi", post_data);
		string url = static::getApiUrl("crud_delete", post_data);
		
		ApiResult res = await Bus::callApi(url, post_data);
		
		return res;
	}
}
