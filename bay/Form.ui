<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.CRUD.Form" extends="Runtime.Web.Component" 
	module="Runtime.Web.CRUD" model="Runtime.Web.CRUD.FormModel"
>

<use name="Runtime.Core.Message" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.Input.Button" component="true" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.Events.ChangeEvent" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.CRUD.FormEvent" />
<use name="Runtime.Web.CRUD.FormModel" />

<style>
.form{
}
.form_row{
	padding-bottom: 15px;
}
.form_row:last-child{
	padding-bottom: 0px;
}
.form_label{
	font-weight: bold;
	padding-bottom: 5px;
}
.form_value{}
.form_value input, .form_value textarea, .form_value select{
	width: 100%;
	padding: 5px 10px;
}
.form_value textarea{
	height: 400px;
}
.form_buttons{
	text-align: center;
	margin-top: 10px;
}
.form_buttons %(Button)button{
	margin-left: 10px;
	margin-right: 10px;
}
.form_error{
	text-align: center;
	padding-top: 5px;
	color: red;
}
.form_result{
	padding-top: 10px;
	text-align: center;
}
.form_result.success{
	color: green;
}
.form_result.error{
	color: red;
}
</style>


<template name="render">
	<div class="form" @key="form">
		%if (model != null)
		{
			%render
			[
				static::renderHeader(layout, model, params, content),
				static::renderContent(layout, model, params, content),
				static::renderButtons(layout, model, params, content),
				static::renderResult(layout, model, params, content),
				static::renderFooter(layout, model, params, content),
			];
		}
	</div>
</template>


<template name="renderHeader">
</template>


<template name="renderContent">
	{ static::renderRows(layout, model, params, content) }
</template>


<template name="renderRows">
	<div class="form_rows" @key="rows">
		%var Collection<string> fields = params["fields"];
		%for (int i=0; i<fields.count(); i++)
		{
			%var string field_name = fields[i];
			%render static::renderRow(layout, model, params, field_name);
		}
	</div>
</template>

<template name="renderRow" args="LayoutModel layout, FormModel model, Dict params, string field_name">
	%var Collection<FieldInfo> struct = params["struct"];
	%var FieldInfo field = FieldInfo::getFieldInfo(struct, field_name);
	%var string extends_name = params["extends_name"] |> default string "form";
	
	%if (field != null)
	{
		<!-- Patch field -->
		%var field = static::patchField(layout, field, model, params);
		%var Collection<string> model_path = static::getBindPath(field);
		
		<!-- Get class name -->
		%var string class_name = field["class_name"];
		%var string class_name_form = field["info", extends_name, "class_name"];
		%if (not rtl::isEmpty(class_name_form)){ %var class_name = class_name_form; }
		
		<!-- Class settings -->
		%var Dict class_settings = field["class_settings"] |> default Dict {};
		%var Dict class_settings_form = field["info", extends_name, "class_settings"] |> default Dict null;
		%if (not rtl::isEmpty(class_settings_form))
		{
			%var class_settings = class_settings.concat( class_settings_form );
		}
		%var class_settings = class_settings
			.setIm("name", field_name)
			.setIm("crud_kind", extends_name)
			.setIm("crud_field_name", field_name)
			.setIm("crud_field_info", field)
			.setIm("crud_struct", struct)
			.setIm("crud_item", model["item"])
			.setIm("crud_form_model_path", model_path)
			.setIm("crud_form_model", model)
		;
		
		<!-- Get value -->
		%var var value = rtl::attr(model, model_path);
		
		<!-- Calculate new value -->
		%var fn calc = field["calc"];
		%var fn calc_form = field["info", extends_name, "calc"];
		%if (calc_form != null){ %var calc = calc_form; }
		%if (rtl::exists(calc)){ %var value = calc(layout, value, class_settings); }
		%var class_settings = class_settings.setIm("value", value);
		
		<!-- Calc class name -->
		%if (not rtl::isString(class_name) and rtl::isFn(class_name))
		{
			%var class_name = class_name(layout, value, class_settings);
		}
		%var class_name = class_name |> default string "";
		%var class_settings = class_settings.setIm("crud_class_name", class_name);
		
		<!-- Patch settings -->
		%var class_settings = static::patchSettings(layout, field, class_settings, model, params);
		
		<!-- Render value -->
		%var fn render = field["render"];
		%var fn render_form = field["info", extends_name, "render"];
		%if (not rtl::isEmpty(render_form)){ %var render = render_form; }
		
		%var fn can_render = field["can_render"];
		%var fn can_render_form = field["info", extends_name, "can_render"];
		%if (not rtl::isEmpty(can_render_form)){ %var can_render = can_render_form; }
		
		<div class='form_row' @key={ field_name }>
			<div class='form_label'>
				{ field["info", extends_name, "label"] ? field["info", extends_name, "label"] : field["label"] }:
			</div>
			<div class='form_value'>
				%if
				(
					rtl::exists(render) and
					(
						not rtl::exists(can_render) or
						( rtl::exists(can_render) and can_render(layout, value, class_settings) )
					)
				)
				{
					{ render(layout, rtl::attr(model, model_path), class_settings) }
				}
				%else
				{
					%if (not rtl::isEmpty(class_name))
					{
						<{class_name} @bind={ model_path } @key={ field_name }
							@event:ChangeEvent="onItemChange" ...class_settings />
					}
				}
			</div>
			{ static::renderFieldError(layout, model, field_name) }
		</div>
	}
</template>


<template name="renderField" args="LayoutModel layout, TableModel model, Dict class_settings">
	%var string class_name = class_settings["crud_class_name"];
	%var string field_name = class_settings["crud_field_name"];
	%var Collection<string> model_path = class_settings["crud_form_model_path"];
	%if (not rtl::isEmpty(class_name))
	{
		<{class_name} @bind={ model_path } @key={ field_name }
			@event:ChangeEvent="onItemChange" ...class_settings />
	}
</template>


<template name="renderFieldError" args="LayoutModel layout, FormModel model, string field_name">
	<div class='form_error'>
		%var Collection<string> errors = model["fields_errors"][field_name];
		%if (errors != null)
		{
			%for (int i=0; i<errors.count(); i++)
			{
				%var string s = errors[i];
				<div class='form_error_line'>{ s }</div>
			}
		}
	</div>
</template>


<template name="renderButtons">
	%var fn renderButtons = params["renderButtons"];
	%if (rtl::exists(renderButtons) and rtl::isFn(renderButtons))
	{
		<div class="form_buttons" @key="buttons">
			{ renderButtons(layout, model, params, content) }
		</div>
	}
	%else
	{
		<div class="form_buttons" @key="buttons">
		%if (params['action'] == "add")
		{
			<Button type="success" @event:MouseClickEvent="onButtonClick" data-action="create">Add</Button>
			<Button @event:MouseClickEvent="onButtonClick" data-action="cancel">Cancel</Button>
		}
		%if (params['action'] == "edit")
		{
			<Button type="success" @event:MouseClickEvent="onButtonClick" data-action="update">Update</Button>
			<Button @event:MouseClickEvent="onButtonClick" data-action="cancel">Cancel</Button>
		}
		</div>
	}
</template>


<template name="renderButton" args="LayoutModel layout, var model, Dict params, string button_type">
	%if (button_type == "create")
	{
		<Button type="success" @event:MouseClickEvent="onButtonClick" data-action="create" @key="create">
			Add
		</Button>
	}
	%if (button_type == "update")
	{
		<Button type="success" @event:MouseClickEvent="onButtonClick" data-action="update" @key="create">
			Update
		</Button>
	}
	%if (button_type == "cancel")
	{
		<Button @event:MouseClickEvent="onButtonClick" data-action="cancel" @key="cancel">
			Cancel
		</Button>
	}
</template>


<template name="renderButtonInfo" args="LayoutModel layout, var model, Dict params, Dict button_info">
	<Button @event:MouseClickEvent="onButtonClick" ...button_info>
		{ button_info["value"] }
	</Button>
</template>


<template name="renderResult">
	<div class='form_row form_result' class={ static::getResultClass(model) } @key="result">
		{ model.message }
		{ model.success_message }
		{ model.error_message }
	</div>
</template>


<template name="renderFooter">
</template>



<script type="frontend">


/**
 * Patch field
 */
pure Dict patchField(LayoutModel layout, Dict field, var model, Dict params)
{
	return field;
}



/**
 * Patch class settings
 */
pure Dict patchSettings(LayoutModel layout, Dict field, Dict class_settings, var model, Dict params)
{
	return class_settings;
}



/**
 * Returns result class
 */
pure string getResultClass(FormModel model)
{
	if (model.success_message != "") return "success";
	if (model.error_message != "") return "error";
	return "";
}


/**
 * Returns bind path
 */
pure Collection<string> getBindPath(Dict field) => ["item", field["api_name"]];



/**
 * On item change
 */
async void onItemChange(Message<ChangeEvent> msg)
{
	FormModel model = this.model();
	Dict params = msg.sender.params;
	string field_name = params["name"];
	string new_value = msg.data.value;
	string old_value = msg.data.old_value;
	var model_path = params["crud_form_model_path"];
	
	FormEvent event = new FormEvent
	{
		"event": FormEvent::ACTION_CHANGE,
		"item": model.item,
		"field_name": field_name,
		"old_value": old_value,
		"value": new_value,
	};
	
	if (model_path != null) this.update("setAttr", model_path, new_value);
	await this.signal(event);
}



/**
 * On mouse click
 */
async void onButtonClick(Message<MouseClickEvent> msg)
{
	FormModel model = this.model();
	FormEvent event = new FormEvent
	{
		"item": model.item,
	};
	string data_action = msg.sender.params.get("data-action");
	if (data_action == "create")
	{
		event <= event <= FormEvent::ACTION_CREATE;
		await this.signal(event);
	}
	else if (data_action == "update")
	{
		event <= event <= FormEvent::ACTION_UPDATE;
		await this.signal(event);
	}
	else if (data_action == "cancel")
	{
		event <= event <= FormEvent::ACTION_CANCEL;
		await this.signal(event);
	}
	else
	{
		event <= event <= data_action;
		await this.signal(event);
	}
}

</script>

</class>