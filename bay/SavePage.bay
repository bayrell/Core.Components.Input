/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.MessageRPC;
use Runtime.RuntimeUtils;
use Runtime.Web.CRUD.ItemModel;
use Runtime.Web.CRUD.SavePageModel;
use Runtime.Web.Button.Button;
use Runtime.Web.UI.Component;
use Runtime.Web.UI.LayoutModel;
use Runtime.Web.UI.Events.Mouse.MouseClickEvent;
use Runtime.Web.UI.Events.Mouse.MouseContextMenuEvent;
use Runtime.Web.UI.Events.User.ChangeEvent;


class SavePage extends Component
{
	
	
	/**
	 * Returns required components
	 */
	lambda Collection<string> components() => 
	[
		classof Button,
	];
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) =>
		@css{
			%crud_save{
				max-width: 500px;
				margin-left: auto;
				margin-right: auto;
			}
			%crud_save_title{
				font-size: 1.5em;
				font-weight: bold;
				margin-top: 0.5em;
			}
			%crud_save_row{
				padding-top: 10px;
			}
			%crud_save_buttons{
				text-align: center;
			}
			%crud_save_buttons %(Button)button{
				cursor: pointer;
			}
			%crud_save_result{
				text-align: center;
				padding-top: 5px;
			}
			%crud_save_result--success{
				color: green;
			}
			%crud_save_result--error{
				color: red;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	lambda html render(LayoutModel layout, SavePageModel model, Dict params, html content, var control)
	{
		return
			<div @class='crud_save'>
				{ static::renderTitle(layout, model, control) }
				{ static::renderContent(layout, model, control) }
				{ static::renderButtons(layout, model, control) }
				{ static::renderResult(layout, model, control) }
			</div>
		;
	}
	
	
	
	/**
	 * Render title
	 */
	lambda html renderTitle(LayoutModel layout, SavePageModel model, var control)
	{
		return
			<div @class='crud_save_title'>
				{ model.crud.action == "add" ? _("Add", "CRUD") : _("Edit", "CRUD") } Object
			</div>
		;
	}
	
	
	
	/**
	 * Render content
	 */
	lambda html renderContent(LayoutModel layout, SavePageModel model, var control)
	{
		Collection fields = model.crud->getFormFields();
		return 
			fields.map
			(
				html (string field_name) use (layout, model, control) => 
					static::renderRow(layout, model, field_name, control)
			)
		;
	}
	
	
	
	/**
	 * Render row
	 */
	lambda html renderRow(LayoutModel layout, SavePageModel model, string field_name, var control)
	{
		string class_name = model.crud->getFormClassName(field_name);
		var value = model.crud->getItemValue(field_name);
		if (class_name == "") return "";
		return
			<div @class="crud_save_row" data-field-name={ field_name }>
				<{class_name} @model={ value } name={ field_name }
					@event:ChangeEvent="onChange"></{class_name}>
			</div>
		;
	}
	
	
	
	/**
	 * Render button
	 */
	lambda html renderButtons(LayoutModel layout, SavePageModel model, var control)
	{
		return
			<div @class='crud_save_row crud_save_buttons'>
				<Button @eventAsync:MouseClickEvent="onClick">
					{ model.crud.action == "add" ? _("Add", "CRUD") : _("Save", "CRUD") }
				</Button>
			</div>
		;
	}
	
	
	
	/**
	 * Render result
	 */
	lambda html renderResult(LayoutModel layout, SavePageModel model, var control)
	{
		if (model.crud.error_code == 0)
		{
			if (model.crud.error_str == "") return "";
			return
				<div @class="crud_save_result">
					{ model.crud.error_str }
				</div>
			;
		}
		if (model.crud.error_code > 0)
		{
			if (model.crud.error_str == "")
				return 
					<div @class="crud_save_result crud_save_result--success">
						{ _("OK", "CRUD") }
					</div>
				;
		}
		
		return 
			<div @class="crud_save_result crud_save_result--error">
				{ model.crud.error_str }
			</div>
		;
	}
	
	
	#ifdef FRONTEND then
	
	
	/**
	 * On change event
	 */
	void onChange(ChangeEvent e)
	{
		var name = e.target.name;
		var value = e.target.value;
		
		SavePageModel model = this.model;
		Map d = new Map(); d.set(name, value);
		model <= crud <= item <= model.crud.item.copy(d);
		this.setModel(model);
	}
	
	
	
	/**
	 * On click event
	 */
	async void onClick(ChangeEvent e)
	{
		MessageRPC<Dict> api_res = null;
		
		/* Update model */
		SavePageModel model = this.model;
		model <= crud <= error_code <= 0;
		model <= crud <= error_str <= _("Wait please", "CRUD");
		this.setModel(model);
		
		if (this.model.crud.action == "add")
		{
			/* Send add message */
			api_res = await @->sendMessage
			(
				new MessageRPC
				{
					"api_name": this.model.crud.api_name,
					"space_name": "Runtime.Web.CRUD.CrudInterface",
					"method_name": "add",
					"data":
					{
						"item": this.model.crud.item.takeDict(),
					}
					"session": null,
				}
			);
		}
		
		else if (this.model.crud.action == "edit")
		{
			/* Send save message */
			api_res = await @->sendMessage
			(
				new MessageRPC
				{
					"api_name": this.model.crud.api_name,
					"space_name": "Runtime.Web.CRUD.CrudInterface",
					"method_name": "save",
					"data":
					{
						"item": this.model.crud.item.takeDict(),
					}
					"session": null,
				}
			);
		}
		
		/* Message result */
		if (api_res and api_res.have_result)
		{
			/* Update model */
			SavePageModel model = this.model;
			model <= crud <= error_code <= api_res.code;
			model <= crud <= error_str <= api_res.error;
			this.setModel(model);
		}
		else
		{
			SavePageModel model = this.model;
			model <= crud <= error_code <= -1;
			model <= crud <= error_str <= "No result";
			this.setModel(model);
		}
	}
	
	
	#endif
}