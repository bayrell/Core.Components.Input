<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Web.Crud.TablePage">

<use name="Runtime.BaseStruct" />
<use name="Runtime.ModelProxy" />
<use name="Runtime.Web.Layout" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.Crud.Button" />
<use name="Runtime.Web.Crud.CrudPageModel" />
<use name="Runtime.Web.Crud.Dialog" component="true" />
<use name="Runtime.Web.Crud.DialogEvent" />
<use name="Runtime.Web.Crud.FormEvent" />
<use name="Runtime.Web.Crud.Pagination" component="true" />
<use name="Runtime.Web.Crud.RowButtons" component="true" />
<use name="Runtime.Web.Crud.RowNumber" component="true" />
<use name="Runtime.Web.Crud.Table" component="true" />


<script>

pure Collection<string> getColumns(Layout layout, BaseStruct model) =>
[
];


pure Dict<string> getLabels(Layout layout, BaseStruct model) => {
};

</script>


<template name="renderTop">
	<h1>{{ model.getPageTitle( model.action ) }}</h1>
</template>


<template name="renderHeaderField" args="string field_name">
</template>


<template name="renderField" args="int row_number, string field_name, User item">
	%if (field_name == "row_number")
	{
		{{ model.limit * (model.page - 1) + row_number + 1 }}
	}
	%else
	{
		{{ item[field_name] }}
	}
</template>


<template name="renderHeader">
	%set Collection<string> columns = static::getColumns(layout, model);
	%set Dict<string> labels = static::getLabels(layout, model);
	%if (columns)
	{
		<tr class="web_table__row_header">
			%for (int i=0; i<columns.count(); i++)
			{
				%set string field_name = columns[i];
				%if (labels.has(field_name))
				{
					<th class={{ "web_table__th--" ~ field_name }}>
						{{ labels[field_name] }}
					</th>
				}
				%else
				{
					<th class={{ "web_table__th--" ~ field_name }}>
						%render static::renderHeaderField(field_name);
					</th>
				}
			}
		</tr>
	}
</template>


<template name="renderRow" args="int row_number">
	%set Collection<string> columns = static::getColumns(layout, model);
	%set Collection items = model["items"];
	%set BaseStruct item = items[row_number];
	<tr class="web_table__row_item">
		%for (int i=0; i<columns.count(); i++)
		{
			%set string field_name = columns[i];
			<td class={{ "web_table__td--" ~ field_name }}>
				%render static::renderField(row_number, field_name, item);
			</td>
		}
	</tr>
</template>


<template name="renderTable">
	%set Collection items = model["items"];
	<table class="web_table">
		%render static::renderHeader();
		%if (items)
		{
			%for (int i=0; i<items.count(); i++)
			{
				%render static::renderRow(i);
			}
		}
		%render static::renderPagination();
	</table>
</template>


<template name="renderPagination">
	%set int page = model["page"];
	%set int pages = model["pages"];
	%if (pages > 1)
	{
		%set Collection<string> columns = static::getColumns(layout, model);
		<tr>
			<td colspan={{ columns.count() }} class="web_table__row_pagination">
				<Pagination
					page={{ page }}
					pages={{ pages }}
				/>
			</td>
		</tr>
	}
</template>


<template name="renderSaveDialogContent"></template>
<template name="renderDeleteDialogContent"></template>


<template name="renderSaveDialog">
	<Dialog @ref="save_dialog" @model="save_dialog" @event:DialogEvent="onSaveDialogEvent">
		%render static::renderSaveDialogContent();
	</Dialog>
</template>


<template name="renderDeleteDialog">
	<Dialog @ref="delete_dialog" @model="delete_dialog" @event:DialogEvent="onDeleteDialogEvent">
		%render static::renderDeleteDialogContent();
	</Dialog>
</template>


<template name="renderDialogs">
	%render static::renderSaveDialog();
	%render static::renderDeleteDialog();
</template>


<template>
	%render static::renderTop();
	%render static::renderTable();
	%render static::renderDialogs();
</template>


<script>

var save_dialog;
var delete_dialog;


/**
 * Returns primary key
 */
Dict getDialogPrimaryKey(Message<MouseClickEvent> msg)
{
	if (msg.params.has("data-id"))
	{
		return {
			"id": msg.params.get("data-id"),
		};
	}
	
	return null;
}


/**
 * Add click
 */
async void onAddClick(Message<MouseClickEvent> msg)
{
	ModelProxy page_model = this.modelProxy();
	ModelProxy save_dialog = this.modelProxy("save_dialog");
	
	page_model.commit("clearItem");
	
	save_dialog.commit("setTitle", "Add item");
	this.save_dialog.component.show();
}


/**
 * Edit click
 */
async void onEditClick(Message<MouseClickEvent> msg)
{
	ModelProxy save_form = this.modelProxy("save_form");
	ModelProxy save_dialog = this.modelProxy("save_dialog");
	ModelProxy page_model = this.modelProxy();
	
	save_form.commit("setLoading");
	save_form.commit("setPrimaryKey", this.getDialogPrimaryKey(msg));
	save_dialog.commit("setTitle", "Edit item");
	this.save_dialog.component.show();
	
	page_model.commit("clearItem");
	await page_model.commitAsync("callCrudItem");
}


/**
 * Delete click
 */
async void onDeleteClick(Message<MouseClickEvent> msg)
{
	ModelProxy delete_form = this.modelProxy("delete_form");
	ModelProxy delete_dialog = this.modelProxy("delete_dialog");
	ModelProxy page_model = this.modelProxy();
	
	delete_form.commit("setLoading");
	delete_form.commit("setItem", null);
	delete_form.commit("setPrimaryKey", this.getDialogPrimaryKey(msg));
	delete_dialog.commit("setTitle", "Delete item");
	this.delete_dialog.component.show();
	
	page_model.commit("clearItem");
	await page_model.commitAsync("callCrudItem");
}


/**
 * Save dialog event
 */
async void onSaveDialogEvent(Message<DialogEvent> msg)
{
	if (msg.event.button_result == "cancel")
	{
		this.save_dialog.component.hide();
		return;
	}
}


/**
 * Delete dialog event
 */
async void onDeleteDialogEvent(Message<DialogEvent> msg)
{
	if (msg.event.button_result == "cancel")
	{
		this.save_dialog.component.hide();
		return;
	}
}

</script>

</class>