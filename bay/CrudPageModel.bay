/*!
 *  Bayrell Runtime Library 
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.BaseStruct;
use Runtime.Exceptions.RuntimeException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderDriver;
use Runtime.Web.Request;
use Runtime.Web.CRUD.FieldInfo;
use Runtime.Web.CRUD.FormModel;
use Runtime.Web.CRUD.TableModel;
use Runtime.Web.Dialog.DialogModel;


struct CrudPageModel extends BaseStruct
{
	static const string ACTION_SEARCH = "search";
	static const string ACTION_VIEW = "view";
	static const string ACTION_CREATE = "create";
	static const string ACTION_UPDATE = "update";
	static const string ACTION_DELETE = "delete";
	
	string action = "";
	FormModel form_add = new FormModel{ "action": "create" };
	FormModel form_edit = new FormModel{ "action": "update" };
	FormModel filter = new FormModel();
	TableModel table = new TableModel();
	DialogModel dialog_add = new DialogModel();
	DialogModel dialog_edit = new DialogModel();
	DialogModel dialog_delete = new DialogModel();
	
	/* Crud settings */
	Collection<FieldInfo> struct = [];
	Collection<string> filter_fields = [];
	Collection<string> form_fields = [];
	Collection<string> table_fields = [];
	Collection<string> view_fields = [];
	
	/* Crud data */
	Dict item = {};
	Dict foreigns = {};
	Dict data = {};
	
	/* Crud error */
	int error_code = 1;
	string error_message = "";
	string error_name = "";
	
	
	/**
	 * Returns position of item
	 */
	pure int findPos(CrudPageModel model, Dict find)
	{
		return model.table::findPos(model.table, find)
	}
	
	
	
	/**
	 * Find first item
	 */
	pure Dict getFirstItem(CrudPageModel model, Dict find)
	{
		return model.table::getFirstItem(model.table, find)
	}
	
	
	
	/**
	 * Add item
	 */
	pure CrudPageModel addItem(CrudPageModel model, Dict item)
	{
		model <= table <= model.table::addItem(model.table, item)
		return model;
	}
	
	
	
	/**
	 * Prepend item
	 */
	pure CrudPageModel prependItem(CrudPageModel model, Dict item)
	{
		model <= table <= model.table::prependItem(model.table, item)
		return model;
	}
	
	
	
	/**
	 * Set item
	 */
	pure CrudPageModel setItem(CrudPageModel model, Dict find, Dict item)
	{
		model <= table <= model.table::setItem(model.table, find, item)
		return model;
	}
	
	
	
	/**
	 * Remove item by id
	 */
	pure CrudPageModel removeItem(CrudPageModel model, Dict find)
	{
		model <= table <= model.table::removeItem(model.table, find)
		return model;
	}
}