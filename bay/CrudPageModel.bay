/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.ModelProxy;
use Runtime.Exceptions.ApiException;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Connection;
use Runtime.ORM.Cursor;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.Bus;
use Runtime.Web.RenderContainer;
use Runtime.Web.Crud.DialogModel;
use Runtime.Web.Crud.FieldInfo;
use Runtime.Web.Crud.FormModel;
use Runtime.Web.Crud.StructBuilder;
use Runtime.Web.Crud.Rules.CrudRule;
use Runtime.Web.Crud.Rules.Filter;


struct CrudPageModel<T> extends BaseModel
{
	static const string ACTION_INDEX = "index";
	static const string ACTION_ITEM = "item";
	static const string ACTION_ADD = "add";
	static const string ACTION_EDIT = "edit";
	static const string ACTION_DELETE = "delete";
	
	int page = 0;
	int pages = 0;
	int limit = 10;
	Dict<T> fields = {};
	Collection<T> items = null;
	Dict dictionary = {};
	Dict item_data = null;
	Dict search_data = null;
	FormModel item_form = new FormModel;
	DialogModel save_dialog = null;
	DialogModel delete_dialog = null;
	int error_code = 0;
	string error_message = "";
	string search = "";
	string action = "";
	
	
	/**
	 * Returns api name
	 */
	pure string getApiName() => "";
	
	
	/**
	 * Returns model name
	 */
	pure string getModelName() => "";
	
	
	/**
	 * Returns page type
	 */
	pure string getPageType() => "default";
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action)
	{
		if (action == "index")
		{
			return "List";
		}
		else if (action == "add")
		{
			return "Add";
		}
		else if (action == "edit")
		{
			return "Edit";
		}
		else if (action == "delete")
		{
			return "Delete";
		}
		else if (action == "delete_content")
		{
			return "Delete item ?";
		}
		return "";
	}
	
	
	/**
	 * Set CRUD action
	 */
	CrudPageModel setAction(string action = "") => this.clone({ "action": action });
	
	
	/**
	 * Set search data
	 */
	CrudPageModel setSearchData(Dict search_data) => this.clone({ "search_data": search_data });
	
	
	/**
	 * Set item data
	 */
	CrudPageModel setItemData(Dict item_data) => this.clone({ "item_data": item_data });
	
	
	/**
	 * Set page
	 */
	CrudPageModel setPage(int page = 0) => this.clone({ "page": page });
	
	
	/**
	 * Set limit
	 */
	CrudPageModel setLimit(int limit = 10) => this.clone({ "limit": limit });
	
	
	/**
	 * Set error
	 */
	CrudPageModel setError(string error_message, int error_code = 1) => this.clone({
		"error_message": error_message
		"error_code": error_code
	});
	
	
	/**
	 * Setup default values
	 */
	BaseStruct defaultValues(BaseStruct item)
	{
		Collection fields = this.fields.keys();
		for (int i=0; i<fields.count(); i++)
		{
			string field_name = fields[i];
			FieldInfo field = this.fields.get(field_name);
			if (field.default !== null)
			{
				item <= { field_name } <= field.default;
			}
		}
		return item;
	}
	
	
	/**
	 * Clear item
	 */
	CrudPageModel clearItem()
	{
		string class_name = static::getModelName();
		BaseStruct new_item = rtl::newInstance(class_name);
		new_item = this.defaultValues(new_item);
		return this.copy{
			"item_form": this.item_form.setItem(new_item)
		}
	}
	
	
	/**
	 * Set items
	 */
	CrudPageModel setItems(Dict params) => this.clone
	{
		"items": params.has("items") ? params["items"] : this.items,
		"limit": params.has("limit") ? params["limit"] : this.limit,
		"page": params.has("page") ? params["page"] : this.page,
		"pages": params.has("pages") ? params["pages"] : this.pages,
	};
	
	
	/**
	 * Set fields
	 */
	CrudPageModel setFields(Dict fields) => this.clone{ "fields": fields };
	
	
	/**
	 * Extends dictionary
	 */
	CrudPageModel extendDictionary(Dict new_dictionary)
	{
		Map dictionary = this.dictionary.toMap();
		Collection keys = new_dictionary.keys();
		
		for (int i=0; i<keys.count(); i++)
		{
			string field_name = keys[i];
			Collection items = new_dictionary[field_name];
			if (not dictionary.has(field_name))
			{
				dictionary.setValue(field_name, items);
			}
			else
			{
				dictionary.setValue(field_name, items);
			}
		}
		
		return this.clone{
			"dictionary": dictionary.toDict(),
		}
	}
	
	
	/**
	 * Event
	 */
	async static Dict event(ModelProxy model, string event, Dict data)
	{
		return data;
	}
	
	
	/**
	 * Set api result
	 */
	static void setApiResult(ModelProxy model, string event, ApiResult res)
	{
		ModelProxy item_form = model.proxy("item_form");
		
		if (res.isSuccess())
		{
			if (event == "crudSearch")
			{
				model.commit("setItems", {
					"items": res["data"]["items"],
					"limit": res["data"]["limit"],
					"page": res["data"]["page"],
					"pages": res["data"]["pages"],
				});
			}
		}
		
		if (
			event == "crudSearchOne" or
			event == "crudItem" or
			event == "crudSave" or
			event == "crudDelete"
		)
		{
			item_form.commit("setApiResult", event, res);
		}
		
		if (event == "crudSave")
		{
			if (model.data("save_dialog"))
			{
				model.proxy("save_dialog").commit("setApiResult", event, res);
			}
		}
		
		else if (event == "crudDelete")
		{
			if (model.data("delete_dialog"))
			{
				model.proxy("delete_dialog").commit("setApiResult", event, res);
			}
		}
		
		if (
			res.isSuccess() and (
				event == "crudSearch" or
				event == "crudSearchOne" or
				event == "crudItem"
			)
		)
		{
			if (res.isSuccess())
			{
				model.commit("extendDictionary", res["data"]["dictionary"]);
			}
		}
		
		model.commit("setError", res.getErrorMessage(), res.getErrorCode());
		
		return model;
	}
	
	
	/**
	 * Search items
	 */
	async static ApiResult callCrudSearch(ModelProxy model)
	{
		int page = model.data("page");
		int limit = model.data("limit");
		Dict search_data = model.data("search_data");
		
		/* Extends search data */
		Dict post_data = {
			"page_type": static::getPageType(),
			"page": page,
			"limit": limit,
		};
		if (search_data != null) post_data = post_data.concat(search_data);
		
		/* Process event */
		Dict d = await static::event(model, "crudSearchBefore", {
			"post_data": post_data,
			"search_data": search_data,
		});
		
		/* Send api */
		ApiResult res = await static::callSearch(model, d["post_data"]);
		
		/* Set api result */
		model.commit("setApiResult", "crudSearch", res);
		
		/* Process event */
		await static::event(model, "crudSearchAfter", {
			"post_data": post_data,
			"res": res
		});
		
		return res;
	}
	
	
	/**
	 * Call api search
	 */
	async static ApiResult callSearch(ModelProxy model, Dict post_data)
	{
		return await Bus::callApi(static::getApiName() ~ "::crud.search", post_data);
	}
	
	
	/**
	 * Search items
	 */
	async static ApiResult callCrudSearchOne(ModelProxy model)
	{
		int page = model.data("page");
		Dict search_data = model.data("search_data");
		
		/* Extends search data */
		Dict post_data = {
			"page_type": static::getPageType(),
			"page": page,
		};
		if (search_data != null) post_data = post_data.concat(search_data);
		
		/* Process event */
		Dict d = await static::event(model, "crudSearchBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		ApiResult res = await static::callSearchOne(model, d["post_data"]);
		
		/* Set api result */
		model.commit("setApiResult", "crudSearchOne", res);
		
		/* Process event */
		await static::event(model, "crudSearchAfter", {
			"post_data": post_data,
			"res": res
		});
		
		return res;
	}
	
	
	/**
	 * Call api search one
	 */
	async static ApiResult callSearchOne(ModelProxy model, Dict post_data)
	{
		return await Bus::callApi(static::getApiName() ~ "::crud.search_one", post_data);
	}
	
		
	/**
	 * Find item
	 */
	async static ApiResult callCrudItem(ModelProxy model)
	{
		ModelProxy<FormModel> item_form = model.proxy("item_form");
		
		Dict pk = item_form.call("getPrimaryKey");
		if (pk == null)
		{
			await static::event(model, "crudItemBefore", {
				"pk": null,
			});
			
			/* Set clear item */
			model.commit("clearItem");
			
			await static::event(model, "crudItemAfter", {
				"pk": null,
			});
			
			return null;
		}
		else
		{
			/* Get post data */
			Dict item_data = model.data("item_data");
			Dict post_data = {
				"page_type": static::getPageType(),
				"pk": pk,
			};
			if (item_data != null) post_data = post_data.concat(item_data);
			
			/* Process event */
			Dict d = await static::event(model, "crudItemBefore", {
				"pk": pk,
				"post_data": post_data,
			});
			
			/* Send api */
			ApiResult res = await static::callApiItem(model, d["post_data"]);
			
			/* Set api result */
			model.commit("setApiResult", "crudItem", res);
			
			/* Process after */
			await static::event(model, "crudItemAfter", {
				"pk": pk,
				"post_data": post_data,
				"res": res
			});
			
			return res;
		}
	}
	
	
	/**
	 * Call api item
	 */
	async static ApiResult callApiItem(ModelProxy model, Dict post_data)
	{
		return await Bus::callApi(static::getApiName() ~ "::crud.item", post_data);
	}
	
	
	/**
	 * Save form
	 */
	async static ApiResult callCrudSave(ModelProxy model)
	{
		ModelProxy<FormModel> item_form = model.proxy("item_form");
		Dict pk = item_form.call("getPrimaryKey");
		Dict item = item_form.model("item");
		
		/* Get post data */
		Dict post_data = {
			"page_type": static::getPageType(),
			"pk": pk,
			"item": item.toDict(),
		};
		
		/* Process before */
		Dict d = await static::event(model, "crudSaveBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		ApiResult res = await static::callApiSave(model, d["post_data"]);
		
		/* Set api result */
		model.commit("setApiResult", "crudSave", res);
		
		/* Set pk */
		if (res.isSuccess())
		{
			if (model.data(["item_form", "item_pk"]) != null)
			{
				model.commit("setAction", "edit");
			}
			else
			{
				model.commit("setAction", "add");
			}
		}
		
		/* Process after */
		await static::event(model, "crudSaveAfter", {
			"post_data": post_data,
			"res": res,
		});
		
		return res;
	}
	
	
	/**
	 * Call api save
	 */
	async static ApiResult callApiSave(ModelProxy model, Dict post_data)
	{
		return await Bus::callApi(static::getApiName() ~ "::crud.save", post_data);
	}
	
	
	/**
	 * Delete
	 */
	async static ApiResult callCrudDelete(ModelProxy model)
	{
		ModelProxy<FormModel> item_form = model.proxy("item_form");
		Dict pk = item_form.call("getPrimaryKey");
		
		/* Get post data */
		Dict post_data = {
			"page_type": static::getPageType(),
			"pk":pk,
		};
		
		/* Process before */
		Dict d = await static::event(model, "crudDeleteBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		ApiResult res = await static::callApiDelete(model, d["post_data"]);
		
		/* Set api result */
		model.commit("setApiResult", "crudDelete", res);
		
		/* Process after */
		await static::event(model, "crudDeleteAfter", {
			"post_data": post_data,
			"res": res,
		});
		
		return res;
	}
	
	
	/**
	 * Call api delete
	 */
	async static ApiResult callApiDelete(ModelProxy model, Dict post_data)
	{
		return await Bus::callApi(static::getApiName() ~ "::crud.delete", post_data);
	}
	
}
