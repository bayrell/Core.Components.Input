/*!
 *  Bayrell Runtime Library 
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.BaseStruct;
use Runtime.Exceptions.RuntimeException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderDriver;
use Runtime.Web.Request;
use Runtime.Web.CRUD.FormModel;
use Runtime.Web.CRUD.TableModel;
use Runtime.Web.Dialog.DialogModel;


struct CrudPageModel extends BaseStruct
{
	static const string ACTION_SEARCH = "search";
	static const string ACTION_VIEW = "view";
	static const string ACTION_CREATE = "create";
	static const string ACTION_UPDATE = "update";
	static const string ACTION_DELETE = "delete";
	
	string action = "";
	FormModel form_add = new FormModel{ "action": "create" };
	FormModel form_edit = new FormModel{ "action": "update" };
	FormModel filter = new FormModel();
	TableModel table = new TableModel();
	DialogModel dialog_add = new DialogModel();
	DialogModel dialog_edit = new DialogModel();
	DialogModel dialog_delete = new DialogModel();
	Dict item = {};
	Dict foreigns = {};
	Dict data = {};
	
	
	
	/**
	 * Crud Search
	 */
	static async CrudPageModel crudSearch(string object_name, RenderContainer container)
	{
		/* Remote call */
		Dict search_params = static::getCrudSearchParams(container.request);
		RemoteCallAnswer answer = await container.externalBusCall
		{
			"object_name": object_name,
			"interface_name": "core.crud",
			"method_name": "search",
			"data": search_params,
		};
		
		/* Throw exception */
		if (not answer.isSuccess())
		{
			throw new RuntimeException(answer.error_message, answer.error_code);
		}
		
		/* Answer */
		CrudPageModel page_model = static::newInstance{ "action": "search" };
		if (answer.isSuccess())
		{
			page_model <= table <= rows <= answer.response["items"];
			page_model <= table <= page <= answer.response["page"];
			page_model <= table <= pages <= answer.response["pages"];
			page_model <= table <= limit <= answer.response["limit"];
			page_model <= foreigns <= answer.response["foreigns"];
		}
		
		/* Set filter items */
		Dict filter = container.request.query["filter"] |> default Dict null;
		if (filter)
		{
			page_model <= filter <= item <= filter;
		}
		
		return page_model;
	}
	
	
	
	/**
	 * Crud View
	 */
	static async CrudPageModel crudView(string object_name, Dict pk, RenderContainer container)
	{
		/* Remote call */
		RemoteCallAnswer answer = await container.externalBusCall
		{
			"object_name": object_name,
			"interface_name": "core.crud",
			"method_name": "getItem",
			"data":
			{
				"pk": pk,
			}
		};
		
		/* Throw exception */
		if (not answer.isSuccess())
		{
			throw new RuntimeException(answer.error_message, answer.error_code);
		}
		
		/* Answer */
		CrudPageModel page_model = static::newInstance{ "action": "view" };
		if (answer.isSuccess())
		{
			page_model <= item <= answer.response["item"];
			page_model <= foreigns <= answer.response["foreigns"];
		}
		return page_model;
	}
	
	
	
	/**
	 * Crud search
	 */
	pure RemoteCallAnswer getCrudSearchParams(Request request)
	{
		Map data = new Map();
		
		if (rtl::exists(request.query))
		{
			Vector search_filter = new Vector();
			Dict filter = request.query["filter"] |> default Dict null;
			if (filter)
			{
				Collection keys = filter.keys();
				for (int i=0; i<keys.count(); i++)
				{
					string key_name = keys[i];
					search_filter.push([key_name, "=", filter[key_name]]);
				}
				data.set("filter", search_filter.toCollection());
			}
			
			string page = request.query.get("page", 1) - 1;
			if (page < 0) page = 0;
			data.set("page", page);
			data.set("limit", 20);
		}
		
		return data.toDict();
	}
	
	
	
	
	/**
	 * Returns position of item
	 */
	pure int findPos(CrudPageModel model, Dict find)
	{
		return model.table::findPos(model.table, find)
	}
	
	
	
	/**
	 * Find first item
	 */
	pure Dict getFirstItem(CrudPageModel model, Dict find)
	{
		return model.table::getFirstItem(model.table, find)
	}
	
	
	
	/**
	 * Add item
	 */
	pure CrudPageModel addItem(CrudPageModel model, Dict item)
	{
		model <= table <= model.table::addItem(model.table, item)
		return model;
	}
	
	
	
	/**
	 * Prepend item
	 */
	pure CrudPageModel prependItem(CrudPageModel model, Dict item)
	{
		model <= table <= model.table::prependItem(model.table, item)
		return model;
	}
	
	
	
	/**
	 * Set item
	 */
	pure CrudPageModel setItem(CrudPageModel model, Dict find, Dict item)
	{
		model <= table <= model.table::setItem(model.table, find, item)
		return model;
	}
	
	
	
	/**
	 * Remove item by id
	 */
	pure CrudPageModel removeItem(CrudPageModel model, Dict find)
	{
		model <= table <= model.table::removeItem(model.table, find)
		return model;
	}
}