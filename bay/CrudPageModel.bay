/*!
 *  Bayrell Runtime Library 
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.BaseStruct;
use Runtime.Exceptions.RuntimeException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderDriver;
use Runtime.Web.Request;
use Runtime.Web.Table.TableModel;
use Runtime.Web.Dialog.DialogModel;
use Runtime.Web.Form.FormModel;


struct CrudPageModel extends BaseStruct
{
	FormModel form_add = new FormModel();
	FormModel form_edit = new FormModel();
	FormModel filter = new FormModel();
	TableModel table = new TableModel();
	DialogModel dialog_add = new DialogModel();
	DialogModel dialog_edit = new DialogModel();
	DialogModel dialog_delete = new DialogModel();
	Dict foreigns = {};
	Dict params = {};
	
	
	
	/**
	 * Curd Search
	 */
	static async CrudPageModel crudSearch(Dict items, RenderContainer container)
	{
		/* Remote call */
		Dict search_params = static::getCrudSearchParams(container.request);
		items <= data <= search_params;
		RemoteCallAnswer answer = await RenderDriver::remoteBusCall(items, container);
		
		/* Throw exception */
		if (not answer.isSuccess())
		{
			throw new RuntimeException(answer.error_message, answer.error_code);
		}
		
		/* Answer */
		return static::fromAnswer(static::newInstance{}, answer);
	}
	
	
	
	/**
	 * Crud search
	 */
	pure RemoteCallAnswer getCrudSearchParams(Request request)
	{
		Map data = new Map();
		
		if (rtl::exists(request.query))
		{
			string page = request.query.get("page", 1) - 1;
			if (page < 0) page = 0;
			data.set("page", page);
			data.set("limit", 20);
		}
		
		return data.toDict();
	}
	
	
	
	/**
	 * From answer
	 */
	pure CrudPageModel fromAnswer(CrudPageModel model, RemoteCallAnswer answer)
	{
		if (answer.isSuccess())
		{
			model <= table <= rows <= answer.response["items"];
			model <= table <= page <= answer.response["page"];
			model <= table <= pages <= answer.response["pages"];
			model <= table <= limit <= answer.response["limit"];
			model <= foreigns <= answer.response["foreigns"];
		}
		return model;
	}
}