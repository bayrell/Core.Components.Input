/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.lib;
use Runtime.Web.App.PageModel;
use Runtime.Web.App.RemoteCallAnswer;
use Runtime.Web.App.RenderContainer;
use Runtime.Web.App.Request;
use Runtime.Web.App.WebApp;
use Runtime.Web.CRUD.FieldInfo;
use Runtime.Web.CRUD.TableModel;
use Runtime.Web.CRUD.FormModel;
use Runtime.Web.Dialog.DialogModel;


struct CrudPageModel extends PageModel
{
	
	static const string ACTION_SEARCH = "search";
	static const string ACTION_VIEW = "view";
	
	
	/* Crud settings */
	Collection<FieldInfo> fields = [];
	Collection<string> filter_fields = null;
	Collection<string> form_fields = null;
	Collection<string> table_fields = null;
	
	
	/* Components */
	DialogModel dialog_add = new DialogModel();
	DialogModel dialog_edit = new DialogModel();
	DialogModel dialog_delete = new DialogModel();
	FormModel form_add = new FormModel{ "action": FormModel::ACTION_CREATE };
	FormModel form_edit = new FormModel{ "action": FormModel::ACTION_UPDATE };
	TableModel table = new TableModel();
	
	
	
	/**
	 * Add field
	 */
	CrudPageModel addField(Dict item)
	{
		FieldInfo field = null;
		CrudPageModel model = this;
		string field_name = item["api_name"];
		int pos = this.fields.find( lib::equalAttr("api_name", field_name) );
		
		if (pos == -1)
		{
			field = new FieldInfo(item);
			model <= fields <= model.fields.pushIm(field);
		}
		else
		{
			field = this.fields[pos];
			field = field.copy(item);
			model <= fields <= model.fields.setIm(pos, field);
		}
		
		return model;
	}
	
	
	
	/**
	 * Setup filter fields
	 */
	CrudPageModel setFilterFields(Collection fields)
	{
		return this.copy{ "filter_fields": fields };
	}
	
	
	
	/**
	 * Setup form fields
	 */
	CrudPageModel setFormFields(Collection fields)
	{
		return this.copy{ "form_fields": fields };
	}
	
	
	
	/**
	 * Setup table fields
	 */
	CrudPageModel setTableFields(Collection fields)
	{
		return this.copy{ "table_fields": fields };
	}
	
	
	
	/**
	 * Returns field info
	 */
	FieldInfo getFieldInfo(string field_name) => this.fields.findItem( lib::equalAttr("api_name", field_name) );
	
	
	
	/**
	 * Returns primary key by item
	 */
	Dict getPrimaryKey(Dict item)
	{
		Map pk = new Map();
		Collection<FieldInfo> fields = this.fields.filter( lib::equalAttr("primary", true) );
		for (int i=0; i < fields.count(); i++)
		{
			FieldInfo field = fields[i];
			var value = item[field.api_name];
			pk.setValue(field.api_name, value);
		}
		return pk.toDict();
	}
	
	
	
	/**
	 * Returns search params
	 */
	pure Dict getCrudSearchParams(Request request)
	{
		Map data = new Map();
		
		if (rtl::exists(request.query))
		{
			Vector search_filter = new Vector();
			Dict filter = request.query["filter"] |> default Dict null;
			if (filter)
			{
				Collection keys = filter.keys();
				for (int i=0; i<keys.count(); i++)
				{
					string key_name = keys[i];
					search_filter.pushValue([key_name, "=", filter[key_name]]);
				}
				data.setValue("filter", search_filter.toCollection());
			}
			
			string page = request.query.get("page", 1) - 1;
			if (page < 0) page = 0;
			data.setValue("page", page);
			data.setValue("limit", 20);
		}
		
		return data.toDict();
	}
	
	
	
	/**
	 * Search action
	 */
	static async RenderContainer searchAction(RenderContainer container, string object_name)
	{
		/* Get page model */
		TableModel table_model = container.getPageModel("table");
		
		/* Get search params */
		Dict search_params = static::getCrudSearchParams(container.request);
		
		/* Remote call */
		RemoteCallAnswer answer = await container.busCall
		(
			"api://" ~ @.app_name ~ "/" ~ object_name ~ "/core.crud/search/",
			search_params
		);
		
		/* Set crud answer */
		table_model = table_model::setCrudAnswer(table_model, answer);
		
		/* Set page model */
		return container.setPageModelAttr("table", table_model);
	}
	
	
	
	/**
	 * Send api create
	 */
	static async void sendCreate(string crud_object_name, Dict item)
	{
		RemoteCallAnswer answer = await WebApp::busCall
		(
			"api://" ~ @.app_name ~ "/" ~ crud_object_name ~ "/core.crud/create/",
			{
				"item": item,
			}
		);
		
		return answer;
	}
	
	
	
	/**
	 * Send api update
	 */
	static async void sendUpdate(string crud_object_name, Dict pk, Dict item)
	{
		RemoteCallAnswer answer = await WebApp::busCall
		(
			"api://" ~ @.app_name ~ "/" ~ crud_object_name ~ "/core.crud/update/",
			{
				"pk": pk,
				"item": item,
			}
		);
		
		return answer;
	}
	
	
	
	/**
	 * Send api delete
	 */
	static async void sendDelete(string crud_object_name, Dict pk)
	{
		RemoteCallAnswer answer = await WebApp::busCall
		(
			"api://" ~ @.app_name ~ "/" ~ crud_object_name ~ "/core.crud/delete/",
			{
				"pk": pk,
			}
		);
		
		return answer;
	}
}