/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.ModelProxy;
use Runtime.Exceptions.ApiException;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Connection;
use Runtime.ORM.Cursor;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.Bus;
use Runtime.Web.RenderContainer;
use Runtime.Web.Crud.FormModel;
use Runtime.Web.Crud.StructBuilder;
use Runtime.Web.Crud.Rules.CrudRule;
use Runtime.Web.Crud.Rules.Filter;


struct CrudPageModel<T> extends BaseModel
{
	static const string ACTION_INDEX = "index";
	static const string ACTION_ITEM = "item";
	static const string ACTION_ADD = "add";
	static const string ACTION_EDIT = "edit";
	static const string ACTION_DELETE = "delete";
	
	int page = 0;
    int pages = 0;
    Collection<T> items = null;
    Dict dictionary = {};
	Dict item_data = null;
	Dict search_data = null;
	FormModel item_form = new FormModel;
	FormModel save_form = new FormModel;
	FormModel delete_form = new FormModel;
	int error_code = 0;
	string error_message = "";
	string search = "";
	string action = "";
	
	
	/**
	 * Returns api name
	 */
	pure string getApiName() => "";
	
	
	/**
	 * Returns model name
	 */
	pure string getModelName() => "";
	
	
	/**
	 * Returns page type
	 */
	pure string getPageType() => "";
	
	
	/**
	 * Returns struct builder
	 */
	pure StructBuilder getStruct(fn build_fn = null)
	{
		string class_name = static::getModelName();
		string kind = static::getPageType();
		return StructBuilder::build(class_name, kind, build_fn);
	}
	
	
	/**
	 * Returns id name for query
	 */
	pure string getQueryId() => "id";
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action) => "";
	
	
	/**
	 * Set CRUD action
	 */
	CrudPageModel setAction(string action = "") => this.clone({
		"action": action,
	});
	
	
	/**
	 * Set page
	 */
	CrudPageModel setPage(int page = 0) => this.clone({
		"page": page,
	});
	
	
	/**
	 * Returns item model
	 */
	Dict getItemModel()
	{
		if (this.action == "add") return this.save_form;
		else if (this.action == "edit") return this.save_form;
		else if (this.action == "delete") return this.delete_form;
		else if (this.action == "item") return this.item_form;
		return null;
	}
	
	
	/**
	 * Returns crud item post_data
	 */
	Dict getCrudItemPostData()
	{
		FormModel model = this.getItemModel();
		if (model == null) return null;
		
		return {
			"pk": model.item_pk
		};
	}
	
	
	/**
	 * Returns find item model
	 */
	static ModelProxy getItemModelProxy(ModelProxy model)
	{
		string action = model.data().action;
		if (action == "add" or action == "edit") return model.proxy("save_form");
		else if (action == "delete") return model.proxy("delete_form");
		else if (action == "item") return model.proxy("item_form");
		return null;
	}
	
	
	/**
	 * Route before
	 */
	async static CrudPageModel crudRouteBefore(ModelProxy model, RenderContainer container)
	{
		CrudPageModel page_model = model.data();
		ModelProxy model_item = static::getItemModelProxy(model);
		
		if (page_model.action == "add")
		{
			model_item.setAttr("item_pk", null);
		}
		else if (
			page_model.action == "edit" or
			page_model.action == "delete" or
			page_model.action == "item"
		)
		{
			model_item.setAttr("item_pk", null);
			if (container.request.query.has( static::getQueryId() ))
			{
				int id = (int)container.request.query.get( static::getQueryId() );
				model_item.setAttr("item_pk", {
					"id": id,
				});
			}
		}
	}
	
	
	/**
	 * Route after
	 */
	async static CrudPageModel crudRouteAfter(ModelProxy model, RenderContainer container)
	{
	}
	
	
	/**
	 * Event
	 */
	async static void event(ModelProxy model, string action, Dict data)
	{
		return data;
	}
	
	
	/**
	 * Set api result
	 */
	CrudPageModel setApiResult(string action, ApiResult res)
	{
		if (res == null) return this;
		
		CrudPageModel model = this;
		if (res.isSuccess())
		{
			if (action == "crudSearch")
			{
				model = model.copy({
					"items": res["data"]["items"],
					"pages": res["data"]["pages"],
					"page": res["data"]["page"],
				});
			}
			
			else if (action == "crudSearchOne" or action == "crudItem")
			{
				model <= item_form <= model.item_form.setApiResult(action, res);
			}
		}
		
		model <= error_message <= res.getErrorMessage();
		model <= error_code <= res.getErrorCode();
		
		return model;
	}
	
	
	/**
	 * Returns search data
	 */
	Dict getSearchData() => {
		"page": this.page,
	};
	
	
	/**
	 * Search items
	 */
	async static ApiResult crudSearch(ModelProxy model, Dict data = null)
	{
		model.setAttr("search_data", data);
		
		/* Extends search data */
		Dict post_data = model.data().getSearchData();
		if (data != null) post_data = data.concat(data);
		
		/* Process event */
		Dict data = await static::event(model, "crudSearchBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		ApiResult res = await Bus::callApi(
			static::getApiName() ~ ".crud_search", post_data
		);
		
		/* Set api result */
		model.commit("setApiResult", "crudSearch", res);
		
		/* Process event */
		await static::event(model, "crudSearchAfter", {
			"post_data": post_data,
			"res": res
		});
		
		return res;
	}
	
	
	/**
	 * Search items
	 */
	async static ApiResult crudSearchOne(ModelProxy model, Dict data = null)
	{
		model.setAttr("search_data", data);
		
		/* Extends search data */
		Dict post_data = model.data().getSearchData();
		if (data != null) post_data = data.concat(data);
		
		/* Process event */
		Dict data = await static::event(model, "crudSearchBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		ApiResult res = await Bus::callApi(
			static::getApiName() ~ ".crud_search_one", post_data
		);
		
		/* Set api result */
		model.commit("setApiResult", "crudSearchOne", res);
		
		/* Process event */
		await static::event(model, "crudSearchAfter", {
			"post_data": post_data,
			"res": res
		});
		
		return res;
	}
	
	
	/**
	 * Add page
	 */
	async static void crudAdd(ModelProxy model)
	{
		await static::event(model, "crudAddBefore", {});
		
		/* Set api result */
		ModelProxy model_item = static::getItemModelProxy(model);
		if (model_item)
		{
			string class_name = static::getModelName();
			model_item.setAttr("item", rtl::newInstance(class_name));
		}
		
		await static::event(model, "crudAddAfter", {});
	}
	
	
	/**
	 * Find item
	 */
	async static ApiResult crudItem(ModelProxy model, Dict data = null)
	{
		model.setAttr("item_data", data);
		
		/* Get post data */
		CrudPageModel crud_model = model.data();
		Dict post_data = crud_model.getCrudItemPostData();
		if (data != null) post_data = data.concat(data);
		
		/* Process event */
		Dict data = await static::event(model, "crudItemBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		ApiResult res = await Bus::callApi(
			static::getApiName() ~ ".crud_item", post_data
		);
		
		/* Set api result */
		ModelProxy model_item = static::getItemModelProxy(model);
		if (model_item)
		{
			model_item.commit("setApiResult", "crudItem", res);
		}
		
		/* Process after */
		await static::event(model, "crudItemAfter", {
			"post_data": post_data, "res": res
		});
		
		return res;
	}
	
	
	/**
	 * Save form
	 */
	async static ApiResult crudSave(ModelProxy model)
	{
		/* Get post data */
		CrudPageModel crud_model = model.data();
		Dict post_data = crud_model.getCrudItemPostData();
		post_data <= item <= crud_model.save_form.item.toDict();
		
		/* Process before */
		Dict d = await static::event(model, "crudSaveBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		ApiResult res = await Bus::callApi(
			static::getApiName() ~ ".crud_save", post_data
		);
		
		/* Set api result */
		model.proxy(["save_form"]).commit("setApiResult", "crudSave", res);
		
		/* Set pk */
		if (res.isSuccess())
		{
			if (model.data().save_form.item_pk != null)
			{
				model.setAttr("action", "edit");
			}
			else
			{
				model.setAttr("action", "add");
			}
		}
		
		/* Process after */
		await static::event(model, "crudSaveAfter", {
			"post_data": post_data,
			"res": res,
		});
		
		return res;
	}
	
	
	/**
	 * Delete
	 */
	async static ApiResult crudDelete(ModelProxy model)
	{
		/* Get post data */
		CrudPageModel crud_model = model.data();
		Dict post_data = crud_model.getCrudItemPostData();
		
		/* Process before */
		Dict d = await static::event(model, "crudDeleteBefore", {
			"post_data": post_data,
		});
		
		/* Send api */
		ApiResult res = await Bus::callApi(
			static::getApiName() ~ ".crud_delete", post_data
		);
		
		/* Set api result */
		model.proxy(["delete_form"]).commit("setApiResult", "crudDelete", res);
		
		/* Process after */
		await static::event(model, "crudDeleteAfter", {
			"post_data": post_data,
			"res": res,
		});
		
		return res;
	}
	
}
