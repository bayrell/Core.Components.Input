/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;
use Runtime.Web.Response;
use Runtime.Web.Button.Button;
use Runtime.Web.CRUD.CrudEvent;
use Runtime.Web.CRUD.CrudInterface;
use Runtime.Web.CRUD.FieldInfo;
use Runtime.Web.CRUD.FormModel;
use Runtime.Web.Dialog.Dialog;
use Runtime.Web.Dialog.DialogEvent;
use Runtime.Web.Dialog.DialogModel;
use Runtime.Web.Events.ChangeEvent;
use Runtime.Web.Events.MouseClickEvent;


class Form extends Component
{
	
	/**
	 * Returns module name
	 */
	pure string moduleName() => parent::moduleName();
	
	
	
	/**
	 * Returns required components
	 */
	pure Collection<string> components() => 
	[
		classof Button,
		classof Dialog,
	];
	
	
	
	/**
	 * Component css
	 */
	pure string css(Dict<string> vars) => 
		@css{
			%form{
			}
			%form_row{
				padding-bottom: 15px;
			}
			%form_row:last-child{
				padding-bottom: 0px;
			}
			%form_label{
				font-weight: bold;
				padding-bottom: 5px;
			}
			%form_value{}
			%form_value input, %form_value textarea, %form_value select{
				width: 100%;
				padding: 5px 10px;
			}
			%form_value textarea{
				height: 400px;
			}
			%form_buttons{
				text-align: center;
			}
			%form_buttons %(Button)button{
				margin-left: 10px;
				margin-right: 10px;
			}
			%form_result{
				text-align: center;
			}
			%form_result.success{
				color: green;
			}
			%form_result.error{
				color: red;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	pure html render(LayoutModel layout, FormModel model, Dict params, html content) =>
		(model != null) ?
			<div @class='form'>
				{ model != null ? static::renderHeader(layout, model, params, content) : "" }
				{ model != null ? static::renderContent(layout, model, params, content) : "" }
				{ model != null ? static::renderButtons(layout, model, params, content) : "" }
				{ model != null ? static::renderResult(layout, model, params, content) : "" }
				{ model != null ? static::renderFooter(layout, model, params, content) : "" }
			</div>
		: ""
	;
	
	
	
	/**
	 * Render form header
	 */
	pure html renderHeader(LayoutModel layout, FormModel model, Dict params, html content) => "";
	
	
	
	/**
	 * Render form content
	 */
	pure html renderContent(LayoutModel layout, FormModel model, Dict params, html content) =>
		params["fields"].map
		(
			html (string field_name) use (layout, model, params) =>
				static::renderRow(layout, model, params, field_name)
		)
	;
	
	
	
	/**
	 * Render form row
	 */
	pure html renderRow(LayoutModel layout, FormModel model, Dict params, string field_name)
	{
		FieldInfo field = params["struct"][field_name];
		if (field == null) return "";
		
		string class_name = field.form;
		
		return <div @class='form_row'>
			<div @class='form_label'>{ field.label }:</div>
			<div @class='form_value'>
				<{class_name} data-name="enable" @event:ChangeEvent="onItemChange"
					field={ field } value={ model["item"]["enable"] }
				/>
			</div>
		</div>;
	}
	
	
	
	/**
	 * Render form buttons
	 */
	pure html renderButtons(LayoutModel layout, FormModel model, Dict params, html content) =>
		<div @class='form_buttons'>
		{
			params['action'] == "add" ?
				<Button @eventAsync:MouseClickEvent="onButtonClick" data-action="create">Add</Button>
				<Button @eventAsync:MouseClickEvent="onButtonClick" data-action="cancel">Cancel</Button>
			:
				<Button @eventAsync:MouseClickEvent="onButtonClick" data-action="update">Update</Button>
				<Button @eventAsync:MouseClickEvent="onButtonClick" data-action="delete">Delete</Button>
		}
		</div>
	;
	
	
	
	/**
	 * Render form result
	 */
	pure html renderResult(LayoutModel layout, FormModel model, Dict params, html content) =>
		<div @class='form_row form_result' class={ static::getResultClass(model) }>
			{ model.message }
			{ model.success }
			{ model.error }
		</div>
	;
	
	
	
	/**
	 * Render form footer
	 */
	pure html renderFooter(LayoutModel layout, FormModel model, Dict params, html content) => "";
	
	
	
	/**
	 * Returns result class
	 */
	pure string getResultClass(FormModel model)
	{
		if (model.success != "") return "success";
		if (model.error != "") return "error";
		return "";
	}
	
	
	
	#ifdef FRONTEND then
	
	/**
	 * Button click
	 */
	async void onButtonClick(MouseClickEvent e)
	{
		e.cancel();
		
		/* Send crud event */
		string action = e.instance.params["data-action"];
		this.signal
		(
			new CrudEvent
			{
				"event": action,
				"item": this.model()["item"],
			}
		);
	}
	
	
	
	/**
	 * Change item
	 */
	async void onItemChange(ChangeEvent e)
	{
		string name = e.instance.params["data-name"];
		this.signal
		(
			new CrudEvent
			{
				"event": CrudEvent::ACTION_CHANGE,
				"item": this.model()["item"],
				"field_name": name,
				"value": e.value,
			}
		);
	}
	
	
	#endif
	
}
