<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.CRUD.Table" extends="Runtime.Web.Component" 
	module="Runtime.Web.CRUD" model="Runtime.Web.CRUD.TableModel"
>

<use name="Runtime.Core.Message" />
<use name="Runtime.Web.ListenerCallback" />
<use name="Runtime.Web.App.LayoutModel" />
<use name="Runtime.Web.App.RemoteCallAnswer" />
<use name="Runtime.Web.CRUD.CrudPageModel" />
<use name="Runtime.Web.CRUD.CrudSettings" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.Events.SignalEvent" />
<use name="Runtime.Web.Input.Button" />


<style>
.table{
	border-collapse: collapse;
	border: 1px ${ vars["colors", "default", "border"] } solid;
	margin-top: 10px;
}
.td, .th{
	border: 1px ${ vars["colors", "default", "border"] } solid;
	padding: 5px;
	text-align: center;
	font-size: ${ vars["font", "size"] };
}
.row:hover td{
	background-color: ${ vars["colors", "default", "hover-background"] };
	color: ${ vars["colors", "default", "hover-text"] };
}
.td-edit-buttons{
	margin-left: -2px;
	margin-right: -2px;
}
.td-edit-buttons .button, .td-edit-buttons %(Button)button{
	margin-left: 2px;
	margin-right: 2px;
}
</style>


<script>


/**
 * Returns crud settings
 */
pure CrudSettings getCrudSettings
(
	LayoutModel layout, Collection model_path, int index, FieldInfo field
)
{
	TableModel model = layout.getModel(model_path);
	Dict row = model["rows", index];
	
	/* Create object */
	CrudSettings crud_settings = new CrudSettings
	{
		"current_class_name": static::getCurrentClassName(),
		"field_class_name": field.class_name,
		"kind": "table",
		"field": field,
		"index": index,
		"item": row,
		"attrs":
		{
			"name": field.api_name,
			"value": row[ field.api_name ],
			"@model": ["rows", index, field.api_name],
		},
	};
	
	/* Custom crud page settings */
	if (field.crud_settings != null)
	{
		fn f = field.crud_settings;
		crud_settings = f(layout, crud_settings);
	}
	
	/* Return result */
	return crud_settings;
}

</script>


<template name="render">
	
	<table class="table" @key="table">
		%render static::renderHeader(layout, model_path);
		%render static::renderRows(layout, model_path);
	</table>
	
</template>


<template name="renderRows" args="LayoutModel layout, Collection model_path">
	
	%set TableModel model = layout.getModel(model_path);
	%if (model != null and model.rows != null)
	{
		%for (int i=0; i<model.rows.count(); i++)
		{
			%render static::renderRow(layout, model_path, i);
		}
	}
	
</template>


<template name="renderHeader" args="LayoutModel layout, Collection model_path">
	
	%set CrudPageModel page_model = layout.getPageModel();
	%set string page_class = layout.page_class;
	
	%set fn render_label = null;
	%if (rtl::method_exists(page_class, "renderLabel"))
	{
		%set render_label = rtl::method(page_class, "renderLabel");
	}
	
	%set fn render_label_style = null;
	%if (rtl::method_exists(page_class, "renderLabelStyle"))
	{
		%set render_label_style = rtl::method(page_class, "renderLabelStyle");
	}
	
	%if (page_model.table_fields != null)
	{
		<tr class="header">
		%for (int i=0; i<page_model.table_fields.count(); i++)
		{
			%set string field_name = page_model.table_fields[i];
			%set FieldInfo field = page_model.getFieldInfo(field_name);
			
			%set string label_style = "";
			%if (render_label_style != null)
			{
				%set label_style = render_label_style(layout, field, "table");
			}
			
			<th class="th" class={ "th--" ~ field_name } @key={ "th-" ~ field_name }
				style={ label_style } data-name={ field_name }
			>
				
				%if (render_label != null)
				{
					%render render_label(layout, field, "table");
				}
				
				%else
				{
					{ field["label"] ? field["label"] : field["label"] }
				}
				
			</th>
		}
		</tr>
	}
	
</template>


<template name="renderRow" args="LayoutModel layout, Collection model_path, int index">
	
	%set CrudPageModel page_model = layout.getPageModel();
	%set TableModel model = layout.getModel(model_path);
	%set Dict row = model.rows[index];
	
	%if (page_model.table_fields != null)
	{
		<tr class="row" data-index={ index } @key={ "tr-" ~ index }>
		%for (int i=0; i<page_model.table_fields.count(); i++)
		{
			%set string field_name = page_model.table_fields[i];
			%set FieldInfo field = page_model.getFieldInfo(field_name);
			
			<td class="td" class={ "td-" ~ field_name } data-name={ field_name } @key={ "td-" ~ field_name } >
				{ static::renderCell(layout, model_path, index, row, field) }
			</td>
		}
		</tr>
	}
	
</template>


<template name="renderCell"
	args="LayoutModel layout, Collection model_path, int index, Dict row, FieldInfo field"
>
	%set string page_class = layout.page_class;
	
	%set CrudSettings crud_settings = static::getCrudSettings(layout, model_path, index, field);
	%set string field_class_name = crud_settings.field_class_name;
	
	<!-- Render Field -->
	%set bool crud_show = crud_settings.show;
	%if (crud_show)
	{
		%render rtl::methodApply(page_class, "renderField", [layout, crud_settings]);
	}
	
</template>



<script>


/**
 * Create widget
 */
void onCreate()
{
	parent::onCreate();
	
	/* Add SignalEvent listener */
	this.catchEvent( classof SignalEvent, this.getParentComponent(), "onCatchSignal" );
}



/**
 * Catch signal
 */
async void onCatchSignal(Message<SignalEvent> msg, var listener)
{
	SignalEvent signal = msg.data;
}



/**
 * On signal
 */
async void onSignal(Message<SignalEvent> msg, ListenerCallback item)
{
	SignalEvent signal = msg.data;
	
	/* Get model */
	CrudPageModel page_model = this.getPageModel();
	TableModel model = this.model();
	
	/* Reload */
	if (signal.command == "reload")
	{
		/* Send update action */
		RemoteCallAnswer answer = await page_model::sendSearch(page_model, {});
		
		/* Set crud answer */
		this.updateModel("setCrudAnswer", answer);
		this.repaint();
	}
	
	/* Set item by pk */
	else if (signal.command == "setItem")
	{
		Dict pk = signal["params", "pk"] |> default Dict null;
		Dict item = signal["params", "item"] |> default Dict null;
		if (pk and item)
		{
			this.updateModel("setItem", pk, item);
			this.repaint();
		}
	}
	
	/* Remove item by pk */
	else if (signal.command == "removeItem")
	{
		Dict pk = signal["params", "pk"] |> default Dict null;
		if (pk)
		{
			this.updateModel("removeItem", pk, item);
			this.repaint();
		}
	}
	
	await parent::onSignal(msg, item);
}

</script>


</class>