/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud;

use Runtime.BaseObject;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.LayoutModel;
use Runtime.Widget.WidgetResultModel;


class CrudApiStorage extends BaseObject
{
	string api_name = "";
	
	Map post_data = {};
	Map item = {};
	Map item_pk = null;
	Vector items = null;
	int page = 0;
	int pages = 0;
	int limit = 10;
	
	string foreign_key = null;
	var foreign_value = null;
	
	LayoutModel layout = null;
	WidgetResultModel result = new WidgetResultModel;
	
	
	/**
	 * Constructor
	 */
	void constructor(LayoutModel layout, string object_name)
	{
		parent();
		this.layout = layout;
		this.api_name = object_name ~ "::crud";
	}
	
	
	/**
	 * Set api result
	 */
	void setApiResult(ApiResult res, string action = "")
	{
		if (res.data.has("item"))
		{
			this.setItem(res.data["item"]);
		}
		if (res.data.has("pk"))
		{
			this.setPrimaryKey(res.data["pk"]);
		}
		if (res.data.has("items"))
		{
			this.setItems(res.data["items"]);
		}
		if (res.data.has("limit"))
		{
			this.setLimit(res.data["limit"]);
		}
		if (res.data.has("page"))
		{
			this.setPage(res.data["page"]);
		}
		if (res.data.has("pages"))
		{
			this.setPages(res.data["pages"]);
		}
		this.result.setApiResult(res);
		
		if (action == "item" and this.result.isSuccess())
		{
			this.result.clear();
		}
	}
	
	
	/**
	 * Set items
	 */
	void setItems(Vector items)
	{
		this.items = items;
	}
	
	
	/**
	 * Set item
	 */
	void setItem(Map item)
	{
		this.item = item;
	}
	
	
	/**
	 * Set primary key
	 */
	void setPrimaryKey(Map pk)
	{
		this.item_pk = pk;
	}
	
	
	/**
	 * Set limit
	 */
	void setLimit(int limit)
	{
		this.limit = limit;
	}
	
	
	/**
	 * Set page
	 */
	void setPage(int page)
	{
		this.page = page;
	}
	
	
	/**
	 * Set pages
	 */
	void setPages(int pages)
	{
		this.pages = pages;
	}
	
	
	/**
	 * Clear
	 */
	void clear()
	{
		this.item = {};
		this.item_pk = null;
		this.result.clear();
	}
	
	
	/**
	 * Process frontend data
	 */
	void processFrontendData(Serializer serializer, Map data)
	{
		serializer.process(this, "item", data);
		serializer.process(this, "item_pk", data);
		serializer.process(this, "items", data);
		serializer.process(this, "page", data);
		serializer.process(this, "pages", data);
		serializer.process(this, "limit", data);
		serializer.process(this, "result", data);
	}
	
	
	/**
	 * Set post data
	 */
	void setPostData(string key, string value)
	{
		this.post_data.set(key, value);
	}
	
	
	/**
	 * Set foreign key
	 */
	void setForeignKey(string foreign_key, var foreign_value)
	{
		this.foreign_key = foreign_key;
		this.foreign_value = foreign_value;
	}
	
	
	/**
	 * Merge post data
	 */
	Map mergePostData(Map post_data)
	{
		post_data = post_data.concat(this.post_data);
		
		if (this.foreign_key != null)
		{
			post_data.set(this.foreign_key, this.foreign_value);
			if (post_data.has("item"))
			{
				post_data.get("item").set(this.foreign_key, this.foreign_value);
			}
		}
		
		return post_data;
	}
	
	
	/**
	 * Load data from api
	 */
	async ApiResult doSearch(Dict post_data = null)
	{
		if (post_data == null) post_data = {};
		post_data = post_data.concat({
			"page": this.page,
			"pages": this.pages,
		});
		post_data = this.mergePostData(post_data);
		ApiResult res = await this.layout.callApi({
			"api_name": this.api_name,
			"method": "actionSearch",
			"data": post_data
		});
		this.setApiResult(res, "search");
		return res;
	}
	
	
	/**
	 * Load item from api
	 */
	async ApiResult doItem(Dict post_data = null)
	{
		if (post_data == null) post_data = {};
		post_data = post_data.concat({
			"pk": this.item_pk,
		});
		post_data = this.mergePostData(post_data);
		ApiResult res = await this.layout.callApi({
			"api_name": this.api_name,
			"method": "actionItem",
			"data": post_data
		});
		this.setApiResult(res, "item");
		return res;
	}
	
	
	/**
	 * Save data
	 */
	async ApiResult doSave(Dict post_data = null)
	{
		if (post_data == null) post_data = {};
		post_data = post_data.concat({
			"item": this.item,
			"pk": this.item_pk,
		});
		post_data = this.mergePostData(post_data);
		ApiResult res = await this.layout.callApi({
			"api_name": this.api_name,
			"method": "actionSave",
			"data": post_data
		});
		this.setApiResult(res, "save");
		return res;
	}
	
	
	/**
	 * Do delete
	 */
	async ApiResult doDelete(Dict post_data = null)
	{
		if (post_data == null) post_data = {};
		post_data = post_data.concat({
			"pk": this.item_pk,
		});
		post_data = this.mergePostData(post_data);
		ApiResult res = await this.layout.callApi({
			"api_name": this.api_name,
			"method": "actionDelete",
			"data": post_data
		});
		this.setApiResult(res, "delete");
		return res;
	}
}