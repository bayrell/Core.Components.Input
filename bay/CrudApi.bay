/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.rtl;
use Runtime.lib;
use Runtime.BaseObject;
use Runtime.Exceptions.ApiException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.Query;
use Runtime.ORM.QueryFilter;
use Runtime.Web.CRUD.Rules.Rule;


class CrudApi extends BaseObject
{	
	string action = "";
	RemoteCallAnswer answer = null;
	RemoteCallRequest request = null;
	public Collection<Rule> _rules = null;
	
	/* Search */
	Dict find = null;
	Query q = null;
	int page = 0;
	int pages = 0;
	int total = 0;
	int limit = 100;
	Collection<Dict> items = null;
	Collection filter = null;
	
	/* Save */
	Map<Vector<string>> fields_errors = new Map();
	Dict pk = null;
	Dict item = null;
	Dict new_item = null;
	Dict old_item = null;
	bool is_success = false;
	
	
	/**
	 * Returns current rules
	 */
	Collection<Rule> rules() => [];
	
	
	
	/**
	 * Object name
	 */
	string getObjectName() => "";
	
	
	
	/**
	 * Force delete items
	 */
	bool isForceDelete() => true;
	
	
	
	/**
	 * Returns current rules
	 */
	Collection<Rule> getRules()
	{
		if (this._rules == null)
		{
			this._rules = this.rules();
		}
		return this._rules;
	}
	
	
	
	/**
	 * Returns crud table name
	 */
	bool isSuccess() => this.is_success;
	
	
	
	/**
	 * Returns true if request is search
	 */
	bool isSearch() => this.action == "search";
	
	
	
	/**
	 * Returns true if request is get item
	 */
	bool isGetItem() => this.action == "getItem";
	
	
	
	/**
	 * Returns true if request is create
	 */
	bool isCreate() => this.action == "create";
	
	
	
	/**
	 * Returns true if request is update
	 */
	bool isUpdate() => this.action == "update";
	
	
	
	/**
	 * Returns true if request is delete
	 */
	bool isDelete() => this.action == "delete";
	
	
	
	/**
	 * Returns true if request is create, update or delete
	 */
	bool isModify() =>
		this.action == "create" or
		this.action == "update" or
		this.action == "delete"
	;
	
	
	
	/**
	 * Is crud request
	 */
	bool isCRUD() =>
		this.action == "search" or
		this.action == "create" or
		this.action == "update" or
		this.action == "delete"
	;
	
	
	
	/**
	 * Returns default filter
	 */
	Collection<QueryFilter> getDefaultFilter() =>
	[
	];
	
	
	
	/**
	 * Returns default limit
	 */
	int getDefaultLimit() => 10;
	
	
	
	/**
	 * Returns maximum limit
	 */
	Collection<Collection<string>> getMaxLimit() => 1000;
	
	
	
	/**
	 * Returns default order
	 */
	Collection<Collection<string>> getDefaultOrder() =>
	[
		["id", "desc"]
	];
	
	
	
	/**
	 * Returns search order
	 */
	Collection<Collection<string>> getSearchOrder() => this.getDefaultOrder();
	
	
	
	/**
	 * Init request
	 */
	async void init(string action, RemoteCallRequest request, RemoteCallAnswer answer)
	{
		if (action == "search")
		{
			this.action = "search";
			this.answer = answer;
			this.request = request;
			this.page = request.data["page"] |> default int 0;
			this.filter = request.data["filter"] |> default Collection null;
			this.limit = request.data["limit"] |> default int this.getDefaultLimit();
			if (this.limit > this.getMaxLimit()) this.limit = this.getMaxLimit();
		}
		else if (action == "create")
		{
			this.action = "create";
			this.answer = answer;
			this.request = request;
			this.item = request.data["item"] |> default Dict {};
		}
		else if (action == "update")
		{
			this.action = "update";
			this.answer = answer;
			this.request = request;
			this.pk = request.data["pk"] |> default Dict {};
			this.item = request.data["item"] |> default Dict {};
		}
		else if (action == "delete")
		{
			this.action = "delete";
			this.answer = answer;
			this.request = request;
			this.pk = request.data["pk"] |> default Dict {};
		}
		
		Collection<Rule> rules = this.getRules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			await rule.init(this);
		}
	}
	
	
	
	/**
	 * After
	 */
	async void after()
	{
		Collection<Rule> rules = this.getRules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			await rule.after(this);
		}
	}
	
	
	
	/**
	 * Returns true if can query
	 */
	async bool canQuery()
	{
		return true;
	}
	
	
	
	/**
	 * Before query
	 */
	async void beforeQuery()
	{
		Collection<Rule> rules = this.getRules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			await rule.beforeQuery(this);
		}
	}
	
	
	
	/**
	 * After query
	 */
	async void afterQuery()
	{
		Collection<Rule> rules = this.getRules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			await rule.afterQuery(this);
		}
	}
	
	
	
	/**
	 * Convert item before save to database
	 */
	async Dict convertItem(Dict old_item)
	{
		Dict new_item = old_item;
		Collection<Rule> rules = this.rules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			new_item = await rule.convertItem(this, new_item, old_item);
		}
		return new_item;
	}
	
	
	
	/**
	 * Process item before response
	 */
	async Dict processItem(Dict old_item)
	{
		Dict new_item = old_item;
		Collection<Rule> rules = this.getRules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			new_item = await rule.processItem(this, new_item, old_item);
		}
		return new_item;
	}
	
	
	
	/**
	 * Patch item before database query
	 */
	async Dict patchItem(Dict item) => item;
	
	
	
	/**
	 * Create response
	 */
	async Dict createResponse()
	{
		Dict response = {};
		
		if (this.action == "search")
		{
			response =
			{
				"action": this.action,
				"filter": this.filter,
				"page": this.page,
				"limit": this.limit,
				"total": this.total,
				"pages": this.pages,
				"options": {},
			};
		}
		else if (this.action == "getItem")
		{
			response =
			{
				"action": this.action,
				"pk": this.pk,
				"options": {},
			};
		}
		else if (this.action == "create")
		{
			response =
			{
				"action": this.action,
				"pk": this.pk,
				"item": this.item,
			};
		}
		else if (this.action == "update")
		{
			response =
			{
				"action": this.action,
				"pk": this.pk,
				"item": this.item,
			};
		}
		else if (this.action == "delete")
		{
			response =
			{
				"action": this.action,
				"pk": this.pk,
			};
		}
		
		/* Process items */
		if (this.action == "search")
		{
			Vector new_items = new Vector();
			for (int i=0; i<this.items.count(); i++)
			{
				Dict row = this.items[i];
				row = await this.processItem(row);
				new_items.pushValue(row);
			}
			response <= items <= new_items.toCollection();
		}
		else if (this.action == "getItem")
		{
			Dict new_item = this.new_item;
			
			/* Process item */
			if (new_item)
			{
				new_item = await this.processItem(new_item);
			}
			
			/* Set response */
			response <= item <= new_item;
		}
		else if (this.action == "create" or this.action == "update" or this.action == "delete")
		{
			Dict new_item = this.new_item
			Dict old_item = this.old_item;
			
			/* Process item */
			if (old_item != null)
			{
				old_item = await this.processItem(old_item);
			}
			if (new_item != null)
			{
				if (new_item != this.old_item)
				{
					new_item = await this.processItem(new_item);
				}
				else
				{
					new_item = old_item;
				}
			}
			
			/* Set response */
			response <= old_item <= old_item;
			response <= new_item <= new_item;
			if (this.action == "delete")
			{
				response <= item <= old_item;
			}
		}
		
		/* Rules */
		Collection<Rule> rules = this.rules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			response = await rule.createResponse(this, response);
		}
		
		return response;
	}
	
	
	
	/**
	 * Returns search filter
	 */
	Collection<QueryFilter> getSearchFilter()
	{
		if (this.filter == null) return this.getDefaultFilter();
		if (not (this.filter instanceof Collection)) return this.getDefaultFilter();
		
		/* Get search filter */
		Collection<QueryFilter> filter = this.filter
			|> .map
			(
				QueryFilter (Collection item)
				{
					if (not (item instanceof Collection)) return null;
					if (item.count() != 3) return null;
					
					string field_name = item[0] |> default string "";
					string op = item[1] |> default string "";
					primitive value = item[2];
					
					if (field_name == "") return null;
					if (op == "") return null;
					
					return new QueryFilter
					{
						"op": op,
						"value": value,
						"field_name": field_name,
					};
				}
				
			)
			|> .filter
			(
				bool (var item)
				{
					if (item == null) return false;
					return true;
				}
			)
		;
		
		/* Extend search filter */
		Collection<Rule> rules = this.rules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			filter = rule.extendSearchFilter(this, filter);
		}
		
		return filter;
	}
	
	
	
	/**
	 * Extend search filter
	 */
	Collection<list> extendSearchFilter(Collection<list> filter) => filter;
	
	
	
	/**
	 * Build query
	 */
	Query extendSearchQuery(Query q)
	{
		Collection<Collection<string>> filter = this.getSearchFilter() |> this.extendSearchFilter;
		
		q = q
			.setFilter( filter )
			.page( this.page, this.limit )
			.order( this.getSearchOrder() )
		;
		
		if (not this.isForceDelete())
		{
			q = q.addFilter(["is_deleted", "=", 0]);
		}
		
		return q;
	}
	
	
	
	/**
	 * Find existing item for create
	 */
	async Dict findItemByKey(Dict pk)
	{
		/* Get ORM object name */
		string object_name = this.getObjectName();
		
		/* Get filter */
		Collection<QueryFilter> filter = Query::getPrimaryKey(object_name, pk)
			|> Query::getFilter
			|> this.extendSearchFilter
		;
		if (filter == null) return null;
		
		/* Get query */
		Query q = new Query()
			|> .selectObjects(object_name)
			|> .setFilter(filter)
			|> .limit(1)
		;
		
		/* Execute query */
		Dict item = await q.one();
		
		return item;
	}
	
	
	
	/**
	 * Find existing item for create
	 */
	async Dict findItemForCreating() => null;
	
	
	
	/**
	 * Validate form
	 */
	async bool validateForm()
	{
		bool res = true;
		
		Collection<Rule> rules = this.rules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			string error = rule.validate(this, this.item);
			if (error != "")
			{
				this.addFieldError( rule.api_name, _("Runtime.Web.CRUD", error) );
				res = false;
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Validate
	 */
	async void validate()
	{
		if (this.action == "create" or this.action == "update")
		{
			list res = await this.validateForm();
			if (not res)
			{
				throw new ApiException
				(
					_("Runtime.Web.CRUD", "Validation fields error"),
					rtl::ERROR_VALIDATION,
					{
						"fields_errors": this.fields_errors
					}
				);
			}
		}
	}
	
	
	
	/**
	 * Search query
	 */
	async void searchQuery()
	{
		/* Get ORM object name */
		string object_name = this.getObjectName();
		
		Query q = new Query()
			|> .selectObjects(object_name)
			|> .calcFoundRows(true)
		;
		
		/* Extend search query */
		q = this.extendSearchQuery(q);
		
		/* Get items */
		Cursor cursor = await q.execute();
		Connection conn = cursor.getConnection();
		
		/* Fetch items */
		Vector items = new Vector();
		while (true)
		{
			Dict row = await cursor.fetch();
			if (row == null)
			{
				break;
			}
			row = q.fromDatabase(conn, row);
			items.pushValue(row);
		}
		
		/* Result */
		this.q = q;
		this.items = items.toCollection();
		this.total = await cursor.foundRows();
		this.pages = (this.limit > 0) ? rtl::ceil(this.total / this.limit) : 0;
		
		/* Close cursor */
		await cursor.close();
	}
	
	
	
	/**
	 * Search
	 */
	async void doSearch()
	{
		/* Validate */
		await this.validate();
		
		/* Can query */
		bool res = await this.canQuery();
		if (res)
		{
			/* Before query */
			await this.beforeQuery();
			
			/* Search query */
			await this.searchQuery();
			
			/* After query */
			await this.afterQuery();
			
			/* Set success */
			this.is_success = true;
		}
		
		/* Create response */
		Dict response = await this.createResponse();
		this.answer = this.answer::success(this.answer, response);
	}
	
	
	
	/**
	 * Search api action
	 */
	static async list searchAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Init api */
		await api.init("search", request, answer);
		
		/* Search */
		await api.doSearch();
		
		/* After query */
		await api.after();
		
		return [api.request, api.answer];
	}
	
	
	
	/**
	 * Create query
	 */
	async void createQuery()
	{
		/* Get ORM object name */
		string object_name = this.getObjectName();
		
		/* Convert item */
		Dict update_item = await this.convertItem(this.item);
		
		/* Patch item */
		update_item = await this.patchItem(update_item);
		
		/* Insert item */
		Cursor cursor = await Query::insertObject
		(
			object_name,
			update_item
		);
		
		/* Close cursor */
		await cursor.close();
		
		/* Find new item */
		this.new_item = await this.findItemByKey(this.pk);
	}
	
	
	
	/**
	 * Create
	 */
	async void doCreate()
	{
		/* Check if item exists */
		this.old_item = this.findItemForCreating();
		if (this.old_item)
		{
			/* Get ORM object name */
			string object_name = this.getObjectName();
			
			/* Set update */
			this.action = "update";
			this.pk = Query::getPrimaryKey(object_name, this.old_item)
			
			/* Update existing item */
			this.doUpdate();
			
			return;
		}
		
		/* Validate */
		await this.validate();
		
		/* Can query */
		bool res = await this.canQuery();
		if (res)
		{
			/* Before query */
			await this.beforeQuery();
			
			/* Create query */
			await this.createQuery();
			
			/* After query */
			await this.afterQuery();
			
			this.is_success = true;
		}
		
		/* Create response */
		Dict response = await this.createResponse();
		this.answer = this.answer::success(this.answer, response);
	}
	
	
	
	/**
	 * Create api action
	 */
	static async list createAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Init api */
		await api.init("create", request, answer);
		
		/* Search */
		await api.doCreate();
		
		/* After query */
		await api.after();
		
		return [api.request, api.answer];
	}
	
	
	
	/**
	 * Update query
	 */
	async void updateQuery()
	{
		Dict pk = this.pk;
		Dict item = this.item;
		
		/* Convert item */
		Dict update_item = await this.convertItem(item);
		if (update_item.keys().count() == 0)
		{
			return;
		}
		
		/* Patch item */
		update_item = await this.patchItem(update_item);
		
		/* Get diff */
		update_item = Query::getDiff(this.old_item, update_item);
		
		/* Get ORM object name */
		string object_name = this.getObjectName();
		
		/* Skip if no change */
		if (update_item.keys().count() == 0)
		{
			return;
		}
		
		/* Update */
		Cursor cursor = await Query::updateObject(object_name, this.old_item, update_item);
		
		/* Close cursor */
		await cursor.close();
		
		/* Find new item */
		this.new_item = await this.findItemByKey(this.pk);
	}
	
	
	
	/**
	 * Update
	 */
	async void doUpdate()
	{
		/* Validate */
		await this.validate();
		
		/* Find item */
		if (this.old_item == null) this.old_item = await this.findItemByKey(this.pk);
		this.new_item = this.old_item;
		if (this.old_item == null)
		{
			throw new ApiException
			(
				_("Runtime.Web.CRUD", "Item not found"),
				rtl::ERROR_ITEM_NOT_FOUND
			);
		}
		
		/* Can query */
		bool res = await this.canQuery();
		if (res)
		{
			/* Before query */
			await this.beforeQuery();
			
			/* Update query */
			await this.updateQuery();
			
			/* After query */
			await this.afterQuery();
			
			this.is_success = true;
		}
		
		/* Create response */
		Dict response = await this.createResponse();
		this.answer = this.answer::success(this.answer, response);
	}
	
	
	
	/**
	 * Update api action
	 */
	static async list updateAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Init api */
		await api.init("update", request, answer);
		
		/* Search */
		await api.doUpdate();
		
		/* After query */
		await api.after();
		
		return [api.request, api.answer];
	}
	
	
	
	/**
	 * Delete query
	 */
	async void deleteQuery()
	{
		/* Get ORM object name */
		string object_name = this.getObjectName();
		
		/* Force delete */
		if (this.isForceDelete())
		{
			/* Delete */
			Cursor cursor = await Query::deleteObject(object_name, this.old_item);
			
			/* Close cursor */
			await cursor.close();
		}
		
		/* Move to deleted */
		else
		{
			/* Update */
			Cursor cursor = await Query::updateObject
			(
				object_name,
				this.old_item,
				{
					"is_deleted": true,
				}
			);
			
			/* Close cursor */
			await cursor.close();
		}
	}
	
	
	
	/**
	 * Delete
	 */
	async void doDelete()
	{
		/* Validate */
		await this.validate();
		
		/* Find item */
		this.old_item = await this.findItemByKey(this.pk);
		if (this.old_item == null)
		{
			throw new ApiException("Item not found", rtl::ERROR_ITEM_NOT_FOUND);
		}
		
		/* Can query */
		bool res = await this.canQuery();
		if (res)
		{
			/* Before query */
			await this.beforeQuery();
			
			/* Delete query */
			await this.deleteQuery();
			
			/* After query */
			await this.afterQuery();
			
			this.is_success = true;
		}
		
		/* Create response */
		Dict response = await this.createResponse();
		this.answer = this.answer::success(this.answer, response);
	}
	
	
	
	/**
	 * Delete api action
	 */
	static async list deleteAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Init api */
		await api.init("delete", request, answer);
		
		/* Search */
		await api.doDelete();
		
		/* After query */
		await api.after();
		
		return [api.request, api.answer];
	}
	
}