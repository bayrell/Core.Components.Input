/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.lib;
use Runtime.CoreStruct;
use Runtime.MessageRPC;
use Runtime.Monad;
use Runtime.RuntimeConstant;
use Runtime.RuntimeUtils;
use Runtime.Exceptions.ApiException;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Cursor;
use Runtime.ORM.ORMProviderInterface;
use Runtime.ORM.QueryBuilder;
use Runtime.Web.CRUD.CrudInterface;
use Runtime.Web.CRUD.FieldInfo;


struct CrudApi extends CoreStruct implements CrudInterface
{
	
	string action = "";
	MessageRPC msg = null;
	QueryBuilder q = null;
	Dict item = null;
	
	
	#ifdef BACKEND then
	
	
	/**
	 * Returns crud model name
	 */
	pure string crudModelName() => "";
	
	
	
	/**
	 * Returns crud table name
	 */
	pure string crudTableName() => "";
	
	
	
	/**
	 * Api init
	 */
	pure async fn<QueryBuilder, QueryBuilder> apiInit(CrudApi api) => api;
	
	
	
	/**
	 * Build fields
	 */
	pure memorize Dict<FieldInfo> buildFields()
	{
		string crud_model = static::crudModelName();
		fn buildFields = rtl::method(crud_model, "buildFields");
		return buildFields();
	}
	
	
	
	/**
	 * Add validate error
	 */
	pure fn<Dict, Dict> addValidateError(string field_name, string error) =>
		Dict<Collection<string>> (Dict<Collection<string>> response) use (field_name, error)
		{
			Collection<string> items = response[field_name];
			if (items == null) items = [];
			items = items.pushIm(error);
			return response.setIm(field_name, items);
		}
	;
	
	
	
	/**
	 * Validate field
	 */
	pure string validateField(CrudApi api, Dict item, FieldInfo field)
	{
		Collection<string> error = [];
		var value = item[field.api_name];
		if (field.required and (value === null or value === ""))
		{
			error = error.pushIm( _("Runtime.Web.CRUD", "This field must be filled") );
		}
		
		return error;
	}
	
	
	
	/**
	 * Validate item
	 */
	static fn<Dict, Dict> validate(CrudApi api) =>
		async Dict<string> (Dict item) use (api)
		{
			bool success = true;
			Dict<Collection<string>> response = {};
			
			/* Validate fields */
			Dict<FieldInfo> fields = static::buildFields();
			fields.each
			(
				void (FieldInfo field, string key) use (api, item, success, response)
				{
					Collection<string> error = static::validateField(api, item, field);
					if (error.count() > 0)
					{
						success = false;
						response = response.setIm(field.api_name, error);
					}
				}
			);
			
			if (not success)
			{
				return response.toDict();
			}
			
			return null;
		}
	;
	
	
	
	/**
	 * Filter item value
	 */
	pure fn<bool, Dict> filterItem(CrudApi api, FieldInfo field) =>
		async bool (Dict item) use (api, field)
		{
			if (field.api_name == "id") return false;
			return true;
		}
	;
	
	
	
	/**
	 * Filter item value
	 */
	pure fn<var, Dict> filterItemValue(CrudApi api, FieldInfo field) =>
		async var (Dict item) use (api, field)
		{
			var value = item[field.api_name];
			if (value === null or value === "")
			{
				value = field.default_value;
			}
			return value;
		}
	;
	
	
	
	/**
	 * Filter item
	 */
	static async Dict filter(CrudApi api) =>
		async Dict (Dict item) use (api)
		{
			Dict new_item = {};
			
			Dict<FieldInfo> fields = static::buildFields();
			Collection<string> keys = fields.keys();
			
			for (int i=0; i<keys.count(); i++)
			{
				FieldInfo field = fields[ keys[i] ];
				
				bool flag = item -> static::filterItem(api, field);
				if (flag)
				{
					var new_value = item -> await static::filterItemValue(api, field);
					new_item = new_item.setIm(field.api_name, new_value);
				}
			}
			
			return new_item;
		}
	;
	
	
	
	/**
	 * Convert item from database
	 */
	pure fn<Dict, Dict> fromDatabase(CrudApi api) =>
		Dict (Dict item) => item
	;
	
	
	
	/**
	 * Convert item to database
	 */
	pure fn<Dict, Dict> toDatabase(CrudApi api) =>
		Dict (Dict item) => item
	;
		
		
	
	/**
	 * Build search query
	 */
	pure QueryBuilder buildSearchQuery(CrudApi api)
	{
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		string table_name = static::crudTableName();
		string crud_model = static::crudModelName();
		
		fn default_order = rtl::method(crud_model, "getDefaultTableOrder");
		
		QueryBuilder q = new QueryBuilder()
			-> method select(table_name, p.prefix)
			-> method offset(0, 100)
			-> method order( default_order() )
		;
		
		return q;
	}
	
	
	
	/**
	 * Search
	 */
	static async MessageRPC search(MessageRPC msg)
	{
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		Collection<Dict> res = null;
		
		CrudApi api = static::newInstance
		{
			"action": "search",
			"msg": msg,
		};
		
		/* Build query */
		api <= q <= static::buildSearchQuery(api);
		
		/* Init api */
		api = await static::apiInit(api);
		
		/* Execute query */
		Cursor cursor = p -> await method execute(api.q);
		res = await cursor.fetchAll( static::fromDatabase(api) );
		cursor.close();
		
		return msg -> method success{ "items": res };
	}
	
	
	
	/**
	 * Get by ID
	 */
	static async MessageRPC getByID(MessageRPC msg)
	{
		return msg;
	}
	
	
	
	/**
	 * Create
	 */
	static async MessageRPC create(MessageRPC msg)
	{
		string table_name = static::crudTableName();
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		Dict item = msg["data"]["item"];
		
		CrudApi api = static::newInstance
		{
			"action": "create",
			"msg": msg,
			"item": item,
		};
		
		/* Init api */
		api = await static::apiInit(api);
		
		/* Validate item */
		Dict<string> validate = item -> await static::validate(api);
		if (validate)
		{
			throw new ApiException
			(
				_("Runtime.Web.CRUD", "Validation fields error"),
				RuntimeConstant::ERROR_VALIDATION,
				validate
			);
		}
		
		/* Covert item */
		Dict new_item = item
			-> await static::filter(api)
			-> static::toDatabase(api)
		;
		
		if (new_item == null)
		{
			throw new ApiException
			(
				_("Runtime.Web.CRUD", "Converted to database item is null"),
				RuntimeConstant::ERROR_FATAL
			);
		}
		
		/* Create query */
		int id = p
			-> await method insert
			(
				table_name,
				new_item
			)
			-> await method end
		;
		
		item <= id <= id;
		
		return msg -> method success({ "id": id, "item": item }, _("Runtime.WEB.CRUD", "Success created"));
	}
	
	
	
	/**
	 * Update
	 */
	static async MessageRPC update(MessageRPC msg)
	{
		string table_name = static::crudTableName();
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		Dict item = msg["data"]["item"];
		
		CrudApi api = static::newInstance
		{
			"action": "update",
			"msg": msg,
			"item": item,
		};
		
		/* Get id */
		string item_id = item["id"];
		
		/* Init api */
		api = await static::apiInit(api);
		
		/* Validate item */
		Dict<string> validate = item -> await static::validate(api);
		if (validate)
		{
			throw new ApiException
			(
				_("Runtime.Web.CRUD", "Validation fields error"),
				RuntimeConstant::ERROR_VALIDATION,
				validate
			);
		}
		
		/* Find item */
		Dict row = p
			-> await method query
			(
				"select * from " ~ p.prefix ~ table_name ~ " where id=:id limit 1",
				{
					"id": item_id,
				}
			)
			-> await method getOne
		;
		if (row == null)
		{
			throw new ApiException
			(
				_("Runtime.Web.CRUD", "Item not found"),
				RuntimeConstant::ERROR_ITEM_NOT_FOUND
			);
		}
		
		/* Covert item */
		Dict new_item = item
			-> await static::filter(api)
			-> static::toDatabase(api)
		;
		
		if (new_item == null)
		{
			throw new ApiException
			(
				_("Runtime.Web.CRUD", "Converted to database item is null"),
				RuntimeConstant::ERROR_FATAL
			);
		}
		
		/* Update query */
		string table_name = static::crudTableName();
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		p
			-> await method update
			(
				table_name,
				{
					"id": item_id,
				}
				new_item
			)
			-> await method end
		;
		
		item <= id <= item_id;
		
		return msg -> method success({ "id": item_id, "item": item }, _("Runtime.WEB.CRUD", "Success updated"));
	}
	
	
	
	/**
	 * Delete
	 */
	static async MessageRPC delete(MessageRPC msg)
	{
		string table_name = static::crudTableName();
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		string item_id = msg["data"]["id"];
		
		/* Find item */
		Dict row = p
			-> await method query
			(
				"select * from " ~ p.prefix ~ table_name ~ " where id=:id limit 1",
				{
					"id": item_id,
				}
			)
			-> await method getOne
		;
		if (row == null)
		{
			throw new ApiException
			(
				_("Runtime.Web.CRUD", "Item not found"),
				RuntimeConstant::ERROR_ITEM_NOT_FOUND
			);
		}
		
		/* Delete query */
		p
			-> await method query
			(
				"delete from " ~ p.prefix ~ table_name ~ " where id=:id limit 1",
				{
					"id": item_id,
				}
			)
			-> await method end
		;
		
		return msg -> method success({ "id": item_id }, _("Runtime.WEB.CRUD", "Success deleted"));
	}
	
	#endif
	
	
}