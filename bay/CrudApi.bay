/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.rtl;
use Runtime.lib;
use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.RuntimeUtils;
use Runtime.Core.ApiException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.ORM.QueryBuilder;
use Runtime.ORM.Record;
use Runtime.Backend.ApiList;
use Runtime.Backend.ApiMethod;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.FieldInfo;
use Runtime.Web.CRUD.Foreign;
use Runtime.Web.CRUD.ForeignField;
use Runtime.Web.CRUD.Rules.Dictionary;
use Runtime.Web.CRUD.Rules.ManyToMany;
use Runtime.Web.CRUD.Rules.Rule;


class CrudApi extends BaseObject
{
	string action = "";
	RemoteCallAnswer answer = null;
	RemoteCallRequest request = null;
	Collection<FieldInfo> struct = null;
	Foreign foreign = null;
	
	/* Search */
	Dict find = null;
	QueryBuilder q = null;
	int page = 0;
	int pages = 0;
	int total = 0;
	int limit = 100;
	Collection<Dict> items = null;
	Collection filter = null;
	
	/* Save */
	Map<Vector<string>> fields_errors = new Map();
	Dict pk = null;
	Dict item = null;
	Dict new_item = null;
	Dict old_item = null;
	bool is_success = false;
	
	
	
	/**
	 * Returns crud table name
	 */
	pure string getTableName() => "";
	
	
	
	/**
	 * Returns crud table name
	 */
	bool isSuccess() => this.is_success;
	
	
	
	/**
	 * Returns true if request is search
	 */
	bool isSearch() => this.action == "search";
	
	
	
	/**
	 * Returns true if request is get item
	 */
	bool isGetItem() => this.action == "getItem";
	
	
	
	/**
	 * Returns true if request is create
	 */
	bool isCreate() => this.action == "create";
	
	
	
	/**
	 * Returns true if request is update
	 */
	bool isUpdate() => this.action == "update";
	
	
	
	/**
	 * Returns true if request is delete
	 */
	bool isDelete() => this.action == "delete";
	
	
	
	/**
	 * Returns true if request is create, update or delete
	 */
	bool isModify() =>
		this.action == "create" or
		this.action == "update" or
		this.action == "delete"
	;
	
	
	
	/**
	 * Is crud request
	 */
	bool isCRUD() =>
		this.action == "search" or
		this.action == "create" or
		this.action == "update" or
		this.action == "delete"
	;
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<FieldInfo> settings() => [];
	
	
	
	/**
	 * Returns struct
	 */
	Collection<FieldInfo> getStruct()
	{
		if (this.struct == null) this.struct = this.settings();
		return this.struct;
	}
	
	
	
	/**
	 * Returns default order
	 */
	Collection<Collection<string>> getDefaultOrder() =>
	[
		["id", "desc"]
	];
	
	
	
	/**
	 * Returns default filter
	 */
	Collection<Collection<string>> getDefaultFilter() =>
	[
	];
	
	
	
	/**
	 * Returns default limit
	 */
	int getDefaultLimit() => 10;
	
	
	
	/**
	 * Returns search order
	 */
	Collection<Collection<string>> getSearchOrder() => this.getDefaultOrder();
	
	
	
	/**
	 * Returns search filter
	 */
	Collection<Collection<string>> getSearchFilter()
	{
		if (this.filter == null) return this.getDefaultFilter();
		if (not (this.filter instanceof Collection)) return this.getDefaultFilter();
		
		Collection filter = this.filter
			|> .filter
			(
				bool (var item)
				{
					if (not (item instanceof Collection)) return false;
					if (item.count() != 3) return false;
					return true;
				}
			)
		;
		
		Collection<Rule> rules = this.rules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			filter = rule::convertFilter(rule, filter);
		}
		
		return filter;
	}
	
	
	
	/**
	 * Returns maximum limit
	 */
	Collection<Collection<string>> getMaxLimit() => 1000;
	
	
	
	/**
	 * Convert item before save to database
	 */
	async Dict convertItem(Dict item)
	{
		Collection<Rule> rules = this.rules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			item = rule::convertItem(rule, item, this.action);
		}
		return item;
	}
	
	
	
	/**
	 * Patch item before query
	 */
	async Record patchItem(Record item) => item;
	
	
	
	/**
	 * Process item before response
	 */
	async Dict processItem(Dict item)
	{
		Collection<Rule> rules = this.rules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			item = rule::processItem(rule, item, this.action);
			if (item instanceof ManyToMany)
			{
				item = rule::processManyToMany(rule, this.foreign, item);
			}
		}
		return item;
	}
	
	
	
	/**
	 * Process items
	 */
	async void processItems()
	{
		if (this.action == "search")
		{
			Vector new_items = new Vector();
			for (int i=0; i<this.items.count(); i++)
			{
				Dict row = this.items[i];
				row = await this.processItem(row);
				new_items.pushValue(row);
			}
			this.items = new_items.toCollection();
		}
	}
	
	
	
	/**
	 * Init request
	 */
	async void init()
	{
	}
	
	
	
	/**
	 * Before query
	 */
	async void beforeQuery()
	{
		/* Init foreign */
		string class_name = static::getORM();
		this.foreign = Foreign::init(class_name);
		
		if (this.action == "search")
		{
		}
		else if (this.action == "create")
		{
		}
		else if (this.action == "update")
		{
		}
		else if (this.action == "delete")
		{
		}
	}
	
	
	
	/**
	 * After query
	 */
	async void afterQuery()
	{
		/* Get foreign keys */
		if (this.action == "search")
		{
			for (int i=0; i<this.items.count(); i++)
			{
				Dict row = this.items[i];
				this.addManyToMany(row);
			}
		}
		else if (this.action == "getItem")
		{
			this.addManyToMany(this.new_item);
		}
		else if (this.action == "create")
		{
			this.addManyToMany(this.new_item);
		}
		else if (this.action == "update")
		{
			this.addManyToMany(this.old_item);
			this.addManyToMany(this.new_item);
		}
		else if (this.action == "delete")
		{
			this.addManyToMany(this.old_item);
		}
		
		/* Load dictionary */
		if (this.action == "search" or this.action == "getItem")
		{
			await this.loadDictionary();
		}
		
		/* Load many to many */
		await this.loadManyToMany();
	}
	
	
	
	/**
	 * Add Many To Many
	 */
	void addManyToMany(Dict item)
	{
		Collection<Dictionary> rules = this.rules().filter
		(
			bool (BaseStruct rule) => rule instanceof Dictionary or rule instanceof ManyToMany
		);
		for (int i=0; i<rules.count(); i++)
		{
			Dictionary rule = rules[i];
			this.foreign = rule::foreignAddItem(rule, this.foreign, item);
		}
	}
	
	
	
	/**
	 * Load Dictionary
	 */
	async void loadDictionary()
	{
		Collection<Dictionary> rules = this.rules().filter( lib::isInstance(classof Dictionary) );
		for (int i=0; i<rules.count(); i++)
		{
			Dictionary rule = rules[i];
			this.foreign = await rule::foreignLoadDictionary(rule, this.foreign);
		}
	}
	
	
	
	/**
	 * Load Many To Many
	 */
	async void loadManyToMany()
	{
		Collection<ManyToMany> rules = this.rules().filter( lib::isInstance(classof ManyToMany) );
		for (int i=0; i<rules.count(); i++)
		{
			ManyToMany rule = rules[i];
			this.foreign = await rule::foreignLoadManyToMany(rule, this.foreign);
		}
	}
	
	
	
	/**
	 * Save Many To Many
	 */
	async void saveManyToManyItem(Dict item)
	{
		Collection<ManyToMany> rules = this.rules().filter( lib::isInstance(classof ManyToMany) );
		for (int i=0; i<rules.count(); i++)
		{
			ManyToMany rule = rules[i];
			Collection new_values = item[rule.field_name];
			this.foreign = await rule::foreignSaveManyToMany(rule, this.foreign, item, new_values);
		}
	}
	
	
	
	/**
	 * After
	 */
	async void after()
	{
		if (this.isSuccess())
		{
			/* Add foreign options */
			this.answer = rtl::setAttr
			(
				this.answer,
				["response", "foreigns"],
				RuntimeUtils::ObjectToPrimitive(this.foreign.fields, false)
			);
		}
	}
	
	
	
	/**
	 * Add error
	 */
	async bool addFieldError(string field_name, string error)
	{
		if (not this.fields_errors.has(field_name))
		{
			this.fields_errors.set(field_name, new Vector());
		}
		Vector<string> errors = this.fields_errors[field_name];
		errors.pushValue(error);
	}
	
	
	
	/**
	 * Validate form
	 */
	async bool validateForm()
	{
		bool res = true;
		
		Collection<Rule> rules = this.rules();
		for (int i=0; i<rules.count(); i++)
		{
			Rule rule = rules[i];
			string error = rule::validate(rule, this.item);
			if (error != "")
			{
				this.addFieldError( rule.api_name, _("Runtime.Web.CRUD", error) );
				res = false;
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Validate
	 */
	async void validate()
	{
		if (this.action == "create" or this.action == "update")
		{
			list res = await this.validateForm();
			if (not res)
			{
				throw new ApiException
				(
					_("Runtime.Web.CRUD", "Validation fields error"),
					rtl::ERROR_VALIDATION,
					{
						"fields_errors": this.fields_errors
					}
				);
			}
		}
	}
	
	

	/**
	 * Extend search filter
	 */
	Collection<list> extendSearchFilter(Collection<list> filter) => filter;
	
	
	
	/**
	 * Build query
	 */
	QueryBuilder buildSearchQuery(QueryBuilder q)
	{
		if (this.isSearch())
		{
			q = q
				.filter( this.getSearchFilter() |> this.extendSearchFilter )
				.page( this.page, this.limit )
				.order( this.getSearchOrder() );
		}
		return q;
	}	
	
	
	
	/**
	 * Find existing item for create
	 */
	async Record findItemByKey(Dict pk)
	{
		/* Get ORM class name */
		string class_name = static::getORM();
		fn select = rtl::method(class_name, "select");
		fn getFilterByPrimaryKey = rtl::method(class_name, "getFilterByPrimaryKey");
		
		Collection<list> filter = getFilterByPrimaryKey(pk) |> this.extendSearchFilter;
		if (filter == null) return null;
		
		/* Execute query */
		Record res = select()
			|> .filter(filter)
			|> this.buildSearchQuery
			|> .asRecord(true)
			|> .limit(1)
			|> await .one()
		;
		
		return res;
	}
	
	
	
	/**
	 * Search query before
	 */
	async bool canSearchQuery()
	{
		return true;
	}
	
	
	
	/**
	 * Search query
	 */
	async void searchQuery()
	{
		/* Get ORM class name */
		string class_name = static::getORM();
		
		/* Execute query */
		QueryBuilder q = class_name
			|> lib::applyMethod("select")
			|> this.buildSearchQuery
			|> .calcFoundRows(true)
		;
		
		/* Get items */
		Cursor cursor = await q.execute();
		
		/* Fetch items */
		Vector items = new Vector();
		while (true)
		{
			Dict row = await cursor.fetch();
			if (row == null)
			{
				break;
			}
			row = q.fromDatabase(cursor.getConnection(), row);
			items.pushValue(row);
		}
		
		await cursor.close();
		
		/* Result */
		this.q = q;
		this.items = items.toCollection();
		this.total = await cursor.foundRows();
		this.pages = (this.limit > 0) ? rtl::ceil(this.total / this.limit) : 0;
	}
	
	
	
	/**
	 * Search
	 */
	async void doSearch()
	{
		/* Validate */
		await this.validate();
		
		/* Can query */
		bool res = await this.canSearchQuery();
		if (res)
		{
			/* Before query */
			await this.beforeQuery();
			
			/* Search query */
			await this.searchQuery();
			
			/* After query */
			await this.afterQuery();
			
			/* Process items */
			await this.processItems();
			
			/* Set success */
			this.is_success = true;
		}
		
		/* Create response */
		Dict response =
		{
			"filter": this.filter,
			"items": this.items.map
			(
				Dict (Record item) => (item instanceof Record) ? item.convertToDict() : item
			),
			"page": this.page,
			"limit": this.limit,
			"total": this.total,
			"pages": this.pages,
		};
		this.answer = this.answer::success(this.answer, response);
	}
	
	
	
	/**
	 * Search api action
	 */
	static async list searchAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Get data from request */
		api.action = "search";
		api.answer = answer;
		api.request = request;
		api.page = request.data["page"] |> default int 0;
		api.filter = request.data["filter"] |> default Collection null;
		api.limit = request.data["limit"] |> default int api.getDefaultLimit();
		if (api.limit > api.getMaxLimit()) api.limit = api.getMaxLimit();
		
		/* Init api */
		await api.init();
		
		/* Search */
		await api.doSearch();
		
		/* After query */
		await api.after();
		
		return [request, api.answer];
	}
	
	
	
	/**
	 * Returns true if can Query
	 */
	async bool canGetItemQuery()
	{
		return true;
	}
	
	
	
	/**
	 * Get item query
	 */
	async void getItemQuery()
	{
		this.new_item = await this.findItemByKey(this.pk);
	}
	
	
	
	/**
	 * Get item
	 */
	async void doGetItem()
	{
		/* Validate */
		await this.validate();
		
		/* Can query */
		bool res = await this.canGetItemQuery();
		if (res)
		{
			/* Before query */
			await this.beforeQuery();
			
			/* Get item query */
			await this.getItemQuery();
			
			/* After query */
			await this.afterQuery();
			
			/* Set success */
			this.is_success = true;
		}
		
		Dict new_item = this.new_item;
		
		/* Process item */
		if (new_item)
		{
			new_item = await this.processItem(new_item);
		}
		
		/* Create response */
		Dict response =
		{
			"pk": this.pk,
			"item": new_item,
		};
		this.answer = this.answer::success(this.answer, response);
	}
	
	
	
	/**
	 * Get item api action
	 */
	static async list getItemAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Get data from request */
		api.action = "getItem";
		api.answer = answer;
		api.request = request;
		api.pk = request.data["pk"] |> default Dict {};
		
		/* Init api */
		await api.init();
		
		/* Search */
		await api.doGetItem();
		
		/* After query */
		await api.after();
		
		return [request, api.answer];
	}
	
	
	
	/**
	 * Find existing item for create
	 */
	async Record findItemForCreating() => null;
	
	
	
	/**
	 * Returns true if can Query
	 */
	async bool canCreateQuery()
	{
		return true;
	}
	
	
	
	/**
	 * Create query
	 */
	async void createQuery()
	{
		/* Get ORM class name */
		string class_name = static::getORM();
		fn createInstance = rtl::method(class_name, "createInstance");
		fn getPrimaryKey = rtl::method(class_name, "getPrimaryKey");
		fn save = rtl::method(class_name, "save");
		
		/* Convert item */
		Dict update_item = await this.convertItem(this.item);
		
		/* Save item */
		this.new_item = createInstance(update_item);
		this.new_item = await this.patchItem(this.new_item);
		this.pk = await save(this.new_item);
		
		/* Save foreign items */
		Dict item = this.item.concat(this.pk);
		await this.saveManyToManyItem(item);
		
		/* Find new item */
		this.new_item = await this.findItemByKey(this.pk);
	}
	
	
	
	/**
	 * Create
	 */
	async void doCreate()
	{
		/* Check if item exists */
		this.old_item = this.findItemForCreating();
		if (this.old_item)
		{
			string class_name = static::getORM();
			fn getPrimaryKey = rtl::method(class_name, "getPrimaryKey");
			this.pk = getPrimaryKey(this.old_item);
			this.action = "update";
			
			/* Update existing item */
			this.doUpdate();
			
			return;
		}
		
		/* Validate */
		await this.validate();
		
		/* Can query */
		bool res = await this.canCreateQuery();
		if (res)
		{
			/* Before query */
			await this.beforeQuery();
			
			/* Create query */
			await this.createQuery();
			
			/* After query */
			await this.afterQuery();
			
			this.is_success = true;
		}
		
		Dict new_item = this.new_item;
		
		/* Process item */
		if (new_item)
		{
			new_item = await this.processItem(new_item);
		}
		
		/* Create response */
		Dict response =
		{
			"pk": this.pk,
			"item": this.item,
			"new_item": new_item,
		};
		this.answer = this.answer::success(this.answer, response);
	}
	
	
	
	/**
	 * Create api action
	 */
	static async list createAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Get data from request */
		api.action = "create";
		api.answer = answer;
		api.request = request;
		api.item = request.data["item"] |> default Dict {};
		
		/* Init api */
		await api.init();
		
		/* Create */
		await api.doCreate();
		
		/* After query */
		await api.after();
		
		return [request, api.answer];
	}
	
	
	
	/**
	 * Returns true if can Query
	 */
	async bool canUpdateQuery()
	{
		return true;
	}
	
	
	
	/**
	 * Update query
	 */
	async void updateQuery()
	{
		Dict pk = this.pk;
		Dict item = this.item;
		
		/* Convert item */
		Dict update_item = await this.convertItem(item);
		Collection keys = update_item.keys();
		if (keys.count() == 0)
		{
			return false;
		}
		
		/* Get ORM class name */
		string class_name = static::getORM();
		fn getPrimaryKey = rtl::method(class_name, "getPrimaryKey");
		fn change = rtl::method(class_name, "change");
		fn save = rtl::method(class_name, "save");
		
		/* Save item */
		this.new_item = change(this.old_item, update_item);
		this.new_item = await this.patchItem(this.new_item);
		this.pk = await save(this.new_item);
		
		/* Save foreign items */
		item = this.item.concat(this.pk);
		await this.saveManyToManyItem(item);
		
		/* Find new item */
		this.new_item = await this.findItemByKey(this.pk);
	}
	
	
	
	/**
	 * Update
	 */
	async void doUpdate()
	{
		/* Validate */
		await this.validate();
		
		/* Find item */
		if (this.old_item == null) this.old_item = await this.findItemByKey(this.pk);
		this.new_item = this.old_item;
		if (this.old_item == null)
		{
			throw new ApiException
			(
				_("Runtime.Web.CRUD", "Item not found"),
				rtl::ERROR_ITEM_NOT_FOUND
			);
		}
		
		/* Can query */
		bool res = await this.canUpdateQuery();
		if (res)
		{
			/* Before query */
			await this.beforeQuery();
			
			/* Update query */
			await this.updateQuery();
			
			/* After query */
			await this.afterQuery();
			
			this.is_success = true;
		}
		
		Dict new_item = this.new_item, old_item = this.old_item;
		
		/* Process item */
		old_item = await this.processItem(old_item);
		if (this.new_item != this.old_item and this.new_item != null)
		{
			new_item = await this.processItem(new_item);
		}
		else
		{
			new_item = old_item;
		}
		
		/* Create response */
		Dict response =
		{
			"pk": this.pk,
			"item": this.item,
			"new_item": new_item,
			"old_item": old_item,
		};
		this.answer = this.answer::success(this.answer, response);
	}
	
	
	
	/**
	 * Update api action
	 */
	static async list updateAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Get data from request */
		api.action = "update";
		api.answer = answer;
		api.request = request;
		api.pk = request.data["pk"] |> default Dict {};
		api.item = request.data["item"] |> default Dict {};
		
		/* Init api */
		await api.init();
		
		/* Update */
		await api.doUpdate();
		
		/* After query */
		await api.after();
		
		return [request, api.answer];
	}
	
	
	
	/**
	 * Returns true if can Query
	 */
	async bool canDeleteQuery()
	{
		return true;
	}
	
	
	
	/**
	 * Force delete items
	 */
	bool isForceDelete() => true;
	
	
	
	/**
	 * Delete query
	 */
	async void deleteQuery()
	{
		/* Get ORM class name */
		string class_name = static::getORM();
		if (this.isForceDelete())
		{
			fn delete = rtl::method(class_name, "delete");
			
			/* Delete */
			await delete(this.old_item);
		}
		else
		{
			Dict old_item = this.old_item;
			old_item <= is_deleted <= true;
			old_item = await this.patchItem(old_item);
			
			/* Save item */
			string class_name = static::getORM();
			fn save = rtl::method(class_name, "save");
			await save(old_item);
		}
	}
	
	
	
	/**
	 * Update
	 */
	async void doDelete()
	{
		/* Validate */
		await this.validate();
		
		/* Find item */
		this.old_item = await this.findItemByKey(this.pk);
		if (this.old_item == null)
		{
			throw new ApiException("Item not found", rtl::ERROR_ITEM_NOT_FOUND);
		}
		
		/* Can query */
		bool res = await this.canDeleteQuery();
		if (res)
		{
			/* Before query */
			await this.beforeQuery();
			
			/* Update query */
			await this.deleteQuery();
			
			/* After query */
			await this.afterQuery();
			
			this.is_success = true;
		}
		
		Dict old_item = this.old_item;
		
		/* Process item */
		Dict old_item = await this.processItem(old_item);
		
		/* Create response */
		Dict response =
		{
			"pk": this.pk,
			"item": old_item,
		};
		this.answer = this.answer::success(this.answer, response);
	}
	
	
	
	/**
	 * Delete api action
	 */
	static async list deleteAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Get data from request */
		api.action = "delete";
		api.answer = answer;
		api.request = request;
		api.pk = request.data["pk"] |> default Dict {};
		
		/* Init api */
		await api.init();
		
		/* Delete */
		await api.doDelete();
		
		/* After query */
		await api.after();
		
		return [request, api.answer];
	}
	
}