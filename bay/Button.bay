<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Web.Crud.Button">

<use name="Runtime.Core.Message" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.Events.MouseClickEvent" />

<style>
.web_button{
	padding: 10px 20px;
	cursor: pointer;
	background-color: ${ vars["colors", "default", "background"] };
	border: 1px ${ vars["colors", "default", "border"] } solid;
	color: ${ vars["colors", "default", "text"] };
	/*box-shadow: 0px 2px 5px 0px rgba(0,0,0,0.25);*/
	outline: 0;
	font-size: 16px;
}
.web_button:hover{
	background-color: ${ vars["colors", "default", "hover_bg"] };
	border: 1px ${ vars["colors", "default", "border"] } solid;
	color: ${ vars["colors", "default", "hover_text"] };
}
.web_button:active{
	box-shadow: inset 0px 2px 5px 0px rgba(0,0,0,0.25);
}
.web_button.primary{
	background-color: ${ vars["colors", "primary", "background"] };
	border: 1px ${ vars["colors", "primary", "border"] } solid;
	color: ${ vars["colors", "primary", "text"] };
}
.web_button.primary:hover{
	background-color: ${ vars["colors", "primary", "hover_bg"] };
	border: 1px ${ vars["colors", "primary", "border"] } solid;
	color: ${ vars["colors", "primary", "hover_text"] };
}
.web_button.danger{
	background-color: ${ vars["colors", "danger", "background"] };
	border: 1px ${ vars["colors", "danger", "border"] } solid;
	color: ${ vars["colors", "danger", "text"] };
}
.web_button.danger:hover{
	background-color: ${ vars["colors", "danger", "hover_bg"] };
	border: 1px ${ vars["colors", "danger", "border"] } solid;
	color: ${ vars["colors", "danger", "hover_text"] };
}
.web_button.success{
	background-color: ${ vars["colors", "success", "background"] };
	border: 1px ${ vars["colors", "success", "border"] } solid;
	color: ${ vars["colors", "success", "text"] };
}
.web_button.success:hover{
	background-color: ${ vars["colors", "success", "hover_bg"] };
	border: 1px ${ vars["colors", "success", "border"] } solid;
	color: ${ vars["colors", "success", "hover_text"] };
}
.web_button.small{
	padding: 3px 10px;
	font-size: 14px;
}
</style>


<template name="render">
	%set string href = render_params["href"];
	%if (href == null)
	{
		<button class="web_button" class={{ render_params["type"] |> default string "button" }}
			@tag={{ render_params["@tag"] }} @event:MouseClickEvent="onClick"
		>
			%render render_content;
		</button>
	}
	%else
	{
		<a class="nolink web_button__href" href={{ href }}>
			<button class="web_button" class={{ render_params["type"] |> default string "button" }}
				@tag={{ render_params["@tag"] }} @event:MouseClickEvent="onClick"
			>
				%render render_content;
			</button>
		</a>
	}
</template>


<script type="frontend">

/**
 * Mouse click event
 */
async void onClick(Message<MouseClickEvent> msg)
{
	await this.sendEvent(msg.event);
}

</script>

</class>