/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2018-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.lib;
use Runtime.CoreStruct;
use Runtime.RuntimeUtils;
use Runtime.Interfaces.IntrospectionClass;
use Runtime.Web.CRUD.Annotations.FormValue;
use Runtime.Web.CRUD.Annotations.TableValue;
use Runtime.Web.CRUD.CrudModel;
use Runtime.Web.UI.LayoutModel;
use Runtime.Web.UI.RenderHelper;


struct ItemModel extends CoreStruct
{
	
	/**
	 * Returns required modules
	 * @return Map<string>
	 */
	lambda Map<string> modules() => 
	[
	];
	
	
	
	/**
	 * Returns required components
	 * @return Map<string>
	 */
	lambda Map<string> components() => 
	[
	];
	
	
	
	/**
	 * Returns table fields
	 */
	lambda Collection<string> getTableFields() => 
	[
	];
	
	
	
	/**
	 * Returns table field value
	 */
	lambda string getTableOrder() => "";
	
	
	
	/**
	 * Returns form fields
	 */
	lambda Collection<string> getFormFields() => 
	[
	];
	
	
	
	/**
	 * Returns label name
	 */
	lambda string getLabelName(string field_name)
	{
		return "";
	}
	
	
	
	/**
	 * Extend field info
	 */
	lambda async Collection<string> extendsFieldInfo(CrudModel crud, Dict<Collection> fields_info) => fields_info;
	
	
	
	/**
	 * Returns table value
	 */
	lambda html getHtmlValue(LayoutModel layout, CrudModel crud, string field_name, var control) => 
		RenderHelper::escapeHtml( crud.item.takeValue(field_name) )
	;
	
	
	
	/**
	 * Returns item value
	 */
	lambda html getItemValue(CrudModel crud, string field_name) =>
		crud.item.takeValue(field_name)
	;
}