/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD.Fields;

use Runtime.CoreStruct;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.Events.ChangeEvent;


class Select extends Component
{
	
	/**
	 * Component css
	 */
	pure string css(Dict<string> vars) => 
		@css{
			%select{
				width: 100%;
				padding: 6px 12px;
				cursor: pointer;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	pure html render(LayoutModel layout, CoreStruct model, Dict params, html content)
	{
		return
			<select @class='select' @tag={ params["@tag"] } @event:ChangeEvent="onChange"
				value={ params["value"] } >
					{ static::renderOptions(layout, model, params) }
			</select>
		;
	}
	
	
	
	/**
	 * Component render
	 */
	pure html renderOptions(LayoutModel layout, CoreStruct model, Dict params)
	{
		Collection<Dict<string, string>> options = params["field"]["select"];
		string option_name = params["field"]["select_field_name"];
		
		if (options == null or option_name == "") return "";
		
		return options.map
		(
			html (Dict<string, string> option) use (option_name) =>
				<option value={ option["id"] }>
					{ option[option_name] }
				</option>
		);
	}
	
	
	
	#ifdef FRONTEND then
	
	/* ---------------------------------- Events ----------------------------------- */
	
	
	/**
	 * On click
	 */
	public void onChange(ChangeEvent e)
	{
		this.signal(e);
	}
	
	
	#endif
	
}
