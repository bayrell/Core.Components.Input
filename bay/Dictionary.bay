/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.Serializer;
use Runtime.Web.BaseWidget;
use Runtime.Widget.WidgetError;
use Runtime.Widget.Crud.ApiResult;
use Runtime.Widget.Crud.CrudApiStorage;


class Dictionary extends BaseWidget
{
	Vector options = [];
	WidgetError error = new WidgetError;
	CrudApiStorage storage = null;
	fn transform = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(Dict params = null)
	{
		parent(params);
		if (params)
		{
			if (params.has("storage")) this.storage = params.get("storage");
			if (params.has("transform")) this.transform = params.get("transform");
		}
	}
	
	
	/**
	 * Returns options
	 */
	Vector getOptions() => this.options;
	
	
	/**
	 * Set api result
	 */
	void setApiResult(ApiResult res, string action = "")
	{
		if (res.data.has("items"))
		{
			Vector items = res.data["items"];
			this.options = items.map( this.transform );
		}
		this.error.setApiResult(res);
	}
	
	
	/**
	 * Load table data
	 */
	async void loadData()
	{
		await parent();
		ApiResult res = await this.storage.doSearch();
		this.setApiResult(res, "search");
	}
	
	
	/**
	 * Process frontend data
	 */
	void processFrontendData(Serializer serializer, Map data)
	{
		serializer.process(this, "error", data);
		serializer.process(this, "options", data);
		parent(serializer, data);
	}
}
