/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.BaseStruct;
use Runtime.Web.App.RemoteCallAnswer;
use Runtime.Web.App.WebApp;


struct FormModel extends BaseStruct
{
	static const string ACTION_CREATE = "create";
	static const string ACTION_UPDATE = "update";
	static const string ACTION_CANCEL = "cancel";
	
	Collection fields_errors = null;
	Dict pk = null;
	Dict item = null;
	Dict old_item = null;
	string action = "";
	string kind = "";
	string message = "";
	string success_message = "";
	string error_message = "";
	Dict data = {};
	
	
	/**
	 * Set primary key
	 */
	pure FormModel setPk(FormModel model, Dict pk) => model.copy{ "pk": pk };
	
	
	
	/**
	 * Set item
	 */
	pure FormModel setItem(FormModel model, Dict item) => model.copy{ "item": item, "old_item": item };
	
	
	
	/**
	 * Set kind
	 */
	pure FormModel setKind(FormModel model, string kind) => model.copy{ "kind": kind };
	
	
	
	/**
	 * Set wait message
	 */
	pure FormModel setWaitMessage(FormModel model, string message = "") => model.copy
	{
		"message": (message != message) ? message : _("Runtime.Web", "Please wait"),
		"success_message": message,
		"error_message": "",
	};
	
	
	
	/**
	 * Message
	 */
	pure FormModel setMessage(FormModel model, string message) => model.copy
	{
		"message": "",
		"success_message": message,
		"error_message": "",
	};
	
	
	
	/**
	 * Set answer
	 */
	pure FormModel setAnswer(FormModel model, RemoteCallAnswer answer)
	{
		model <= fields_errors <= null;
		if (answer.isSuccess()) return static::setSuccess(model, answer.success_message);
		model = static::setError(model, answer.error_message);
		
		/* Set field errors */
		if (answer.code == rtl::ERROR_VALIDATION)
		{
			model <= fields_errors <= answer.response["fields_errors"];
		}
		
		return model
	}
	
	
	
	/**
	 * Success
	 */
	pure FormModel setSuccess(FormModel model, string message) => model.copy
	{
		"message": "",
		"success_message": message,
		"error_message": "",
	};
	
	
	
	/**
	 * Error
	 */
	pure FormModel setError(FormModel model, string message) => model.copy
	{
		"message": "",
		"success_message": "",
		"error_message": message,
	};
	
	
	
	/**
	 * Clear
	 */
	pure FormModel clear(FormModel model) => model.copy
	{
		"item": new Dict(),
		"old_item": null,
		"fields_errors": null,
		"message": "",
		"success_message": "",
		"error_message": "",
		"data": "",
	};
}