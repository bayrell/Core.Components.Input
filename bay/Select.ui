<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.Input.Select" extends="Runtime.Web.Component" 
	module="Runtime.Web.Input"
>


<use name="Runtime.Core.Message" />
<use name="Runtime.Web.Events.ChangeEvent" />


<style>
%select{
	width: 100%;
	padding: 6px 12px;
	background-color: ${ vars["colors", "default", "background"] };
	border: 1px ${ vars["colors", "default", "border"] } solid;
	outline: transparent;
}
</style>



<template name="render">
	
	%var string name = (params != null) ? params.get("name", "") : "";
	
	<select class='select' @event:ChangeEvent="onChange" name={ name } value={ rtl::isEmpty(model) ? "" : model }>
	%var Collection options = params["options"];
	%if (rtl::exists(options))
	{
		%var Dict selected = {};
		%if (params["show_select_value"] == true)
		{
			%if (model === "" or model === null)
			{
				%var selected = { "selected": "selected" };
			}
			<option value="" ...selected>{ _("Runtime.Web.Input", "Select value") }</option>
		}
		%for (int i=0; i<options.count(); i++)
		{
			%var Dict item = options[i];
			%var selected = {};
			%if (item["id"] == model and model !== "" and model !== null)
			{
				%var selected = { "selected": "selected" };
			}
			<option value={ item["id"] } ...selected>{ item["value"] }</option>
		}
	}
	</select>
	
</template>



<script type="frontend">

/**
 * On change
 */
public void onChange(Message<ChangeEvent> msg)
{
	this.signal(msg.data);
}

</script>


</class>