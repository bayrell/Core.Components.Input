<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.CRUD.DialogWidget" extends="Runtime.Web.App.Widget" 
	module="Runtime.Web.CRUD" model="Runtime.Web.App.PageModel"
>

<use name="Runtime.Web.Message" />
<use name="Runtime.Web.App.RemoteCallAnswer" />
<use name="Runtime.Web.App.WidgetEvent" />
<use name="Runtime.Web.App.WebApp" />
<use name="Runtime.Web.CRUD.CrudPageModel" />
<use name="Runtime.Web.CRUD.CrudWidgetEvent" />
<use name="Runtime.Web.CRUD.DialogWidgetModel" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.Dialog.Dialog" component="true" />
<use name="Runtime.Web.Dialog.DialogEvent" />
<use name="Runtime.Web.Dialog.DialogModel" />
<use name="Runtime.Web.Events.BaseEvent" />


<style>
.form{
}
.form_row{
	padding-bottom: 15px;
}
.form_row:last-child{
	padding-bottom: 0px;
}
.form_label{
	font-weight: bold;
	padding-bottom: 5px;
}
.form_value{}
.form_value input, .form_value textarea, .form_value select{
	width: 100%;
	padding: 5px 10px;
}
.form_value textarea{
	height: 400px;
}
.form_buttons{
	text-align: center;
	margin-top: 10px;
}
.form_buttons %(Button)button{
	margin-left: 10px;
	margin-right: 10px;
}
.form_error{
	text-align: center;
	padding-top: 5px;
	color: red;
}
.form_result{
	padding-top: 10px;
	text-align: center;
}
.form_result.success{
	color: green;
}
.form_result.error{
	color: red;
}
</style>


<template>
	%var string widget_key = params["widget_key"];
	%var DialogWidgetModel widget_model = model["widgets", params["widget_key"]];
	
	%if (widget_model.action == "add")
	{
		<Dialog @model=["widgets", params["widget_key"], "dialog"] @ref="dialog" @event:DialogEvent="onDialogEvent"
			style={ DialogModel::STYLE_CONTENT } auto_hide={ false }
			buttons=
			[
				{
					"type": "danger",
					"data-action": "add",
					"value": "Add",
				},
				{
					"type": "default",
					"data-action": "cancel",
					"value": "Cancel",
				},
			]
		>
			{ static::renderForm(layout, model, params) }
		</Dialog>
	}
	
	%if (widget_model.action == "edit")
	{
		<Dialog @model=["widgets", params["widget_key"], "dialog"] @ref="dialog" @event:DialogEvent="onDialogEvent"
			style={ DialogModel::STYLE_CONTENT } auto_hide={ false }
			buttons=
			[
				{
					"type": "danger",
					"data-action": "edit",
					"value": "Edit",
				},
				{
					"type": "default",
					"data-action": "cancel",
					"value": "Cancel",
				},
			]
		>
			{ static::renderForm(layout, model, params) }
		</Dialog>
	}
	
	%if (widget_model.action == "delete")
	{
		<Dialog @model=["widgets", params["widget_key"], "dialog"] @ref="dialog" @event:DialogEvent="onDialogEvent"
			style={ DialogModel::STYLE_CONTENT } auto_hide={ false }
			buttons=
			[
				{
					"type": "danger",
					"data-action": "delete",
					"value": "Delete",
				},
				{
					"type": "default",
					"data-action": "cancel",
					"value": "Cancel",
				},
			]
		>
			%var string crud_class_name = layout.page_class;
			%var Dict messsages = rtl::applyMethod(crud_class_name, "getMessages");
			%var fn message = messsages["delete"];
			{ message(widget_model.item) }
		</Dialog>
	}
</template>


<template name="renderForm" args="LayoutModel layout, CrudPageModel model, Dict params">

	%var string widget_key = params["widget_key"];
	%var DialogWidgetModel widget_model = model["widgets", widget_key];
	%var Collection<string> table_fields = model.form_fields;
	
	<div class="form_rows" @key="rows">
		%for (int i=0; i<table_fields.count(); i++)
		{
			%var string field_name = table_fields[i];
			%var FieldInfo field = model.getFieldInfo(field_name);
			%render static::renderRow(layout, model, widget_model, params, field);
		}
	</div>

</template>



<template name="renderRow" args="LayoutModel layout, FormModel model, DialogWidgetModel widget_model,
	Dict params, FieldInfo field">

	%var string crud_class_name = layout.page_class;
	%var string widget_key = params["widget_key"];
	
	%if (field != null)
	{
		%var Collection<string> model_path = ["widgets", widget_key, "item", field.api_name];
		%var Dict crud_settings =
		{
			"crud_kind": widget_model.kind,
			"crud_item": widget_model["item"],
			"crud_params": params,
			"crud_field": field,
			"crud_form_model": widget_model,
			"crud_model_path": model_path,
			"crud_show": true,
			"value": widget_model["item", field.api_name],
		};
		
		<!-- Custom settings -->
		%if (rtl::method_exists(crud_class_name, "customSettings"))
		{
			%var crud_settings = rtl::methodApply(crud_class_name, "customSettings", [layout, crud_settings]);
		}
		
		<!-- Render value -->
		%var html renderValue = null;
		%if (rtl::method_exists(crud_class_name, "renderField"))
		{
			%var renderValue = rtl::methodApply(crud_class_name, "renderField", [layout, crud_settings]);
		}
		
		<!-- Extend class settings -->
		%var field = crud_settings["crud_field"];
		%var crud_settings = crud_settings.concat(field.class_settings);
		
		<!-- Render Field -->
		%var model_path = crud_settings["crud_model_path"];
		%var bool crud_show = crud_settings["crud_show"];
		%var string field_class_name = field["class_name"] |> default string "";
		%if (crud_show)
		{
			<div class='form_row' @key={ field.api_name }>
				<div class='form_label'>
					{ field["label"] }:
				</div>
				<div class='form_value'>
					%if (renderValue !== null)
					{
						{ renderValue }
					}
					%else if (not rtl::isEmpty(field_class_name))
					{
						<{field_class_name} @bind={ model_path } @key={ field.api_name } name={ field.api_name }
							@event:ChangeEvent="onItemChange" ...crud_settings />
					}
				</div>
				{ static::renderFieldError(layout, model, widget_model, field.api_name) }
			</div>
		}
	}

</template>



<template name="renderFieldError" args="LayoutModel layout, FormModel model, DialogWidgetModel widget_model,
	string field_name"
>
	<div class='form_error'>
		%var Collection<string> errors = widget_model["fields_errors"][field_name];
		%if (errors != null)
		{
			%for (int i=0; i<errors.count(); i++)
			{
				%var string s = errors[i];
				<div class='form_error_line'>{ s }</div>
			}
		}
	</div>
</template>



<script>

var dialog = null;

/**
 * On widget event
 */
async void handleEvent(Message<BaseEvent> msg)
{
	if (this.dialog == null) return;
	
	string widget_key = this.getWidgetKey();
	if (msg.data instanceof CrudWidgetEvent and widget_key == msg.data.dest)
	{
		CrudWidgetEvent event = msg.data;
		if (event.action == CrudWidgetEvent::OPEN_DIALOG)
		{
			Dict item = msg.data.item;
			this.widgetUpdate("setAttr", "item", item);
			this.widgetUpdate("setAttr", "old_item", item);
			this.widgetUpdate("setAttr", "current_widget", event.current_widget);
			this.dialog.update("show");
		}
	}
}


/**
 * On dialog event
 */
async void onDialogEvent(Message<DialogEvent> msg)
{
	if (this.dialog == null) return;
	
	DialogWidgetModel widget_model = this.widgetModel();
	
	DialogEvent e = msg.data;
	if (msg.sender == this.dialog)
	{
		if (e.button_result == "cancel")
		{
			this.dialog.update("hide");
		}
		else
		{
			if (widget_model.action == "add" or widget_model.action == "edit")
			{
				await this.saveItem();
			}
			else if (widget_model.action == "delete")
			{
				await this.deleteItem();
			}
		}
	}
}



/**
 * Save item
 */
async void saveItem()
{
	string widget_key = this.getWidgetKey();
	string crud_class_name = this.driver.layout.page_class;
	
	CrudPageModel page_model = this.model();
	DialogWidgetModel widget_model = this.widgetModel();
	Dict old_item = widget_model.old_item;
	Dict new_item = widget_model.item;
	Dict pk = page_model.getPrimaryKey(old_item);
	
	if (widget_model.action == "add")
	{
		this.dialog.update("setWaitMessage");
		
		RemoteCallAnswer answer = await WebApp::externalBusCall
		{
			"object_name": rtl::methodApply(crud_class_name, "getCrudObjectName"),
			"interface_name": "core.crud",
			"method_name": "create",
			"data":
			{
				"pk": pk,
				"item": new_item,
			},
		};
		
		if (answer.isSuccess())
		{
			this.dialog.update("hide");
			
			/* Send message */
			string current_widget = widget_model.current_widget;
			CrudWidgetEvent event = new CrudWidgetEvent
			{
				"from": widget_key,
				"dest": current_widget,
				"action": CrudWidgetEvent::CREATE_ITEM,
				"pk": pk,
				"new_item": answer.response["new_item"],
			};
			await this.signal(event);
		}
		else
		{
			this.dialog.update("setAnswer", answer);
		}
	}
	
	else if (widget_model.action == "edit")
	{
		this.dialog.update("setWaitMessage");
		
		RemoteCallAnswer answer = await WebApp::externalBusCall
		{
			"object_name": rtl::methodApply(crud_class_name, "getCrudObjectName"),
			"interface_name": "core.crud",
			"method_name": "update",
			"data":
			{
				"pk": pk,
				"item": new_item,
			},
		};
		
		if (answer.isSuccess())
		{
			this.dialog.update("hide");
			
			/* Send message */
			string current_widget = widget_model.current_widget;
			CrudWidgetEvent event = new CrudWidgetEvent
			{
				"from": widget_key,
				"dest": current_widget,
				"action": CrudWidgetEvent::UPDATE_ITEM,
				"pk": pk,
				"old_item": old_item,
				"new_item": answer.response["new_item"],
			};
			await this.signal(event);
		}
		else
		{
			this.dialog.update("setAnswer", answer);
		}
		
	}
}



/**
 * Delete item
 */
async void deleteItem()
{
	string widget_key = this.getWidgetKey();
	string crud_class_name = this.driver.layout.page_class;
	
	CrudPageModel page_model = this.model();
	DialogWidgetModel widget_model = this.widgetModel();
	Dict item = widget_model.item;
	Dict pk = page_model.getPrimaryKey(item);
	
	/* Send api */
	RemoteCallAnswer answer = await WebApp::externalBusCall
	{
		"object_name": rtl::methodApply(crud_class_name, "getCrudObjectName"),
		"interface_name": "core.crud",
		"method_name": "delete",
		"data":
		{
			"pk": pk,
		},
	};
	
	if (answer.isSuccess())
	{
		this.dialog.update("hide");
		
		/* Send message */
		string current_widget = widget_model.current_widget;
		CrudWidgetEvent event = new CrudWidgetEvent
		{
			"from": widget_key,
			"dest": current_widget,
			"action": CrudWidgetEvent::DELETE_ITEM,
			"pk": pk,
		};
		await this.signal(event);
	}
	else
	{
		this.dialog.update("setAnswer", answer);
	}
}

</script>

</class>