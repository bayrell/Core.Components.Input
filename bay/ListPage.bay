/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.Events.ChangeEvent;
use Runtime.Web.Events.MouseClickEvent;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;
use Runtime.Web.Response;
use Runtime.Web.Button.Button;
use Runtime.Web.CRUD.CrudEvent;
use Runtime.Web.CRUD.CrudInterface;
use Runtime.Web.CRUD.CrudModel;
use Runtime.Web.CRUD.Form;
use Runtime.Web.CRUD.FormModel;
use Runtime.Web.Dialog.Dialog;
use Runtime.Web.Dialog.DialogEvent;
use Runtime.Web.Dialog.DialogModel;


class ListPage extends Component
{
	Form form_add = null;
	Form form_edit = null;
	Dialog dialog_add = null;
	Dialog dialog_answer = null;
	
	
	
	/**
	 * Returns module name
	 */
	pure string moduleName() => "App";
	
	
	
	/**
	 * Returns api name
	 */
	pure string crudApiName() => "App.Nginx";
	
	
	
	/**
	 * Returns form class name
	 */
	pure string getFormClassName() => classof Form;
	
	
	
	/**
	 * Returns required components
	 */
	pure Collection<string> components() => 
	[
		classof Button,
		classof Dialog,
		classof Form,
	];
	
	
	
	/**
	 * Component css
	 */
	pure string css(Dict<string> vars) => 
		@css{
			%list{
				position: relative;
				height: 100%;
			}
			%content{
				height: 100%;
				display: flex;
				align-items: stretch;
			}
			%items{
				width: 350px;
				position: relative;
				overflow-y: auto;
			}
			%item{
				position: relative;
				padding: 10px;
				cursor: pointer;
				border-bottom: 1px #ccc solid;
			}
			%item.active{
				background-color: #337ab7;
				border-color: #337ab7;
				color: white;
			}
			%item > %(Button)button{
				float: right;
				padding: 2px 5px;
				font-size: 10px;
			}
			%item_row{
				padding-bottom: 5px;
				padding-right: 40px;
			}
			%item_row:last-child{
				padding-bottom: 0px;
			}
			%item_label, %item_text{
				display: inline-block;
				vertical-align: top;
			}
			%item_label{
				display: none;
				width: 0px;
				text-align: right;
				padding-right: 5px;
			}
			%item_text{
				width: calc(100% - 0px);
				text-align: left;
				padding-left: 5px;
				overflow-wrap: anywhere;
			}
			%item_disabled{
				position: absolute;
				right: 0;
				top: 0;
				background-color: #880000;
				color: white;
				font-size: 12px;
			}
			%info{
				width: calc(100% - 350px);
				padding-left: 10px;
				padding-right: 10px;
				padding-bottom: 10px;
				overflow-y: auto;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	pure html render(LayoutModel layout, CrudModel model, Dict params, html content) =>
		<div @class="list" @key="list">
			{ static::renderTopButtons(layout, model, params) }
			<div @class="content" @key="content">
				{ static::renderItems(layout, model, params) }
				{ static::renderInfo(layout, model, params) }
			</div>
			{ static::renderDialogs(layout, model, params) }
		</div>
	;
	
	
	
	/**
	 * Render Top Buttons
	 */
	pure html renderTopButtons(LayoutModel layout, CrudModel model, Dict params) =>
		<div @class="buttons_top" @key="top">
			<Button @eventAsync:MouseClickEvent="onShowAddClick">Add</Button>
		</div>
	;
	
	
	
	/**
	 * Render Items
	 */
	pure html renderItems(LayoutModel layout, CrudModel model, Dict params) =>
		<div @class="items" @key="items">
		{
			model.items.map
			(
				html (Dict item, int index) use (layout, model, params) =>
					<div @class="item" data-index={ index } @key={ index }
						class={ model.active == index ? "active": "" }
						@event:MouseClickEvent="onItemClick"
					>
						{ static::renderItem(layout, model, params, item) }
					</div>
			)
		}
		</div>
	;
	
	
	
	/**
	 * Render info
	 */
	pure html renderInfo(LayoutModel layout, CrudModel model, Dict params)
	{
		string form_class_name = static::getFormClassName();
		return <div @class="info" @key="info">
			<{ form_class_name } @bind="form_edit" @ref="form_edit" @key="form_edit"
				action="edit" @eventAsync:CrudEvent="onCrudEvent"
				fields={ model.form_fields } struct={ model.fields }
			/>
		</div>;
	}
	
	
	
	/**
	 * Render dialogs
	 */
	pure html renderDialogs(LayoutModel layout, CrudModel model, Dict params)
	{
		string form_class_name = static::getFormClassName();
		return <Dialog @bind="dialog_add" @ref="dialog_add" @key="dialog_add"
			style={ DialogModel::STYLE_CONTENT } show_buttons={ false }
			@eventAsync:DialogEvent="onDialogEvent"
		>
			<{ form_class_name } @bind="form_add" @ref="form_add" @key="form_add"
				action="add" @eventAsync:CrudEvent="onCrudEvent"
				fields={ model.form_fields } struct={ model.fields }
			/>
		</Dialog>
		<Dialog @bind="dialog_answer" @ref="dialog_answer" @key="dialog_answer"
			style={ DialogModel::STYLE_CONFIRM } auto_hide={ false }
			@eventAsync:DialogEvent="onDialogEvent"
		/>;
	}
	
	
	
	/**
	 * Render item
	 */
	pure html renderItem(LayoutModel layout, CrudModel model, Dict params, Dict item) =>
		<Button @eventAsync:MouseClickEvent="onDeleteClick" data-action="delete" @tag={ item["id"] }>[ D ]</Button>
		<div @class="item_row name">
			{ model::getItemName(item) }
		</div>
	;
	
	
	
	#ifdef FRONTEND then
	
	
	/**
	 * Add click
	 */
	async void onShowAddClick(MouseClickEvent e)
	{
		e.cancel();
		this.updateModelValue(["form_add"], new FormModel{ "item": new Dict() });
		this.dialog_add.show();
	}
	
	
	
	/**
	 * Delete click
	 */
	async void onDeleteClick(MouseClickEvent e)
	{
		int item_id = e["target"]["params"]["@tag"];
		e.cancel();
		
		CrudModel model = this.model();
		Dict item = model -> method getItemById(item_id);
		if (item == null) return;
		
		this.dialog_answer.show
		{
			"title": _("Runtime.Web.CRUD", "Delete %name% ?", { "name": model::getItemName(item) }),
			"tag":
			{
				"action": "delete",
				"item": item
			},
		};
	}
	
	
	
	/**
	 * Dialog event
	 */
	async void onDialogEvent(DialogEvent e)
	{
		if (e.instance.params["@key"] == "dialog_answer")
		{
			if (e.button_result == "cancel")
			{
				this.dialog_answer.hide();
			}
			else
			{
				string action = e["tag"]["action"];
				Dict item = e["tag"]["item"];
				if (action == "delete")
				{
					await this.onDeleteItem( item["id"] );
				}
			}
		}
	}
	
	
	
	/**
	 * Form add Event
	 */
	async void onCrudEvent(CrudEvent e)
	{
		CrudModel model = this.model();
		
		if (e.event == CrudEvent::ACTION_CANCEL)
		{
			if (e.instance.params["@key"] == "form_add")
			{
				this.dialog_add.hide();
				this.updateModelValue(["form_add"], null);
			}
			else if (e.instance.params["@key"] == "form_delete")
			{
				this.dialog_answer.hide();
			}
		}
		else if (e.event == CrudEvent::ACTION_CREATE)
		{
			await this.onAddItem(e.item);
		}
		else if (e.event == CrudEvent::ACTION_UPDATE)
		{
			await this.onEditItem(e.item);
		}
		else if (e.event == CrudEvent::ACTION_DELETE)
		{
			int index = model.active;
			Dict item = model -> method getItemByIndex(index);
			this.dialog_answer.show
			{
				"title": _("Runtime.Web.CRUD", "Delete %name% ?", {"name": model::getItemName(item)}),
				"tag": 
				{
					"action": "delete",
					"item": item
				},
			};
		}
	}
	
	
	
	/**
	 * Click item
	 */
	void onItemClick(MouseClickEvent e)
	{
		CrudModel model = this.model();
		int index = e.target.params.get("data-index");
		Dict item = model -> method getItemByIndex(index);
		
		/* Update model values */
		this.updateModel
		{
			"active": index,
			"form_edit": new FormModel{ "item": item },
		};
	}
	
	
	
	/**
	 * Add item
	 */
	async void onAddItem(Dict item)
	{
		CrudModel model = this.model();
		string api_name = static::crudApiName();
		
		/* Set wait message */
		this.form_add.setApiWaitResponse();
		
		/* Call create api */
		MessageRPC msg = @ -> await method sendMessage
		{
			"api_name": api_name,
			"space_name": classof CrudInterface,
			"method_name": "create",
			"data":
			{
				"item": item,
			},
		};
		
		/* Set result */
		bool is_success = msg -> method isSuccess;
		if (is_success)
		{
			item = msg["response"]["item"];
			this.dialog_add.hide();
			this.updateModel
			{
				"active": 0,
				"items": this.model().items.unshiftIm(item),
				"form_add": null,
				"form_edit": new FormModel{ "item": item },
			};
		}
		else
		{
			/* Set error message */
			this.form_add.setApiResponse(msg);
		}
	}
	
	
	
	/**
	 * Edit item
	 */
	async void onEditItem(Dict item)
	{
		CrudModel model = this.model();
		string api_name = static::crudApiName();
		
		/* Find index */
		int index = model.items.find( bool (Dict elem) use (item) => item["id"] == elem["id"] );
		
		/* Set wait message */
		this.form_edit.setApiWaitResponse();
		
		/* Call create api */
		MessageRPC msg = @ -> await method sendMessage
		{
			"api_name": api_name,
			"space_name": classof CrudInterface,
			"method_name": "update",
			"data":
			{
				"item": item,
			},
		};
		
		/* Set result */
		bool is_success = msg -> method isSuccess;
		if (is_success)
		{
			CrudModel model = this.model();
			Dict item = msg["response"]["item"];
			
			/* Find index */
			int index = model.items.find( bool (Dict elem) use (item) => item["id"] == elem["id"] );
			this.updateModel
			{
				"items": model.items.setIm(index, item),
			};
			this.form_edit.updateModel
			{
				"item": item,
			}
			this.form_edit.setApiResponse(msg);
		}
		else
		{
			/* Set error message */
			this.form_edit.setApiResponse(msg);
		}
	}
	
	
	
	/**
	 * Delete item
	 */
	async void onDeleteItem(int item_id)
	{
		CrudModel model = this.model();
		string api_name = static::crudApiName();
		
		/* Set wait message */
		this.dialog_answer.updateModel
		{
			"message": _("Runtime.Web.CRUD", "Please wait ..."),
			"success": "",
			"error": "",
		};
		
		/* Call create api */
		MessageRPC msg = @ -> await method sendMessage
		{
			"api_name": api_name,
			"space_name": classof CrudInterface,
			"method_name": "delete",
			"data":
			{
				"id": item_id,
			},
		};
		
		/* Set result */
		bool is_success = msg -> method isSuccess;
		if (is_success)
		{
			CrudModel model = this.model();
			
			/* Find index */
			int index = model.items.find( bool (Dict elem) use (item_id) => item_id == elem["id"] );
			if (index != -1)
			{
				this.updateModel
				{
					"items": model.items.removeIm(index),
				};
			}
			
			/* Hide form edit */
			if (index == model.active)
			{
				this.updateModel
				{
					"active": -1,
					"form_edit": null,
				};
			}
			
			/* Hide dialog */
			this.dialog_answer.hide();
		}
		else
		{
			/* Set error message */
			this.dialog_answer.updateModel
			{
				"message": "",
				"success": "",
				"error": msg -> attr "error",
			};
		}
		
	}
	
	#endif
	
}