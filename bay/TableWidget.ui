<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.CRUD.TableWidget" extends="Runtime.Web.App.Widget"
	module="Runtime.Web.CRUD" model="Runtime.Web.CRUD.CrudPageModel"
>

<use name="Runtime.Core.Message" />
<use name="Runtime.Web.App.LayoutModel" />
<use name="Runtime.Web.App.PageModel" />
<use name="Runtime.Web.App.RemoteCallAnswer" />
<use name="Runtime.Web.App.RenderContainer" />
<use name="Runtime.Web.App.Request" />
<use name="Runtime.Web.App.WidgetModel" />
<use name="Runtime.Web.CRUD.CrudWidgetEvent" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.CRUD.TableWidgetModel" />
<use name="Runtime.Web.Events.BaseEvent" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.Input.Button" />

<style>
.table{
	border-collapse: collapse;
	border: 1px ${ vars["colors", "default", "border"] } solid;
	margin-top: 10px;
}
.td, .th{
	border: 1px ${ vars["colors", "default", "border"] } solid;
	padding: 5px;
	text-align: center;
	font-size: ${ vars["font", "size"] };
}
.row:hover td{
	background-color: ${ vars["colors", "default", "hover-background"] };
	color: ${ vars["colors", "default", "hover-text"] };
}
.td-edit-buttons{
	margin-left: -2px;
	margin-right: -2px;
}
.td-edit-buttons .button, .td-edit-buttons %(Button)button{
	margin-left: 2px;
	margin-right: 2px;
}
</style>


<script>


/**
 * Returns crud search params
 */
pure Dict getCrudSearchParams(Request request)
{
	Map data = new Map();
	
	if (rtl::exists(request.query))
	{
		Vector search_filter = new Vector();
		Dict filter = request.query["filter"] |> default Dict null;
		if (filter)
		{
			Collection keys = filter.keys();
			for (int i=0; i<keys.count(); i++)
			{
				string key_name = keys[i];
				search_filter.pushValue([key_name, "=", filter[key_name]]);
			}
			data.setValue("filter", search_filter.toCollection());
		}
		
		string page = request.query.get("page", 1) - 1;
		if (page < 0) page = 0;
		data.setValue("page", page);
		data.setValue("limit", 20);
	}
	
	return data.toDict();
}



/**
 * Call route widget model
 */
static async WidgetModel callRouteWidgetModel
(RenderContainer container, PageModel page_model, string widget_key, WidgetModel widget_model)
{
	if (page_model.page_action != widget_model.page_action) return widget_model;
	
	Dict search_params = static::getCrudSearchParams(container.request);
		
	/* Page class */
	string page_class = container.layout.page_class;
	
	/* Get crud object name */
	string object_name = rtl::applyMethod(page_class, "getCrudObjectName");
	
	/* Remote call */
	RemoteCallAnswer answer = await container.externalBusCall
	{
		"object_name": object_name,
		"interface_name": "core.crud",
		"method_name": "search",
		"data": search_params,
	};
	
	widget_model = widget_model::setCrudAnswer(widget_model, answer);
	
	return widget_model;
}



/**
 * Extend component model
 */
pure PageModel extendWidgetModel(BaseStruct layout, PageModel model, Dict params, string widget_key) => model;


</script>


<template name="render">

	<table class="table" @key="table">
		%var TableWidgetModel table_widget_model = model.widgets[ params["widget_key"] ];
		
		{ static::renderHeader(layout, model, params, table_widget_model) }
		{ static::renderRows(layout, model, params, table_widget_model) }
	</table>

</template>


<template name="renderHeader"
	args="LayoutModel layout, CrudPageModel model, Dict params, TableWidgetModel table_widget_model"
>
	%var Collection<string> table_fields = model.table_fields;
	
	<tr class="header">
	%for (int i=0; i<table_fields.count(); i++)
	{
		%var string field_name = table_fields[i];
		%var FieldInfo field = model.getFieldInfo(field_name);
		<th class="th" class={ "th--" ~ field_name } data-name={ field_name } @key={ "th-" ~ field_name }>
			{ field["label"] }
		</th>
	}
	</tr>
	
</template>


<template name="renderRows"
	args="LayoutModel layout, CrudPageModel model, Dict params, TableWidgetModel table_widget_model"
>	
	%if (table_widget_model != null and table_widget_model.rows != null)
	{
		%for (int i=0; i<table_widget_model.rows.count(); i++)
		{
			{ static::renderRow(layout, model, params, table_widget_model, i) }
		}
	}
</template>


<template name="renderRow"
	args="LayoutModel layout, CrudPageModel model, Dict params,
		TableWidgetModel table_widget_model, int index"
>
	%var Collection<string> table_fields = model.table_fields;
	
	<tr class="row" data-index={ index } @key={ "tr-" ~ index }>
	%for (int i=0; i<table_fields.count(); i++)
	{
		%var string field_name = table_fields[i];
		%var FieldInfo field = model.getFieldInfo(field_name);
		<td class="td" class={ "td-" ~ field_name } data-name={ field_name } @key={ "td-" ~ field_name } >
			{ static::renderCell(layout, model, params, table_widget_model, index, field) }
		</td>
	}
	</tr>
	
</template>


<template name="renderCell"
	args="LayoutModel layout, CrudPageModel model, Dict params,
		TableWidgetModel table_widget_model, int index, FieldInfo field"
>
	%var Dict row = table_widget_model.rows[index];
	%var string crud_class_name = layout.page_class;
	
	%if (field != null)
	{
		%var string field_class_name = field["class_name"] |> default string "";
		%var Dict crud_settings =
		{
			"crud_kind": table_widget_model.kind,
			"crud_index": index,
			"crud_item": row,
			"crud_params": params,
			"crud_field": field,
			"crud_page_model": model,
			"crud_table_model": table_widget_model,
			"crud_show": true,
			"value": table_widget_model["rows", index, field.api_name],
		};
		
		<!-- Custom settings -->
		%if (rtl::method_exists(crud_class_name, "customSettings"))
		{
			%var crud_settings = rtl::methodApply(crud_class_name, "customSettings", [layout, crud_settings]);
		}
		
		<!-- Render value -->
		%var html renderValue = null;
		%if (rtl::method_exists(crud_class_name, "renderField"))
		{
			%var renderValue = rtl::methodApply(crud_class_name, "renderField", [layout, crud_settings]);
		}
		
		<!-- Extend class settings -->
		%var field = crud_settings["crud_field"];
		%var crud_settings = crud_settings.concat(field.class_settings);
		
		<!-- Render Field -->
		%var bool crud_show = crud_settings["crud_show"];
		%var string field_class_name = field["class_name"] |> default string "";
		%if (crud_show)
		{
			%if (renderValue !== null)
			{
				{ renderValue }
			}
			%else if (not rtl::isEmpty(field_class_name))
			{
				<{field_class_name} @bind=["rows", index, field.api_name] @key={ field.api_name } ...crud_settings />
			}
		}
	}

</template>



<script>

/**
 * On widget event
 */
async void handleEventOld(Message<BaseEvent> msg)
{
	string widget_key = this.getWidgetKey();
	if (msg.data instanceof CrudWidgetEvent and widget_key == msg.data.dest)
	{
		CrudWidgetEvent event = msg.data;
		if (event.action == CrudWidgetEvent::CREATE_ITEM)
		{
			this.widgetUpdate("prependItem", event.new_item);
		}
		else if (event.action == CrudWidgetEvent::UPDATE_ITEM)
		{
			this.widgetUpdate("setItem", event.pk, event.new_item);
		}
		else if (event.action == CrudWidgetEvent::DELETE_ITEM)
		{
			this.widgetUpdate("removeItem", event.pk);
		}
	}
}

</script>


</class>