/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD.Rules;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.ORM.QueryBuilder;
use Runtime.ORM.Record;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.CoreType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Primary;
use Runtime.Web.CRUD.Foreign;
use Runtime.Web.CRUD.ForeignField;
use Runtime.Web.CRUD.Rules.Rule;


struct ManyToMany extends Rule
{
	string class_name = "";
	string field_name = "";
	string key_name = "";
	bool save = false;
	
	
	
	/**
	 * Map attrs
	 */
	pure fn mappingAttrs(Dict item, Collection<Dict> mapping)
	{
		Map new_item = new Map();
		for (int i=0; i<mapping.count(); i++)
		{
			Dict m = mapping[i];
			string src = m["src"];
			string dest = m["dest"];
			var value = item[dest];
			new_item.set(src, value);
		}
		return new_item.toDict();
	}
	
	
	
	/**
	 * Returns foreign key
	 */
	pure memorize ForeignKey getForeignKey(string class_name, string key_name) =>
		class_name
			|> lib::applyMethod("keys")
			|> lib::filter( lib::isInstance( classof ForeignKey ) )
			|> .findItem( lib::equalAttr("name", key_name) )
		;
	
	
	
	/**
	 * Add item
	 */
	pure Foreign foreignAddItem(ManyToMany rule, Foreign foreign, Record item)
	{
		string field_name = rule.field_name;
		string class_name = rule.class_name;
		string key_name = rule.key_name;
		
		if (class_name == "" or field_name == "" or key_name == "")
		{
			return foreign;
		}
		
		ForeignKey foreign_key = static::getForeignKey(class_name, key_name);
		if (foreign_key == null) return foreign;
		
		Collection<string> keys = foreign_key.keys |> lib::map( lib::attr("dest") );
		Dict foreign_value = item.toDict().intersect(keys);
		
		ForeignKey foreign_key = foreign["fields", field_name];
		Collection foreign_keys = foreign_key["keys"] |> default Collection [];
		
		int pos = foreign_keys.find( lib::equalAttrs(foreign_value) );
		if (pos == -1)
		{
			foreign <= fields <= { field_name } <= "keys" <= foreign_keys.pushIm(foreign_value);
		}
		
		return foreign;
	}
	
	
	
	/**
	 * Load Many To Many
	 */
	static async Foreign foreignLoadManyToMany(ManyToMany rule, Foreign foreign, Dict db_settings = null)
	{
		string field_name = rule.field_name;
		string class_name = rule.class_name;
		string key_name = rule.key_name;
		
		if (class_name == "" or field_name == "" or field_name == "")
		{
			return foreign;
		}
		
		ForeignKey foreign_key = static::getForeignKey(class_name, key_name);
		if (foreign_key == null) return foreign;
		
		/* Get filter */
		Collection filter =
			foreign["fields", field_name, "keys"]
			|> default Collection []
			|> lib::map
			(
				Collection (Dict item) use (foreign_key)
				{
					Vector res = new Vector();
					item = static::mappingAttrs(item, foreign_key.keys);
					item.each
					(
						void (var value, string key) use (res)
						{
							res.push([key, "=", value]);
						}
					);
					return res.toCollection();
				}
			)
		;
		
		/* Get many to many items */
		Collection<Dict> many_to_many =
			class_name
			|> lib::method("select")
			|> lib::apply()
			|> .filter([ ["\$or", filter] ])
			|> await .all(db_settings)
			|> lib::map( Dict (Record item) => item.convertToDict() )
		;
		
		/* Add result */
		foreign <= fields <= { field_name } <= "many_to_many" <= many_to_many;
		
		return foreign;
	}
	
	
	
	/**
	 * Process Many To Many
	 */
	pure Dict foreignProcessManyToMany(ManyToMany rule, Foreign foreign, Dict item, Dict db_settings = null)
	{
		string field_name = rule.field_name;
		string class_name = rule.class_name;
		string key_name = rule.key_name;
		
		if (class_name == "" or field_name == "" or field_name == "")
		{
			return foreign;
		}
		
		ForeignKey foreign_key = static::getForeignKey(class_name, key_name);
		if (foreign_key == null) return item;
		
		Dict foreign_value = static::mappingAttrs(item, foreign_key.keys);
		
		/* Find foreign items */
		Dict<Record> fields = foreign["fields", field_name, "many_to_many"]
			|> lib::filter( lib::equalAttrs(foreign_value) )
		;
		item <= { field_name } <= fields;
		
		return item;
	}
	
	
	
	/**
	 * Save Many To Many
	 */
	pure Foreign foreignSaveManyToMany
	(
		ManyToMany rule, Foreign foreign, Dict item, Collection new_values, Dict db_settings = null
	)
	{
		string field_name = rule.field_name;
		string class_name = rule.class_name;
		string key_name = rule.key_name;
		
		if (class_name == "" or field_name == "" or field_name == "")
		{
			return foreign;
		}
		
		ForeignKey foreign_key = static::getForeignKey(class_name, key_name);
		if (foreign_key == null) return;
		
		/* Get primary key of sub class */
		Primary class_primary_key = class_name |> lib::applyMethod("getPrimaryKeyAnnotation");
		
		/* Mapping key */
		Dict many_to_many_key = static::mappingAttrs(item, foreign_key.keys);
		
		/* Filter new values */
		new_values = new_values.filter( lib::equalAttrs(many_to_many_key) );
		
		/* Get filter */
		Vector filter = new Vector();
		many_to_many_key.each
		(
			void (var value, string key) use (filter)
			{
				filter.push([key, "=", value]);
			}
		);
		filter = filter.toCollection();
		
		/* Get sub class methods */
		fn create = rtl::method(class_name, "create");
		fn change = rtl::method(class_name, "change");
		fn getDiffCoreTypes = rtl::method(class_name, "getDiffCoreTypes");
		fn getPrimaryKey = rtl::method(class_name, "getPrimaryKey");
		fn toDatabase = rtl::method(class_name, "toDatabase");
		fn delete = rtl::method(class_name, "delete");
		fn save = rtl::method(class_name, "save");
		fn select = rtl::method(class_name, "select");
		fn update = rtl::method(class_name, "update");
		
		/* Get many to many items */
		Collection<Record> old_values =
			select()
			|> .filter(filter)
			|> await .all(db_settings)
		;
		
		/* Add old values */
		foreign <= fields <= { field_name } <= "old_values" <= old_values;
		
		/* Update keys */
		for (int j=0; j<new_values.count(); j++)
		{
			Dict new_value = new_values[j].toDict();
			Dict new_value_key = new_value.intersect(class_primary_key.keys);
			int index = old_values.find( lib::equalAttrs( new_value_key ) );
			
			/* Convert to database */
			new_value = toDatabase(new_value);
			
			if (index == -1)
			{
				await create(new_value, db_settings);
			}
			else
			{
				Record old_item = old_values[index].toDict();
				Dict old_item_pk = getPrimaryKey(old_item);
				Dict diff = getDiffCoreTypes(old_item, new_value);
				diff = diff.removeKeys( class_primary_key.keys );
				await update(old_item_pk, diff, db_settings);
			}
		}
		
		/* Remove keys */
		for (int j=0; j<old_values.count(); j++)
		{
			Dict old_item = old_values[j].toDict();
			Dict old_item_key = old_item.intersect(class_primary_key.keys);
			int index = new_values.find( lib::equalAttrs( old_item_key ) );
			if (index == -1)
			{
				await delete(old_item_key, db_settings);
			}
		}
		
		/* Add new values */
		foreign <= fields <= { field_name } <= "new_values" <= new_values;
		
		return foreign;
	}
}