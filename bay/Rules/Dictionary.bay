/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD.Rules;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.ORM.QueryBuilder;
use Runtime.ORM.Record;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.CoreType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Primary;
use Runtime.Web.CRUD.Foreign;
use Runtime.Web.CRUD.ForeignField;
use Runtime.Web.CRUD.Rules.Rule;


struct Dictionary extends Rule
{
	string name = "";
	string class_name = "";
	string key_name = "";
	fn buildSearchQuery = null;
	
	
	
	/**
	 * Add item
	 */
	pure Foreign foreignAddItem(Dictionary rule, Foreign foreign, Record item)
	{
		return foreign;
	}
	
	
	
	/**
	 * Load full dictionary
	 */
	static async Foreign foreignLoadDictionary(Dictionary rule, Foreign foreign, Dict db_settings = null)
	{
		string name = rule.name;
		string class_name = rule.class_name;
		fn buildSearchQuery = rule.buildSearchQuery;
		if (buildSearchQuery == null) buildSearchQuery = QueryBuilder (QueryBuilder q) => q;
		
		if (class_name == "" or name == "")
		{
			return foreign;
		}
		
		/* Get all options */
		Collection<Dict> options =
			class_name
			|> lib::method("select")
			|> lib::apply()
			|> buildSearchQuery
			|> await .all(db_settings)
			|> lib::map( Dict (Record item) => item.convertToDict() )
		;
		
		foreign <= fields <= { name } <= options <= options;
		
		return foreign;
	}
	
}