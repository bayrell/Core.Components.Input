/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.CRUD.Rules;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.ORM.QueryBuilder;
use Runtime.ORM.Record;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.Rules.Rule;


class Dictionary extends Rule
{
	assignable string name = "";
	assignable string class_name = "";
	assignable string key_name = "";
	assignable fn buildSearchQuery = null;
	assignable Collection fields = null;
	
	
	
	/**
	 * Create response
	 */
	async Dict createResponse(CrudApi api, Dict response)
	{
		Dict db_settings = null;
		
		if (this.fields == null) return response;
		if (not api.isSuccess()) return response;
		if (api.action != "search" and api.action != "getItem") return response;
		
		string name = this.name;
		string class_name = this.class_name;
		if (class_name == "" or name == "")
		{
			return response;
		}
		
		fn buildSearchQuery = this.buildSearchQuery;
		if (buildSearchQuery == null) buildSearchQuery = QueryBuilder (QueryBuilder q) => q;
		
		/* Get all options */
		Collection<Dict> options = rtl::applyMethod(class_name, "select")
			|> buildSearchQuery
			|> await .all(db_settings)
			|> lib::map( Dict (Record item) => item.convertToDict(this.fields) )
		;
		
		/* Set response */
		response <= options <= { name } <= options;
		
		return response;
	}
	
}