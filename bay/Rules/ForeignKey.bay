/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud.Rules;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.ORM.Connection;
use Runtime.ORM.Relation;
use Runtime.ORM.RelationArray;
use Runtime.ORM.Annotations.ForeignKey as ForeignKeyORM;
use Runtime.Web.ApiResult;
use Runtime.Web.Crud.CrudPageApi;
use Runtime.Web.Crud.Rules.CrudRule;


struct ForeignKey extends CrudRule
{
	string name = "";
	string dictionary_name = "";
	string model_name = "";
	
	
	/**
	 * Search after
	 */
	async void onSearchAfter(CrudPageApi api)
	{
		if (this.name == "") return ;
		if (this.dictionary_name == "") return ;
		
		/* Check action */
		if (api.action != "actionSearch" and api.action != "actionItem")
		{
			return;
		}
		
		ForeignKeyORM foreign_key = Relation::getForeignKey(this.name);
		if (foreign_key == null) return;
		
		Connection conn = api.getDatabaseConnection();
		RelationArray result = null;
		
		/* Search items */
		if (api.action == "actionSearch")
		{
			result = await foreign_key.resolve(conn, api.items);
			api.dictionary.setValue(this.dictionary_name, result);
		}
		
		/* Get item */
		else if (api.action == "actionItem")
		{
			result = await foreign_key.resolveAll(conn);
			api.dictionary.setValue(this.dictionary_name, result);
		}
		
		/* Transform items */
		Collection items = null;
		if (result and this.model_name != "")
		{
			items = result.toModel(this.model_name);
			
			/* Set response */
			ApiResult api_result = api.container.response;
			api_result <= data <= dictionary <= { this.dictionary_name } <= items;
			api.container.response = api_result;
		}
	}
}
