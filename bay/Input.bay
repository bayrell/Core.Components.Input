/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime.Web.Input;

use Runtime.CoreStruct;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.Events.User.ChangeEvent;


class Input extends Component
{
	
	public CoreStruct model;
	
	
	
	/**
	 * Returns model name
	 */
	lambda string modelName() => classof CoreStruct;
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			%input{
				width: 100%;
				padding: 6px 12px;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	lambda html render(LayoutModel layout, CoreStruct model, Dict params, html content)
	{
		string value = (params != null) ? params.get("value", "") : "";
		string name = (params != null) ? params.get("name", "") : "";
		string kind = (params != null) ? params.get("type", "input") : "";
		primitive tag = (params != null) ? params.get("@tag", "") : "";
		return
			<input @class='input' @tag={ tag } @event:ChangeEvent="onChange"
				name={ name } type={ kind } value={ model }
			>{ content }</input>
		;
	}
	
	
	
	#ifdef FRONTEND then
	
	/* ---------------------------------- Events ----------------------------------- */
	
	
	/**
	 * On change
	 */
	public void onChange(ChangeEvent e)
	{
		this.signalOut(e);
	}
	
	
	#endif
	
}
