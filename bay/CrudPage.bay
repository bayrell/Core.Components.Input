<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Web.Crud.CrudPage">

<use name="Runtime.ModelProxy" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.Crud.Button" />
<use name="Runtime.Web.Crud.FieldInfo" />
<use name="Runtime.Web.Crud.Form" component="true" />
<use name="Runtime.Web.Crud.FormEvent" />
<use name="Runtime.Web.Crud.RowButtons" component="true" />
<use name="Runtime.Web.Crud.RowNumber" component="true" />
<use name="Runtime.Web.Crud.StructBuilder" />
<use name="Runtime.Web.Crud.Table" component="true" />


<template name="renderPageTitle">
	<h1>{{ model.getPageTitle( model.action ) }}</h1>
</template>


<template name="renderIndex">
	%set StructBuilder builder = static::getStruct();
	
	%render static::renderPageTitle();
	
	<Table
		builder={{ builder }}
		page={{ model.page }}
		pages={{ model.pages }}
		@model=[]
	>
	</Table>
	
</template>


<template name="renderSaveForm">
	%set StructBuilder builder = static::getStruct();
	<Form
		@ref="save_form"
		@model=["save_form"]
		@event:FormEvent="onFormEvent"
		builder={{ builder }}
		buttons={{ static::getFormButtons(layout) }}
	/>
</template>


<template name="renderSave">
	
	<div class="button_top">
		<Button type="small" href={{ static::getBackHref(layout) }}>
			Back
		</Button>
	</div>
	
	%if (model.save_form.item)
	{
		%render static::renderPageTitle(model.getPageTitle("edit"));
		%render static::renderSaveForm();
	}
	
	%else
	{
		<p>Item not found</p>
	}
	
</template>


<template name="renderDelete">
	
	<div class="button_top">
		<Button type="small" href={{ static::getBackHref(layout) }}>
			Back
		</Button>
	</div>
	
	%if (model.delete_form.item)
	{
		<center>
			%render static::renderPageTitle(model.getPageTitle("delete"));
			<div class="crud_page__delete_buttons">
				<Button type="danger"
					@event:MouseClickEvent="onDeleteClick"
				>Delete</Button>
			</div>
			<div class="web_form__result" class={{ model.delete_form.getErrorClass() }} >
				{{ model.delete_form.error_message }}
			</div>
		</center>
	}
	
	%else
	{
		<p>Item not found</p>
	}
	
</template>


<template>
	<div class="crud_page">
	
	%if (model.action == "index")
	{
		%render static::renderIndex();
	}
	
	%else if (model.action == "add" or model.action == "edit")
	{
		%render static::renderSave();
	}
	
	%else if (model.action == "delete")
	{
		%render static::renderDelete();
	}
	
	</div>
</template>


<script>

var save_form = null;


/**
 * Returns back href
 */
pure string getBackHref(LayoutModel layout) => "";


/**
 * Submit
 */
async void onFormEvent(Message<FormEvent> msg)
{
	/* Register button click */
	if (msg.event.kind == FormEvent::BUTTON_CLICK and msg.event.button_name == "save")
	{
		ModelProxy model = this.modelProxy();
		
		/* Set wait message */
		model.proxy("save_form").commit("setWaitMessage");
		
		/* Send save form */
		await model.commitAsync("crudSave");
	}
}


/**
 * Submit
 */
async void onDeleteClick(Message<MouseClickEvent> msg)
{
	ModelProxy model = this.modelProxy();
	
	/* Set wait message */
	model.proxy("delete_form").commit("setWaitMessage");
	
	/* Send delete form */
	await model.commitAsync("crudDelete");
}


/**
 * Returns struct
 */
pure memorize StructBuilder getStruct() => null;


/**
 * Returns struct
 */
pure Collection getFormButtons(LayoutModel layout) => [
	{
		"name": "save",
		"label": "Save",
		"type": "primary"
	},
];


</script>

</class>