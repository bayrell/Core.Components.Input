/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud;

use Runtime.BaseStruct;
use Runtime.Web.ApiResult;
use Runtime.Web.App;
use Runtime.Web.BaseRoute;
use Runtime.Web.Bus;
use Runtime.Web.ModelProxy;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteInfo;
use Runtime.Web.Crud.CrudModel;
use Runtime.Web.Crud.FormModel;


class CrudRoute extends BaseRoute
{
	
	/**
	 * Returns layout name
	 */
	string getLayoutName() => "default";
	
	
	/**
	 * Returns data model name
	 */
	string getDataModelName() => "";
	
	
	/**
	 * Returns page model name
	 */
	string getPageModelName() => "";
	
	
	/**
	 * Returns page name
	 */
	string getPageName() => "";
	
	
	/**
	 * Action index
	 */
	async void actionIndex()
	{
		string page_model_class_name = this.getPageModelName();
		string page_name = this.getPageName();
		
		this.container.setLayoutName( this.getLayoutName() );
		this.container.setPageModel( rtl::newInstance(page_model_class_name) );
		ModelProxy model = this.container.modelProxy();
		
		/* Search items */
		model.commit("setAction", "index");
		model.setAttr("page", this.container.request.query.get("p", 1));
		fn searchItems = rtl::method(page_model_class_name, "searchItems");
		await searchItems( model );
		
		/* Render page */
		this.container.render( page_name );
	}
	
	
	/**
	 * Action edit
	 */
	async void actionEdit()
	{
		string page_model_class_name = this.getPageModelName();
		string page_name = this.getPageName();
		
		this.container.setLayoutName( this.getLayoutName() );
		this.container.setPageModel( rtl::newInstance(page_model_class_name) );
		ModelProxy model = this.container.modelProxy();
		
		/* Get item */
		int id = (int)this.container.request.query["id"];
		model.commit("setAction", "edit");
		
		/* Create save form */
		ModelProxy save_form = model.proxy("save_form");
		save_form.setNewModel( new FormModel );
		
		/* Find item */
		save_form.setAttr( "item_id", id );
		fn findItem = rtl::method(page_model_class_name, "findItem");
		await findItem( model );
		save_form.commit("clearErrorMessage");
		
		/* Render page */
		this.container.render( page_name );
	}
	
	
	
	/**
	 * Action delete
	 */
	async void actionDelete()
	{
		string page_model_class_name = this.getPageModelName();
		string page_name = this.getPageName();
		
		this.container.setLayoutName( this.getLayoutName() );
		this.container.setPageModel( rtl::newInstance(page_model_class_name) );
		ModelProxy model = this.container.modelProxy();
		
		/* Get item */
		int id = (int)this.container.request.query["id"];
		model.commit("setAction", "delete");
		
		/* Create save form */
		ModelProxy delete_form = model.proxy("delete_form");
		delete_form.setNewModel( new FormModel );
		
		/* Find item */
		delete_form.setAttr( "item_id", id );
		fn findItem = rtl::method(page_model_class_name, "findItem");
		await findItem( model );
		delete_form.commit("clearErrorMessage");
		
		/* Render page */
		this.container.render( page_name );
	}
}