/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud;

use Runtime.BaseStruct;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.App;
use Runtime.Web.BaseRoute;
use Runtime.Web.Bus;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteInfo;
use Runtime.Web.Crud.CrudModel;
use Runtime.Web.Crud.CrudPageModel;
use Runtime.Web.Crud.FormModel;


class CrudRoute extends BaseRoute
{
	/**
	 * Returns layout name
	 */
	string getLayoutName() => "default";
	
	
	/**
	 * Returns page model name
	 */
	string getPageModelName() => "";
	
	
	/**
	 * Returns page name
	 */
	string getPageName() => "";
	
	
	/**
	 * Returns id name for query
	 */
	pure string getQueryId() => "id";
	
	
	/**
	 * Returns id name
	 */
	pure string getNameId() => "id";
	
	
	/**
	 * Crud route before
	 */
	async void crudRouteBefore()
	{
		ModelProxy page_model = this.container.modelProxy();
		CrudPageModel page_model_data = page_model.data();
		ModelProxy model_item = page_model.proxy(page_model_data.getItemModelName());
		string action = page_model_data.action;
		
		if (action == "add")
		{
			model_item.setAttr("item_pk", null);
		}
		else if (
			action == "edit" or
			action == "delete" or
			action == "item"
		)
		{
			string name_id = static::getNameId();
			string query_id = static::getQueryId();
			
			model_item.setAttr("item_pk", null);
			if (this.container.request.query.has( query_id ))
			{
				int value_id = (int)this.container.request.query.get( query_id );
				Map m = new Map;
				m.setValue(name_id, value_id);
				model_item.commit("setPrimaryKey", m);
			}
		}
	}
	
	
	/**
	 * Crud route after
	 */
	async void crudRouteAfter()
	{
	}
	
	
	/**
	 * Action index
	 */
	async void actionIndex()
	{
		string page_model_class_name = this.getPageModelName();
		string page_name = this.getPageName();
		
		/* Setup layout */
		this.container.setLayoutName( this.getLayoutName() );
		this.container.setPageModel( rtl::newInstance(page_model_class_name) );
		
		/* Get page and layout */
		ModelProxy page_model = this.container.modelProxy();
		ModelProxy layout = this.container.layoutProxy();
		
		/* Setup action */
		page_model.commit("setAction", CrudPageModel::ACTION_INDEX);
		page_model.commit("setPage", this.container.request.query.get("p", 1));
		
		/* Search items */
		await this.crudRouteBefore();
		await page_model.commitAsync("crudSearch");
		await this.crudRouteAfter();
		
		/* Render page */
		this.container.render( page_name );
	}
	
	
	/**
	 * Action add
	 */
	async void actionAdd()
	{
		string page_model_class_name = this.getPageModelName();
		string page_name = this.getPageName();
		
		/* Setup layout */
		this.container.setLayoutName( this.getLayoutName() );
		this.container.setPageModel( rtl::newInstance(page_model_class_name) );
		
		/* Get page and layout */
		ModelProxy page_model = this.container.modelProxy();
		ModelProxy layout = this.container.layoutProxy();
		
		/* Setup action */
		page_model.commit("setAction", CrudPageModel::ACTION_ADD);
		
		/* Create save form */
		ModelProxy save_form = page_model.proxy("save_form");
		save_form.setNewModel( new FormModel );
		
		/* Call api */
		await this.crudRouteBefore();
		await page_model.commitAsync("crudAdd");
		await this.crudRouteAfter();
		
		/* Render page */
		this.container.render( page_name );
	}
	
	
	/**
	 * Action edit
	 */
	async void actionEdit()
	{
		string page_model_class_name = this.getPageModelName();
		string page_name = this.getPageName();
		
		/* Setup layout */
		this.container.setLayoutName( this.getLayoutName() );
		this.container.setPageModel( rtl::newInstance(page_model_class_name) );
		
		/* Get page and layout */
		ModelProxy page_model = this.container.modelProxy();
		ModelProxy layout = this.container.layoutProxy();
		
		/* Setup action */
		page_model.commit("setAction", "edit");
		
		/* Create save form */
		ModelProxy save_form = page_model.proxy("save_form");
		
		/* Call api */
		await this.crudRouteBefore();
		await page_model.commitAsync("crudItem");
		save_form.commit("clearErrorMessage");
		await this.crudRouteAfter();
		
		/* Render page */
		this.container.render( page_name );
	}
	
	
	
	/**
	 * Action delete
	 */
	async void actionDelete()
	{
		string page_model_class_name = this.getPageModelName();
		string page_name = this.getPageName();
		
		/* Setup layout */
		this.container.setLayoutName( this.getLayoutName() );
		this.container.setPageModel( rtl::newInstance(page_model_class_name) );
		
		/* Get page and layout */
		ModelProxy page_model = this.container.modelProxy();
		ModelProxy layout = this.container.layoutProxy();
		
		/* Setup action */
		page_model.commit("setAction", "delete");
		
		/* Create delete form */
		ModelProxy delete_form = page_model.proxy("delete_form");
		
		/* Call api */
		await this.crudRouteBefore();
		await page_model.commitAsync("crudItem");
		delete_form.commit("clearErrorMessage");
		await this.crudRouteAfter();
		
		/* Render page */
		this.container.render( page_name );
	}
}