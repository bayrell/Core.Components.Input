/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Web.Crud;

use Runtime.BaseStruct;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.App;
use Runtime.Web.BaseRoute;
use Runtime.Web.Bus;
use Runtime.Web.RenderContainer;
use Runtime.Web.RouteInfo;
use Runtime.Web.Crud.CrudModel;
use Runtime.Web.Crud.CrudPageModel;
use Runtime.Web.Crud.FormModel;


class CrudRoute extends BaseRoute
{
	/**
	 * Returns layout name
	 */
	string getLayoutName() => "";
	
	
	/**
	 * Returns page model name
	 */
	string getPageModelName() => "";
	
	
	/**
	 * Returns index page name
	 */
	string getIndexPageName() => "";
	
	
	/**
	 * Returns save page name
	 */
	string getSavePageName() => "";
	
	
	/**
	 * Returns delete page name
	 */
	string getDeletePageName() => "";
	
		
	/**
	 * Action index
	 */
	async void actionIndex()
	{
		/* Setup action */
		this.page_model.commit("setAction", CrudPageModel::ACTION_INDEX);
		this.page_model.commit("setPage", this.container.request.query.get("page", 1));
		
		/* Search items */
		await this.page_model.commitAsync("crudRouteBefore", this, CrudPageModel::ACTION_INDEX);
		await this.page_model.commitAsync("callCrudSearch");
		await this.page_model.commitAsync("crudRouteAfter", this, CrudPageModel::ACTION_INDEX);
		
		/* Set title */
		CrudPageModel model = this.page_model.data();
		this.setPageTitle( model.getPageTitle( model.action ) );
		
		/* Render page */
		this.container.render( this.getIndexPageName() );
	}
	
	
	/**
	 * Action add
	 */
	async void actionAdd()
	{		
		/* Setup action */
		this.page_model.commit("setAction", CrudPageModel::ACTION_ADD);
		
		/* Create save form */
		ModelProxy<FormModel> save_form = this.page_model.proxy("item_form");
		
		/* Call api */
		await this.page_model.commitAsync("crudRouteBefore", this, CrudPageModel::ACTION_ADD);
		await this.page_model.commitAsync("callCrudItem");
		await this.page_model.commitAsync("crudRouteAfter", this, CrudPageModel::ACTION_ADD);
		
		/* Set title */
		CrudPageModel model = this.page_model.data();
		this.setPageTitle( model.getPageTitle( model.action ) );
		
		/* Render page */
		this.container.render( this.getSavePageName() );
	}
	
	
	/**
	 * Action edit
	 */
	async void actionEdit()
	{
		/* Setup action */
		this.page_model.commit("setAction", CrudPageModel::ACTION_EDIT);
		
		/* Call api */
		await this.page_model.commitAsync("crudRouteBefore", this, CrudPageModel::ACTION_ADD);
		await this.page_model.commitAsync("callCrudItem");
		await this.page_model.commitAsync("crudRouteAfter", this, CrudPageModel::ACTION_ADD);
		
		/* Set title */
		CrudPageModel model = this.page_model.data();
		this.setPageTitle( model.getPageTitle( model.action ) );
		
		/* Render page */
		this.container.render( this.getSavePageName() );
	}
	
	
	/**
	 * Action delete
	 */
	async void actionDelete()
	{
		/* Setup action */
		this.page_model.commit("setAction", CrudPageModel::ACTION_DELETE);
		
		/* Call api */
		await this.page_model.commitAsync("crudRouteBefore", this, CrudPageModel::ACTION_DELETE);
		await this.page_model.commitAsync("callCrudItem");
		await this.page_model.commitAsync("crudRouteAfter", this, CrudPageModel::ACTION_DELETE);
		
		/* Set title */
		CrudPageModel model = this.page_model.data();
		this.setPageTitle( model.getPageTitle( model.action ) );
		
		/* Render page */
		this.container.render( this.getDeletePageName() );
	}
}